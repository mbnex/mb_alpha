{
  "type": "object",
  "title": "4chan.org JSON Schema",
  "description": "A JSON Schema representing the structure of data on 4chan.org",
  "properties": {
    "boards": {
      "type": "array",
      "description": "List of available boards",
      "items": {
        "$ref": "#/definitions/board"
      }
    },
    "threads": {
      "type": "array",
      "description": "List of threads on a board (can also be within a board object)",
      "items": {
        "$ref": "#/definitions/thread"
      }
    },
    "catalog": {
      "type": "object",
      "description": "Represents the catalog view of a board",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The current catalog page number"
        },
        "threads": {
          "type": "array",
          "description": "List of threads in the catalog view",
          "items": {
            "$ref": "#/definitions/catalogThread"
          }
        }
      }
    }
  },
  "definitions": {
    "board": {
      "type": "object",
      "description": "Represents a single board",
      "properties": {
        "board": {
          "type": "string",
          "description": "The board's short name (e.g., 'b', 'g', 'v')",
          "pattern": "^[a-z0-9]+$"
        },
        "title": {
          "type": "string",
          "description": "The board's full title (e.g., 'Random', 'Technology', 'Video Games')"
        },
        "ws_board": {
          "type": "integer",
          "description": "Indicates if the board is work-safe (0 = not work-safe, 1 = work-safe)"
        },
        "per_page": {
          "type": "integer",
          "description": "Number of threads per page"
        },
        "pages": {
          "type": "integer",
          "description": "Total number of pages"
        },
        "max_filesize": {
          "type": "integer",
          "description": "Maximum file size allowed (in bytes)"
        },
        "max_webm_filesize": {
          "type": "integer",
          "description": "Maximum WebM file size allowed (in bytes)"
        },
        "max_comment_chars": {
          "type": "integer",
          "description": "Maximum number of characters allowed in a comment"
        },
        "max_webm_duration": {
          "type": "integer",
          "description": "Maximum WebM duration (in seconds)"
        },
        "bump_limit": {
          "type": "integer",
          "description": "Maximum number of replies before a thread stops being bumped"
        },
        "image_limit": {
          "type": "integer",
          "description": "Maximum number of images allowed in a thread"
        },
        "meta_description": {
          "type": "string",
          "description": "A short description of the board's content"
        },
        "is_archived": {
          "type": "integer",
          "description": "Indicates if the board is archived (0 = not archived, 1 = archived)"
        },
        "spoilers": {
          "type": "integer",
          "description": "Indicates if the board has spoilers enabled (0 = disabled, 1 = enabled)"
        },
        "custom_spoilers": {
          "type": "integer",
          "description": "Number of custom spoiler images available on the board"
        },
        "cooldowns": {
          "type": "object",
          "description": "Cooldown times for posting on the board",
          "properties": {
            "threads": {
              "type": "integer",
              "description": "Cooldown time for creating new threads (in seconds)"
            },
            "replies": {
              "type": "integer",
              "description": "Cooldown time for making replies (in seconds)"
            },
            "images": {
              "type": "integer",
              "description": "Cooldown time for posting images (in seconds)"
            }
          }
        },
        "forced_anon": {
          "type": "integer",
          "description": "Whether posting name is forced off (1), optional (0) or mandatory (-1)."
        }
      },
      "required": [
        "board",
        "title"
      ]
    },
    "thread": {
      "type": "object",
      "description": "Represents a single thread, including OP and replies",
      "properties": {
        "posts": {
          "type": "array",
          "description": "List of posts in the thread (including OP)",
          "items": {
            "$ref": "#/definitions/post"
          }
        }
      },
      "required": [
        "posts"
      ]
    },
    "catalogThread": {
      "type": "object",
      "description": "Represents a thread in the catalog view",
      "properties": {
        "no": {
          "type": "integer",
          "description": "The OP's post number"
        },
        "last_replies": {
          "type": "array",
          "description": "A list of the last few replies in the thread (abbreviated)",
          "items": {
            "$ref": "#/definitions/post"
          }
        },
        "omitted_posts": {
          "type": "integer",
          "description": "The number of omitted replies"
        },
        "omitted_images": {
          "type": "integer",
          "description": "The number of omitted images"
        },
        "sticky": {
          "type": "integer",
          "description": "Indicates if the thread is stickied (0 = not stickied, 1 = stickied)"
        },
        "closed": {
          "type": "integer",
          "description": "Indicates if the thread is closed (0 = not closed, 1 = closed)"
        },
        "replies": {
          "type": "integer",
          "description": "The number of replies in the thread"
        },
        "images": {
          "type": "integer",
          "description": "The number of images in the thread"
        },
        "bumplimit": {
          "type": "integer",
          "description": "Indicates if the thread has reached the bump limit (0 = no, 1 = yes)"
        },
        "imagelimit": {
          "type": "integer",
          "description": "Indicates if the thread has reached the image limit (0 = no, 1 = yes)"
        },
        "last_modified": {
          "type": "integer",
          "description": "Timestamp of the last modification to the thread"
        },
        "resto": {
          "type": "integer",
          "description": "Indicates the type of reply. Always 0 on the OP."
        },
        "now": {
          "type": "string",
          "description": "Human-readable string with post date and time"
        },
        "time": {
          "type": "integer",
          "description": "Unix timestamp of the post creation time"
        },
        "name": {
          "type": "string",
          "description": "The poster's name (or 'Anonymous')"
        },
        "trip": {
          "type": "string",
          "description": "The poster's tripcode (if any)"
        },
        "id": {
          "type": "string",
          "description": "Poster ID, only enabled on some boards"
        },
        "capcode": {
          "type": "string",
          "description": "Indicates poster's role (e.g., 'mod', 'admin')"
        },
        "country": {
          "type": "string",
          "description": "Poster's country code (if enabled)"
        },
        "country_name": {
          "type": "string",
          "description": "Poster's country name (if enabled)"
        },
        "sub": {
          "type": "string",
          "description": "The thread's subject"
        },
        "com": {
          "type": "string",
          "description": "The post's comment (may contain HTML)"
        },
        "tim": {
          "type": "integer",
          "description": "Timestamp used for the filename of the uploaded image"
        },
        "filename": {
          "type": "string",
          "description": "The original filename of the uploaded image"
        },
        "ext": {
          "type": "string",
          "description": "The file extension of the uploaded image"
        },
        "fsize": {
          "type": "integer",
          "description": "The file size of the uploaded image (in bytes)"
        },
        "md5": {
          "type": "string",
          "description": "The MD5 hash of the uploaded image"
        },
        "w": {
          "type": "integer",
          "description": "The width of the uploaded image"
        },
        "h": {
          "type": "integer",
          "description": "The height of the uploaded image"
        },
        "tn_w": {
          "type": "integer",
          "description": "The width of the thumbnail image"
        },
        "tn_h": {
          "type": "integer",
          "description": "The height of the thumbnail image"
        },
        "filedeleted": {
          "type": "integer",
          "description": "Indicates if the file was deleted (0 = no, 1 = yes)"
        },
        "spoiler": {
          "type": "integer",
          "description": "Indicates if the image is a spoiler (0 = no, 1 = yes)"
        },
        "custom_spoiler": {
          "type": "integer",
          "description": "ID of the custom spoiler image used"
        },
        "m_img": {
          "type": "integer",
          "description": "Indicates whether the image is a static image (0) or a gif (1)."
        },
        "replies": {
          "type": "integer",
          "description": "Number of replies"
        },
        "images": {
          "type": "integer",
          "description": "Number of images"
        },
        "bumplimit": {
          "type": "integer",
          "description": "Indicates if the thread has reached the bump limit (0 = no, 1 = yes)"
        },
        "imagelimit": {
          "type": "integer",
          "description": "Indicates if the thread has reached the image limit (0 = no, 1 = yes)"
        },
        "tag": {
          "type": "string",
          "description": "Thread tag. Only available on some boards."
        },
        "semantic_url": {
          "type": "string",
          "description": "URL-friendly version of the thread subject."
        }
      },
      "required": [
        "no"
      ]
    },
    "post": {
      "type": "object",
      "description": "Represents a single post (can be OP or reply)",
      "properties": {
        "no": {
          "type": "integer",
          "description": "The post number"
        },
        "resto": {
          "type": "integer",
          "description": "The post number of the thread OP (0 if this is the OP)"
        },
        "sticky": {
          "type": "integer",
          "description": "Indicates if the thread is stickied (0 = not stickied, 1 = stickied)"
        },
        "closed": {
          "type": "integer",
          "description": "Indicates if the thread is closed (0 = not closed, 1 = closed)"
        },
        "now": {
          "type": "string",
          "description": "Human-readable string with post date and time"
        },
        "time": {
          "type": "integer",
          "description": "Unix timestamp of the post creation time"
        },
        "name": {
          "type": "string",
          "description": "The poster's name (or 'Anonymous')"
        },
        "trip": {
          "type": "string",
          "description": "The poster's tripcode (if any)"
        },
        "id": {
          "type": "string",
          "description": "Poster ID, only enabled on some boards"
        },
        "capcode": {
          "type": "string",
          "description": "Indicates poster's role (e.g., 'mod', 'admin')"
        },
        "country": {
          "type": "string",
          "description": "Poster's country code (if enabled)"
        },
        "country_name": {
          "type": "string",
          "description": "Poster's country name (if enabled)"
        },
        "sub": {
          "type": "string",
          "description": "The thread's subject (only on OP)"
        },
        "com": {
          "type": "string",
          "description": "The post's comment (may contain HTML)"
        },
        "tim": {
          "type": "integer",
          "description": "Timestamp used for the filename of the uploaded image"
        },
        "filename": {
          "type": "string",
          "description": "The original filename of the uploaded image"
        },
        "ext": {
          "type": "string",
          "description": "The file extension of the uploaded image"
        },
        "fsize": {
          "type": "integer",
          "description": "The file size of the uploaded image (in bytes)"
        },
        "md5": {
          "type": "string",
          "description": "The MD5 hash of the uploaded image"
        },
        "w": {
          "type": "integer",
          "description": "The width of the uploaded image"
        },
        "h": {
          "type": "integer",
          "description": "The height of the uploaded image"
        },
        "tn_w": {
          "type": "integer",
          "description": "The width of the thumbnail image"
        },
        "tn_h": {
          "type": "integer",
          "description": "The height of the thumbnail image"
        },
        "filedeleted": {
          "type": "integer",
          "description": "Indicates if the file was deleted (0 = no, 1 = yes)"
        },
        "spoiler": {
          "type": "integer",
          "description": "Indicates if the image is a spoiler (0 = no, 1 = yes)"
        },
        "custom_spoiler": {
          "type": "integer",
          "description": "ID of the custom spoiler image used"
        },
        "replies": {
          "type": "integer",
          "description": "Number of replies, only present on OP in board listing"
        },
        "images": {
          "type": "integer",
          "description": "Number of images, only present on OP in board listing"
        },
        "bumplimit": {
          "type": "integer",
          "description": "Indicates if the thread has reached the bump limit (0 = no, 1 = yes), only present on OP in board listing"
        },
        "imagelimit": {
          "type": "integer",
          "description": "Indicates if the thread has reached the image limit (0 = no, 1 = yes), only present on OP in board listing"
        },
        "last_modified": {
          "type": "integer",
          "description": "Timestamp of the last modification to the thread, only present on OP in board listing"
        },
        "tag": {
          "type": "string",
          "description": "Thread tag. Only available on some boards and only present on OP in board listing."
        },
        "semantic_url": {
          "type": "string",
          "description": "URL-friendly version of the thread subject, only present on OP in board listing."
        },
        "since4pass": {
          "type": "integer",
          "description": "The year when 4chan pass was bought. Only shown to mods and staff."
        },
        "unique_ips": {
          "type": "integer",
          "description": "Number of unique IPs that have posted in the thread. Only shown to mods and staff."
        },
        "m_img": {
          "type": "integer",
          "description": "Indicates whether the image is a static image (0) or a gif (1)."
        }
      },
      "required": [
        "no"
      ]
    }
  }
}{
  "type": "object",
  "title": "Airbnb Schema",
  "description": "JSON Schema for a simplified Airbnb application.",
  "properties": {
    "users": {
      "type": "array",
      "description": "List of users",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique user ID",
            "readOnly": true
          },
          "firstName": {
            "type": "string",
            "description": "User's first name",
            "minLength": 1,
            "maxLength": 255
          },
          "lastName": {
            "type": "string",
            "description": "User's last name",
            "minLength": 1,
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "description": "User's email address",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password (hashed)",
            "minLength": 8,
            "writeOnly": true
          },
          "phoneNumber": {
            "type": "string",
            "description": "User's phone number",
            "pattern": "^\\+?[1-9]\\d{1,14}$"
          },
          "profilePicture": {
            "type": "string",
            "description": "URL to user's profile picture",
            "format": "URL"
          },
          "aboutMe": {
            "type": "string",
            "description": "A short description about the user"
          }
        },
        "required": [
          "id",
          "firstName",
          "lastName",
          "email",
          "password"
        ]
      }
    },
    "listings": {
      "type": "array",
      "description": "List of property listings",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique listing ID",
            "readOnly": true
          },
          "hostId": {
            "type": "integer",
            "description": "ID of the user who owns the listing",
            "readOnly": true
          },
          "title": {
            "type": "string",
            "description": "Title of the listing",
            "minLength": 1,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "Description of the listing"
          },
          "propertyType": {
            "type": "string",
            "description": "Type of property (e.g., Apartment, House, etc.)",
            "enum": [
              "Apartment",
              "House",
              "Condominium",
              "Townhouse",
              "Loft",
              "Guesthouse",
              "Bed & Breakfast",
              "Bungalow",
              "Villa",
              "Cabin",
              "Chalet",
              "Other"
            ]
          },
          "roomType": {
            "type": "string",
            "description": "Type of room (e.g., Entire home/apt, Private room, etc.)",
            "enum": [
              "Entire home/apt",
              "Private room",
              "Shared room",
              "Hotel room"
            ]
          },
          "address": {
            "type": "object",
            "description": "Address of the listing",
            "properties": {
              "streetAddress": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "zipCode": {
                "type": "string"
              },
              "country": {
                "type": "string"
              }
            },
            "required": [
              "streetAddress",
              "city",
              "state",
              "zipCode",
              "country"
            ]
          },
          "coordinates": {
            "type": "object",
            "description": "Geographic coordinates of the listing",
            "properties": {
              "latitude": {
                "type": "number",
                "format": "float"
              },
              "longitude": {
                "type": "number",
                "format": "float"
              }
            },
            "required": [
              "latitude",
              "longitude"
            ]
          },
          "amenities": {
            "type": "array",
            "description": "List of amenities offered",
            "items": {
              "type": "string",
              "enum": [
                "Wifi",
                "Kitchen",
                "Heating",
                "Air conditioning",
                "Washer",
                "Dryer",
                "Free parking on premises",
                "Paid parking on premises",
                "TV",
                "Pool",
                "Gym",
                "Breakfast",
                "Indoor fireplace",
                "Hot tub",
                "Pets allowed",
                "Smoking allowed",
                "Events allowed",
                "Other"
              ]
            }
          },
          "pricePerNight": {
            "type": "number",
            "description": "Price per night in USD",
            "format": "float",
            "minimum": 0
          },
          "cleaningFee": {
            "type": "number",
            "description": "Cleaning fee in USD",
            "format": "float",
            "minimum": 0
          },
          "serviceFee": {
            "type": "number",
            "description": "Service fee in USD",
            "format": "float",
            "minimum": 0
          },
          "maxGuests": {
            "type": "integer",
            "description": "Maximum number of guests allowed",
            "minimum": 1
          },
          "bedrooms": {
            "type": "integer",
            "description": "Number of bedrooms",
            "minimum": 0
          },
          "beds": {
            "type": "integer",
            "description": "Number of beds",
            "minimum": 0
          },
          "bathrooms": {
            "type": "number",
            "description": "Number of bathrooms",
            "format": "float",
            "minimum": 0
          },
          "photos": {
            "type": "array",
            "description": "List of URLs to photos of the listing",
            "items": {
              "type": "string",
              "format": "URL"
            }
          },
          "availability": {
            "type": "array",
            "description": "Dates the listing is available (start and end)",
            "items": {
              "type": "object",
              "properties": {
                "startDate": {
                  "type": "string",
                  "format": "date"
                },
                "endDate": {
                  "type": "string",
                  "format": "date"
                }
              },
              "required": ["startDate", "endDate"]
            }
          },
          "rating": {
            "type": "number",
            "description": "Average rating of the listing (e.g., 4.5)",
            "minimum": 0,
            "maximum": 5,
            "readOnly": true
          },
          "numberOfReviews": {
            "type": "integer",
            "description": "Total number of reviews for the listing",
            "minimum": 0,
            "readOnly": true
          }
        },
        "required": [
          "id",
          "hostId",
          "title",
          "description",
          "propertyType",
          "roomType",
          "address",
          "coordinates",
          "pricePerNight",
          "maxGuests",
          "bedrooms",
          "beds",
          "bathrooms"
        ]
      }
    },
    "bookings": {
      "type": "array",
      "description": "List of bookings made by users",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique booking ID",
            "readOnly": true
          },
          "listingId": {
            "type": "integer",
            "description": "ID of the listing being booked"
          },
          "guestId": {
            "type": "integer",
            "description": "ID of the user making the booking"
          },
          "checkInDate": {
            "type": "string",
            "description": "Check-in date",
            "format": "date"
          },
          "checkOutDate": {
            "type": "string",
            "description": "Check-out date",
            "format": "date"
          },
          "numberOfGuests": {
            "type": "integer",
            "description": "Number of guests for the booking",
            "minimum": 1
          },
          "totalPrice": {
            "type": "number",
            "description": "Total price of the booking in USD",
            "format": "float",
            "minimum": 0
          },
          "status": {
            "type": "string",
            "description": "Status of the booking",
            "enum": [
              "pending",
              "confirmed",
              "cancelled",
              "completed"
            ]
          }
        },
        "required": [
          "id",
          "listingId",
          "guestId",
          "checkInDate",
          "checkOutDate",
          "numberOfGuests",
          "totalPrice",
          "status"
        ]
      }
    },
    "reviews": {
      "type": "array",
      "description": "List of reviews for listings",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique review ID",
            "readOnly": true
          },
          "listingId": {
            "type": "integer",
            "description": "ID of the listing being reviewed"
          },
          "guestId": {
            "type": "integer",
            "description": "ID of the user writing the review"
          },
          "rating": {
            "type": "number",
            "description": "Rating given (1-5)",
            "minimum": 1,
            "maximum": 5
          },
          "comment": {
            "type": "string",
            "description": "Review text"
          },
          "date": {
            "type": "string",
            "description": "Date the review was written",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "id",
          "listingId",
          "guestId",
          "rating",
          "comment",
          "date"
        ]
      }
    },
    "payments": {
      "type": "array",
      "description": "Records of payment transactions.",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique payment ID",
            "readOnly": true
          },
          "bookingId": {
            "type": "integer",
            "description": "ID of the associated booking"
          },
          "amount": {
            "type": "number",
            "description": "Payment amount in USD",
            "format": "float",
            "minimum": 0
          },
          "paymentMethod": {
            "type": "string",
            "description": "Payment method used (e.g., credit card, PayPal)",
            "enum": [
              "credit card",
              "debit card",
              "PayPal",
              "other"
            ]
          },
          "status": {
            "type": "string",
            "description": "Payment status",
            "enum": [
              "pending",
              "successful",
              "failed"
            ]
          },
          "timestamp": {
            "type": "string",
            "description": "Date and time of payment",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "id",
          "bookingId",
          "amount",
          "paymentMethod",
          "status",
          "timestamp"
        ]
      }
    }
  },
  "required": [
    "users",
    "listings",
    "bookings"
  ]
}{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "AliExpress",
  "description": "JSON Schema for AliExpress data structures",
  "type": "object",
  "properties": {
    "products": {
      "type": "array",
      "description": "List of products available on AliExpress",
      "items": {
        "$ref": "#/definitions/product"
      }
    },
    "categories": {
      "type": "array",
      "description": "List of product categories on AliExpress",
      "items": {
        "$ref": "#/definitions/category"
      }
    },
    "sellers": {
      "type": "array",
      "description": "List of sellers on AliExpress",
      "items": {
        "$ref": "#/definitions/seller"
      }
    },
    "orders": {
      "type": "array",
      "description": "List of user orders",
      "items": {
        "$ref": "#/definitions/order"
      }
    },
    "users": {
      "type": "array",
      "description": "List of AliExpress users",
      "items": {
        "$ref": "#/definitions/user"
      }
    },
    "promotions": {
      "type": "array",
      "description": "List of current promotions and deals",
      "items": {
        "$ref": "#/definitions/promotion"
      }
    },
    "search": {
      "type": "object",
      "description": "Search query and results",
      "properties": {
        "query": {
          "type": "string",
          "description": "The search query string"
        },
        "results": {
          "type": "array",
          "description": "List of products matching the query",
          "items": {
            "$ref": "#/definitions/product"
          }
        },
        "filters": {
          "type": "array",
          "description": "Available filters for refining search results",
          "items": {
            "$ref": "#/definitions/filter"
          }
        }
      },
      "required": [
        "query"
      ]
    }
  },
  "definitions": {
    "product": {
      "type": "object",
      "description": "An individual product listing",
      "properties": {
        "productId": {
          "type": "string",
          "description": "Unique identifier for the product",
          "format": "uuid"
        },
        "title": {
          "type": "string",
          "description": "Product title"
        },
        "description": {
          "type": "string",
          "description": "Product description"
        },
        "price": {
          "type": "number",
          "description": "Product price",
          "format": "float",
          "minimum": 0
        },
        "currency": {
          "type": "string",
          "description": "Currency code (e.g., USD, EUR)",
          "pattern": "^[A-Z]{3}$"
        },
        "discountPrice": {
          "type": "number",
          "description": "Discounted price, if applicable",
          "format": "float",
          "minimum": 0
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the main product image",
          "format": "URL"
        },
        "imageUrls": {
          "type": "array",
          "description": "List of product images",
          "items": {
            "type": "string",
            "format": "URL"
          }
        },
        "sellerId": {
          "type": "string",
          "description": "ID of the seller",
          "format": "uuid"
        },
        "categoryId": {
          "type": "string",
          "description": "ID of the product category",
          "format": "uuid"
        },
        "shippingOptions": {
          "type": "array",
          "description": "Available shipping options",
          "items": {
            "$ref": "#/definitions/shippingOption"
          }
        },
        "ratings": {
          "type": "object",
          "description": "Product ratings and reviews",
          "properties": {
            "averageRating": {
              "type": "number",
              "description": "Average rating out of 5",
              "minimum": 0,
              "maximum": 5
            },
            "numberOfReviews": {
              "type": "integer",
              "description": "Number of reviews",
              "minimum": 0
            }
          }
        },
        "inventory": {
          "type": "integer",
          "description": "Available quantity in stock",
          "minimum": 0
        },
        "attributes": {
          "type": "array",
          "description": "List of product attributes (e.g., color, size)",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Attribute name"
              },
              "value": {
                "type": "string",
                "description": "Attribute value"
              }
            },
            "required": [
              "name",
              "value"
            ]
          }
        },
        "variants": {
          "type": "array",
          "description": "List of product variants, if available",
          "items": {
            "type": "object",
            "description": "A specific variant of the product",
            "properties": {
              "variantId": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the product variant"
              },
              "attributes": {
                "type": "array",
                "description": "List of attributes specific to this variant",
                "items": {
                  "$ref": "#/definitions/product#/properties/attributes/items"
                }
              },
              "price": {
                "type": "number",
                "description": "Variant price",
                "format": "float",
                "minimum": 0
              },
              "imageUrl": {
                "type": "string",
                "format": "URL",
                "description": "Image URL for this variant"
              },
              "inventory": {
                "type": "integer",
                "description": "Inventory for this variant",
                "minimum": 0
              }
            },
            "required": [
              "variantId",
              "attributes",
              "price"
            ]
          }
        }
      },
      "required": [
        "productId",
        "title",
        "price",
        "currency",
        "imageUrl",
        "sellerId",
        "categoryId"
      ]
    },
    "category": {
      "type": "object",
      "description": "A product category",
      "properties": {
        "categoryId": {
          "type": "string",
          "description": "Unique identifier for the category",
          "format": "uuid"
        },
        "name": {
          "type": "string",
          "description": "Category name"
        },
        "parentCategoryId": {
          "type": "string",
          "description": "ID of the parent category, if any",
          "format": "uuid"
        },
        "imageUrl": {
          "type": "string",
          "description": "Image representing the category",
          "format": "URL"
        }
      },
      "required": [
        "categoryId",
        "name"
      ]
    },
    "seller": {
      "type": "object",
      "description": "A seller on AliExpress",
      "properties": {
        "sellerId": {
          "type": "string",
          "description": "Unique identifier for the seller",
          "format": "uuid"
        },
        "name": {
          "type": "string",
          "description": "Seller name or store name"
        },
        "rating": {
          "type": "number",
          "description": "Average seller rating",
          "minimum": 0,
          "maximum": 5
        },
        "numberOfReviews": {
          "type": "integer",
          "description": "Number of reviews for the seller",
          "minimum": 0
        },
        "logoUrl": {
          "type": "string",
          "description": "Seller's logo URL",
          "format": "URL"
        },
        "positiveFeedbackRate": {
          "type": "number",
          "description": "Positive feedback percentage",
          "minimum": 0,
          "maximum": 100
        }
      },
      "required": [
        "sellerId",
        "name",
        "rating",
        "numberOfReviews"
      ]
    },
    "order": {
      "type": "object",
      "description": "A user's order",
      "properties": {
        "orderId": {
          "type": "string",
          "description": "Unique identifier for the order",
          "format": "uuid"
        },
        "userId": {
          "type": "string",
          "description": "ID of the user who placed the order",
          "format": "uuid"
        },
        "orderDate": {
          "type": "string",
          "description": "Date and time when the order was placed",
          "format": "date-time"
        },
        "items": {
          "type": "array",
          "description": "List of items in the order",
          "items": {
            "type": "object",
            "properties": {
              "productId": {
                "type": "string",
                "description": "ID of the product in the order",
                "format": "uuid"
              },
              "variantId": {
                "type": "string",
                "description": "ID of the selected variant, if any",
                "format": "uuid"
              },
              "quantity": {
                "type": "integer",
                "description": "Quantity ordered",
                "minimum": 1
              },
              "price": {
                "type": "number",
                "description": "Price per item at the time of order",
                "format": "float",
                "minimum": 0
              }
            },
            "required": [
              "productId",
              "quantity",
              "price"
            ]
          }
        },
        "totalPrice": {
          "type": "number",
          "description": "Total price of the order",
          "format": "float",
          "minimum": 0
        },
        "shippingAddress": {
          "$ref": "#/definitions/address"
        },
        "shippingOption": {
          "$ref": "#/definitions/shippingOption"
        },
        "paymentStatus": {
          "type": "string",
          "description": "Status of the payment (e.g., pending, paid, failed)",
          "enum": [
            "pending",
            "paid",
            "failed",
            "refunded"
          ]
        },
        "orderStatus": {
          "type": "string",
          "description": "Status of the order (e.g., processing, shipped, delivered, canceled)",
          "enum": [
            "processing",
            "shipped",
            "delivered",
            "canceled",
            "returned"
          ]
        },
        "trackingNumber": {
          "type": "string",
          "description": "Shipping tracking number, if available"
        }
      },
      "required": [
        "orderId",
        "userId",
        "orderDate",
        "items",
        "totalPrice",
        "shippingAddress",
        "paymentStatus",
        "orderStatus"
      ]
    },
    "user": {
      "type": "object",
      "description": "An AliExpress user",
      "properties": {
        "userId": {
          "type": "string",
          "description": "Unique identifier for the user",
          "format": "uuid"
        },
        "name": {
          "type": "string",
          "description": "User's name"
        },
        "email": {
          "type": "string",
          "description": "User's email address",
          "format": "email"
        },
        "addresses": {
          "type": "array",
          "description": "User's saved addresses",
          "items": {
            "$ref": "#/definitions/address"
          }
        }
      },
      "required": [
        "userId",
        "email"
      ]
    },
    "address": {
      "type": "object",
      "description": "A shipping or billing address",
      "properties": {
        "fullName": {
          "type": "string",
          "description": "Full name of the recipient"
        },
        "streetAddress": {
          "type": "string",
          "description": "Street address"
        },
        "city": {
          "type": "string",
          "description": "City"
        },
        "stateOrProvince": {
          "type": "string",
          "description": "State or province"
        },
        "postalCode": {
          "type": "string",
          "description": "Postal code"
        },
        "country": {
          "type": "string",
          "description": "Country"
        },
        "phoneNumber": {
          "type": "string",
          "description": "Phone number"
        }
      },
      "required": [
        "fullName",
        "streetAddress",
        "city",
        "postalCode",
        "country"
      ]
    },
    "shippingOption": {
      "type": "object",
      "description": "A shipping option",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the shipping option (e.g., Standard Shipping, Expedited Shipping)"
        },
        "estimatedDeliveryTime": {
          "type": "string",
          "description": "Estimated delivery time (e.g., 15-30 days)"
        },
        "cost": {
          "type": "number",
          "description": "Shipping cost",
          "format": "float",
          "minimum": 0
        },
        "shippingCompany": {
          "type": "string",
          "description": "Name of the company handling the shipment (e.g., AliExpress, Cainiao, DHL)"
        }
      },
      "required": [
        "name",
        "estimatedDeliveryTime",
        "cost"
      ]
    },
    "promotion": {
      "type": "object",
      "description": "A promotion or deal",
      "properties": {
        "promotionId": {
          "type": "string",
          "description": "Unique identifier for the promotion",
          "format": "uuid"
        },
        "title": {
          "type": "string",
          "description": "Title of the promotion"
        },
        "description": {
          "type": "string",
          "description": "Description of the promotion"
        },
        "discountType": {
          "type": "string",
          "description": "Type of discount (e.g., percentage, fixed amount)",
          "enum": [
            "percentage",
            "fixed"
          ]
        },
        "discountValue": {
          "type": "number",
          "description": "Value of the discount (e.g., 10 for 10%, 5 for $5 off)",
          "minimum": 0
        },
        "startDate": {
          "type": "string",
          "description": "Start date of the promotion",
          "format": "date"
        },
        "endDate": {
          "type": "string",
          "description": "End date of the promotion",
          "format": "date"
        },
        "applicableProducts": {
          "type": "array",
          "description": "List of product IDs to which the promotion applies, if specific",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "applicableCategories": {
          "type": "array",
          "description": "List of category IDs to which the promotion applies, if specific",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "minimumPurchaseAmount": {
          "type": "number",
          "description": "Minimum purchase amount required for the promotion, if any",
          "format": "float",
          "minimum": 0
        },
        "bannerImageUrl": {
          "type": "string",
          "description": "URL of the promotion banner image",
          "format": "URL"
        }
      },
      "required": [
        "promotionId",
        "title",
        "discountType",
        "discountValue",
        "startDate",
        "endDate"
      ]
    },
    "filter": {
      "type": "object",
      "description": "A filter option for search results",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the filter (e.g., Price, Color, Brand)"
        },
        "type": {
          "type": "string",
          "description": "Type of filter (e.g., range, selection)",
          "enum": [
            "range",
            "selection"
          ]
        },
        "options": {
          "type": "array",
          "description": "Available options for the filter",
          "items": {
            "type": "object",
            "properties": {
              "value": {
                "type": [
                  "string",
                  "number"
                ],
                "description": "Value of the filter option"
              },
              "count": {
                "type": "integer",
                "description": "Number of products matching this option",
                "minimum": 0
              }
            },
            "required": [
              "value",
              "count"
            ]
          }
        },
        "min": {
          "type": "number",
          "description": "Minimum value for range filters"
        },
        "max": {
          "type": "number",
          "description": "Maximum value for range filters"
        }
      },
      "required": [
        "name",
        "type"
      ]
    }
  }
}{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "AliPay Transaction",
  "description": "JSON Schema for an AliPay transaction, covering common API interactions.",
  "type": "object",
  "definitions": {
    "address": {
      "type": "object",
      "properties": {
        "country_code": {
          "type": "string",
          "description": "ISO 3166-1 alpha-2 country code (e.g., CN, US)",
          "pattern": "^[A-Z]{2}$"
        },
        "state_or_province": {
          "type": "string",
          "description": "State or province"
        },
        "city": {
          "type": "string",
          "description": "City"
        },
        "district": {
          "type": "string",
          "description": "District or region within the city"
        },
        "street_address": {
          "type": "string",
          "description": "Street address line 1"
        },
        "street_address2": {
          "type": "string",
          "description": "Street address line 2 (optional)"
        },
        "postal_code": {
          "type": "string",
          "description": "Postal or ZIP code"
        }
      },
      "required": [
        "country_code",
        "city",
        "street_address"
      ]
    },
    "product": {
      "type": "object",
      "properties": {
        "product_code": {
          "type": "string",
          "description": "Merchant's product code"
        },
        "product_name": {
          "type": "string",
          "description": "Name of the product"
        },
        "quantity": {
          "type": "integer",
          "description": "Quantity of the product",
          "minimum": 1
        },
        "unit_price": {
          "type": "number",
          "description": "Price per unit",
          "minimum": 0
        },
        "product_description": {
          "type": "string",
          "description": "Optional description"
        }
      },
      "required": [
        "product_code",
        "product_name",
        "quantity",
        "unit_price"
      ]
    },
    "buyer": {
      "type": "object",
      "properties": {
        "buyer_id": {
          "type": "string",
          "description": "AliPay user ID"
        },
        "buyer_logon_id": {
          "type": "string",
          "description": "AliPay user login ID (e.g., email or phone)"
        },
        "buyer_name": {
          "type": "string",
          "description": "Name of the buyer"
        }
      },
      "required": [
        "buyer_id"
      ]
    },
    "currency": {
      "type": "string",
      "description": "ISO 4217 currency code (e.g., CNY, USD)",
      "pattern": "^[A-Z]{3}$"
    },
    "payment_method": {
      "type": "string",
      "description": "Payment method type.",
      "enum": [
        "QR_CODE",
        "BAR_CODE",
        "WEB",
        "APP",
        "IN_APP_MINI_PROGRAM"
      ]
    }
  },
  "properties": {
    "request": {
      "type": "object",
      "description": "Details of the transaction request",
      "oneOf": [
        {
          "title": "Create Payment/Order",
          "properties": {
            "method": {
              "type": "string",
              "enum": [
                "alipay.trade.create",
                "alipay.trade.app.pay",
                "alipay.trade.wap.pay",
                "alipay.trade.page.pay",
                "alipay.trade.precreate"
              ],
              "description": "AliPay API method"
            },
            "out_trade_no": {
              "type": "string",
              "description": "Merchant's unique order number",
              "maxLength": 64
            },
            "total_amount": {
              "type": "number",
              "description": "Total amount of the transaction",
              "minimum": 0.01
            },
            "currency": {
              "$ref": "#/definitions/currency"
            },
            "subject": {
              "type": "string",
              "description": "Brief description of the transaction"
            },
            "body": {
              "type": "string",
              "description": "Detailed description of the transaction"
            },
            "product_code": {
              "type": "string",
              "description": "Specific product code for different AliPay services",
              "enum": [
                "FAST_INSTANT_TRADE_PAY",
                "QUICK_MSECURITY_PAY",
                "QUICK_WAP_WAY"
              ]
            },
            "timeout_express": {
              "type": "string",
              "description": "Order timeout period (e.g., 15m, 1h, 1d)",
              "pattern": "^\\d+[mhdw]$"
            },
            "goods_detail": {
              "type": "array",
              "description": "List of goods included in the order",
              "items": {
                "$ref": "#/definitions/product"
              }
            },
            "extend_params": {
              "type": "object",
              "description": "Additional parameters",
              "properties": {
                "sys_service_provider_id": {
                  "type": "string",
                  "description": "System service provider ID (for ISVs)"
                },
                "hb_fq_num":{
                  "type": "string",
                  "description": "Number of Huabei Fenqi (installments). For example: 3, 6, 12"
                },
                "hb_fq_seller_percent": {
                  "type": "string",
                  "description": "Percentage of the installment fee borne by the seller. '0' for buyer pays all, '100' for seller pays all. Between 0 and 100."
                }

              },
              "additionalProperties": true
            },
            "passback_params": {
              "type": "string",
              "description": "Custom parameters that will be returned in the response",
              "maxLength": 512
            },
            "notify_url": {
              "type": "string",
              "description": "URL for asynchronous notifications",
              "format": "URL"
            },
            "return_url": {
              "type": "string",
              "description": "URL for synchronous redirect after payment (for web)",
              "format": "URL"
            },
            "show_url": {
              "type": "string",
              "description": "URL of product display page (for web)",
              "format": "URL"
            },
            "payment_method": {
              "$ref": "#/definitions/payment_method"
            },
            "store_id": {
              "type": "string",
              "description": "Store ID."
            },
            "merchant_order_no": {
              "type": "string",
              "description": "Merchant order number. This is the same as `out_trade_no`"
            }
          },
          "required": [
            "method",
            "out_trade_no",
            "total_amount",
            "currency",
            "subject"
          ]
        },
        {
          "title": "Query Order",
          "properties": {
            "method": {
              "type": "string",
              "enum": [
                "alipay.trade.query"
              ],
              "description": "AliPay API method"
            },
            "out_trade_no": {
              "type": "string",
              "description": "Merchant's unique order number"
            },
            "trade_no": {
              "type": "string",
              "description": "AliPay's unique transaction number"
            }
          },
          "required": [
            "method"
          ],
          "oneOf": [
            {
              "required": [
                "out_trade_no"
              ]
            },
            {
              "required": [
                "trade_no"
              ]
            }
          ]
        },
        {
          "title": "Refund",
          "properties": {
            "method": {
              "type": "string",
              "enum": [
                "alipay.trade.refund"
              ],
              "description": "AliPay API method"
            },
            "out_trade_no": {
              "type": "string",
              "description": "Merchant's unique order number"
            },
            "trade_no": {
              "type": "string",
              "description": "AliPay's unique transaction number"
            },
            "refund_amount": {
              "type": "number",
              "description": "Amount to be refunded",
              "minimum": 0.01
            },
            "out_request_no": {
              "type": "string",
              "description": "Unique refund request number (for partial refunds)"
            },
            "refund_reason": {
              "type": "string",
              "description": "Reason for the refund"
            }
          },
          "required": [
            "method",
            "refund_amount"
          ],
          "oneOf": [
            {
              "required": [
                "out_trade_no"
              ]
            },
            {
              "required": [
                "trade_no"
              ]
            }
          ]
        },
        {
          "title": "Cancel Order",
          "properties": {
            "method": {
              "type": "string",
              "enum": [
                "alipay.trade.cancel"
              ],
              "description": "AliPay API method"
            },
            "out_trade_no": {
              "type": "string",
              "description": "Merchant's unique order number"
            },
            "trade_no": {
              "type": "string",
              "description": "AliPay's unique transaction number"
            }
          },
          "required": [
            "method"
          ],
          "oneOf": [
            {
              "required": [
                "out_trade_no"
              ]
            },
            {
              "required": [
                "trade_no"
              ]
            }
          ]
        },
        {
          "title": "Close Order",
          "properties": {
            "method": {
              "type": "string",
              "enum": [
                "alipay.trade.close"
              ],
              "description": "AliPay API method"
            },
            "out_trade_no": {
              "type": "string",
              "description": "Merchant's unique order number"
            },
            "trade_no": {
              "type": "string",
              "description": "AliPay's unique transaction number"
            }
          },
          "required": [
            "method"
          ],
          "oneOf": [
            {
              "required": [
                "out_trade_no"
              ]
            },
            {
              "required": [
                "trade_no"
              ]
            }
          ]
        }
      ]
    },
    "response": {
      "type": "object",
      "description": "Details of the transaction response",
      "oneOf": [
        {
          "title": "Create Payment/Order Response",
          "properties": {
            "code": {
              "type": "string",
              "description": "Response code (e.g., 10000 for success)",
              "enum": [
                "10000",
                "20000",
                "20001",
                "40001",
                "40002",
                "40003",
                "40004",
                "40006"
              ]
            },
            "msg": {
              "type": "string",
              "description": "Response message (e.g., Success)"
            },
            "sub_code": {
              "type": "string",
              "description": "Sub-error code (e.g., ACQ.TRADE_HAS_SUCCESS)"
            },
            "sub_msg": {
              "type": "string",
              "description": "Sub-error message"
            },
            "out_trade_no": {
              "type": "string",
              "description": "Merchant's unique order number"
            },
            "trade_no": {
              "type": "string",
              "description": "AliPay's unique transaction number"
            },
            "qr_code": {
              "type": "string",
              "description": "QR code URL (for QR code payments)"
            },
            "code_url": {
              "type": "string",
              "description": "URL to redirect to for payment (for web)",
              "format": "URL"
            }
          },
          "required": [
            "code",
            "msg"
          ]
        },
        {
          "title": "Query Order Response",
          "properties": {
            "code": {
              "type": "string",
              "description": "Response code",
              "enum": [
                "10000",
                "20000",
                "20001",
                "40001",
                "40002",
                "40003",
                "40004",
                "40006"
              ]
            },
            "msg": {
              "type": "string",
              "description": "Response message"
            },
            "sub_code": {
              "type": "string",
              "description": "Sub-error code"
            },
            "sub_msg": {
              "type": "string",
              "description": "Sub-error message"
            },
            "out_trade_no": {
              "type": "string",
              "description": "Merchant's unique order number"
            },
            "trade_no": {
              "type": "string",
              "description": "AliPay's unique transaction number"
            },
            "buyer_logon_id": {
              "type": "string",
              "description": "AliPay user login ID"
            },
            "trade_status": {
              "type": "string",
              "description": "Transaction status",
              "enum": [
                "WAIT_BUYER_PAY",
                "TRADE_CLOSED",
                "TRADE_SUCCESS",
                "TRADE_FINISHED"
              ]
            },
            "total_amount": {
              "type": "number",
              "description": "Total amount of the transaction"
            },
            "send_pay_date": {
              "type": "string",
              "description": "Date and time of payment",
              "format": "date-time"
            },
            "buyer_user_id": {
              "type": "string",
              "description": "AliPay user ID"
            },
            "receipt_amount": {
              "type": "number",
              "description": "Amount received by the seller."
            },
            "point_amount": {
              "type": "number",
              "description": "Amount paid with points."
            },
            "invoice_amount": {
              "type": "number",
              "description": "Amount on the invoice."
            },
            "buyer_pay_amount": {
              "type": "number",
              "description": "Amount paid by the buyer"
            }
          },
          "required": [
            "code",
            "msg"
          ]
        },
        {
          "title": "Refund Response",
          "properties": {
            "code": {
              "type": "string",
              "description": "Response code",
              "enum": [
                "10000",
                "20000",
                "20001",
                "40001",
                "40002",
                "40003",
                "40004",
                "40006"
              ]
            },
            "msg": {
              "type": "string",
              "description": "Response message"
            },
            "sub_code": {
              "type": "string",
              "description": "Sub-error code"
            },
            "sub_msg": {
              "type": "string",
              "description": "Sub-error message"
            },
            "out_trade_no": {
              "type": "string",
              "description": "Merchant's unique order number"
            },
            "trade_no": {
              "type": "string",
              "description": "AliPay's unique transaction number"
            },
            "refund_fee": {
              "type": "number",
              "description": "Refunded amount"
            },
            "gmt_refund_pay": {
              "type": "string",
              "description": "Date and time of refund",
              "format": "date-time"
            },
            "buyer_logon_id": {
              "type": "string",
              "description": "AliPay user login ID"
            },
            "fund_change": {
              "type": "string",
              "description": "Indicates whether the refund caused a fund change (Y/N)",
              "enum": ["Y", "N"]
            }
          },
          "required": [
            "code",
            "msg"
          ]
        },
        {
          "title": "Cancel/Close Order Response",
          "properties": {
            "code": {
              "type": "string",
              "description": "Response code",
              "enum": [
                "10000",
                "20000",
                "20001",
                "40001",
                "40002",
                "40003",
                "40004",
                "40006"
              ]
            },
            "msg": {
              "type": "string",
              "description": "Response message"
            },
            "sub_code": {
              "type": "string",
              "description": "Sub-error code"
            },
            "sub_msg": {
              "type": "string",
              "description": "Sub-error message"
            },
            "out_trade_no": {
              "type": "string",
              "description": "Merchant's unique order number"
            },
            "trade_no": {
              "type": "string",
              "description": "AliPay's unique transaction number"
            },
            "action": {
              "type": "string",
              "description": "For alipay.trade.close it indicates whether to retry closing the order. For alipay.trade.cancel this field is not present.",
              "enum": ["retry", "close"]
            }
          },
          "required": [
            "code",
            "msg"
          ]
        }
      ]
    }
  },
  "required": [
    "request"
  ]
}{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Amazon Shopping",
  "description": "JSON Schema for Amazon Shopping resources and interactions.",
  "type": "object",
  "properties": {
    "user": {
      "type": "object",
      "description": "Represents a user on Amazon.",
      "properties": {
        "userId": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the user."
        },
        "name": {
          "type": "string",
          "description": "User's full name."
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "User's email address."
        },
        "password": {
          "type": "string",
          "description": "User's password (should be hashed in real systems)."
        },
        "addresses": {
          "type": "array",
          "description": "List of user's saved addresses.",
          "items": {
            "$ref": "#/definitions/address"
          }
        },
        "paymentMethods": {
          "type": "array",
          "description": "List of user's saved payment methods.",
          "items": {
            "$ref": "#/definitions/paymentMethod"
          }
        },
        "wishlists": {
          "type": "array",
          "description": "List of user's wishlists",
          "items": {
            "$ref": "#/definitions/wishlist"
          }
        },
        "shoppingCart": {
          "$ref": "#/definitions/shoppingCart",
          "description": "User's current shopping cart."
        },
        "orderHistory": {
          "type": "array",
          "description": "List of user's past orders",
          "items": {
            "$ref": "#/definitions/order"
          }
        },
        "isPrimeMember": {
          "type": "boolean",
          "description": "Indicates if the user is an Amazon Prime member."
        }
      },
      "required": [
        "userId",
        "email",
        "password"
      ]
    },
    "product": {
      "type": "object",
      "description": "Represents a product on Amazon.",
      "properties": {
        "productId": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the product."
        },
        "title": {
          "type": "string",
          "description": "Product title."
        },
        "description": {
          "type": "string",
          "description": "Product description."
        },
        "category": {
          "type": "string",
          "description": "Product category."
        },
        "subcategory": {
          "type": "string",
          "description": "Product subcategory."
        },
        "brand": {
          "type": "string",
          "description": "Product brand."
        },
        "price": {
          "type": "number",
          "format": "float",
          "minimum": 0,
          "description": "Product price."
        },
        "currency": {
          "type": "string",
          "description": "Currency of the price (e.g., USD, EUR)."
        },
        "images": {
          "type": "array",
          "description": "List of product image URLs.",
          "items": {
            "type": "string",
            "format": "URL"
          }
        },
        "stockQuantity": {
          "type": "integer",
          "minimum": 0,
          "description": "Number of units in stock."
        },
        "seller": {
          "$ref": "#/definitions/seller"
        },
        "ratings": {
          "$ref": "#/definitions/ratings",
          "description": "Product ratings information."
        },
        "reviews": {
          "type": "array",
          "description": "List of product reviews.",
          "items": {
            "$ref": "#/definitions/review"
          }
        },
        "shippingOptions": {
          "type": "array",
          "description": "List of available shipping options.",
          "items": {
            "$ref": "#/definitions/shippingOption"
          }
        },
        "features": {
          "type": "array",
          "description": "List of product features (e.g., color, size).",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            }
          }
        },
        "availability": {
          "type": "string",
          "enum": [
            "In Stock",
            "Out of Stock",
            "Pre-order",
            "Backordered"
          ],
          "description": "Product availability status."
        }
      },
      "required": [
        "productId",
        "title",
        "price",
        "currency"
      ]
    },
    "seller": {
      "type": "object",
      "description": "Represents a seller on Amazon.",
      "properties": {
        "sellerId": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the seller."
        },
        "sellerName": {
          "type": "string",
          "description": "Seller's name."
        },
        "sellerRating": {
          "type": "number",
          "format": "float",
          "minimum": 0,
          "maximum": 5,
          "description": "Average rating of the seller."
        },
        "sellerRatingCount": {
          "type": "integer",
          "description": "Total number of ratings for the seller"
        }
      },
      "required": [
        "sellerId",
        "sellerName"
      ]
    },
    "order": {
      "type": "object",
      "description": "Represents an order placed on Amazon.",
      "properties": {
        "orderId": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the order."
        },
        "userId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the user who placed the order."
        },
        "orderDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the order was placed."
        },
        "items": {
          "type": "array",
          "description": "List of items in the order.",
          "items": {
            "$ref": "#/definitions/orderItem"
          }
        },
        "shippingAddress": {
          "$ref": "#/definitions/address",
          "description": "Shipping address for the order."
        },
        "paymentMethod": {
          "$ref": "#/definitions/paymentMethod",
          "description": "Payment method used for the order."
        },
        "totalAmount": {
          "type": "number",
          "format": "float",
          "minimum": 0,
          "description": "Total amount of the order."
        },
        "orderStatus": {
          "type": "string",
          "enum": [
            "Processing",
            "Shipped",
            "Delivered",
            "Cancelled",
            "Returned"
          ],
          "description": "Current status of the order."
        },
        "shippingDetails": {
          "$ref": "#/definitions/shippingDetails"
        }
      },
      "required": [
        "orderId",
        "userId",
        "orderDate",
        "items",
        "shippingAddress",
        "paymentMethod",
        "totalAmount",
        "orderStatus"
      ]
    },
    "search": {
      "type": "object",
      "description": "Represents a search query and results on Amazon.",
      "properties": {
        "query": {
          "type": "string",
          "description": "The search query string."
        },
        "category": {
          "type": "string",
          "description": "Category to filter search results (optional)."
        },
        "filters": {
          "type": "object",
          "description": "Additional filters for search results (e.g., price range, brand).",
          "properties": {
            "minPrice": {
              "type": "number"
            },
            "maxPrice": {
              "type": "number"
            },
            "brand": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "rating": {
              "type": "integer",
              "minimum": 1,
              "maximum": 5
            }
          },
          "additionalProperties": true
        },
        "sort": {
          "type": "string",
          "enum": [
            "relevance",
            "price_asc",
            "price_desc",
            "newest",
            "rating"
          ],
          "description": "Sorting order for search results."
        },
        "page": {
          "type": "integer",
          "minimum": 1,
          "description": "Page number of results."
        },
        "results": {
          "type": "array",
          "description": "List of search results (products).",
          "items": {
            "$ref": "#/definitions/product"
          }
        },
        "totalResults": {
          "type": "integer",
          "description": "Total number of search results found."
        }
      },
      "required": [
        "query",
        "results",
        "totalResults"
      ]
    },
    "recommendation": {
      "type": "object",
      "description": "Represents a set of product recommendations.",
      "properties": {
        "recommendationId": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the recommendation set."
        },
        "userId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the user for whom the recommendations are generated (optional)."
        },
        "basedOn": {
          "type": "string",
          "enum": [
            "browsing_history",
            "purchase_history",
            "similar_items",
            "trending"
          ],
          "description": "Basis for generating the recommendations."
        },
        "products": {
          "type": "array",
          "description": "List of recommended products.",
          "items": {
            "$ref": "#/definitions/product"
          }
        }
      },
      "required": [
        "recommendationId",
        "products"
      ]
    },
    "promotion": {
      "type": "object",
      "description": "Represents promotional offers or deals.",
      "properties": {
        "promotionId": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the promotion."
        },
        "title": {
          "type": "string",
          "description": "Title of the promotion."
        },
        "description": {
          "type": "string",
          "description": "Description of the promotion."
        },
        "discountType": {
          "type": "string",
          "enum": [
            "percentage",
            "fixed_amount",
            "buy_x_get_y"
          ],
          "description": "Type of discount offered."
        },
        "discountValue": {
          "type": "number",
          "description": "Value of the discount (percentage or amount)."
        },
        "applicableProducts": {
          "type": "array",
          "description": "List of product IDs to which the promotion applies (optional).",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "startDate": {
          "type": "string",
          "format": "date",
          "description": "Start date of the promotion."
        },
        "endDate": {
          "type": "string",
          "format": "date",
          "description": "End date of the promotion."
        }
      },
      "required": [
        "promotionId",
        "title",
        "discountType",
        "startDate",
        "endDate"
      ]
    }
  },
  "definitions": {
    "address": {
      "type": "object",
      "properties": {
        "addressId": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the address."
        },
        "street": {
          "type": "string",
          "description": "Street address."
        },
        "city": {
          "type": "string",
          "description": "City."
        },
        "state": {
          "type": "string",
          "description": "State or province."
        },
        "zipCode": {
          "type": "string",
          "description": "Postal or ZIP code."
        },
        "country": {
          "type": "string",
          "description": "Country."
        },
        "phoneNumber": {
          "type": "string",
          "description": "Phone number associated with the address."
        },
        "isDefault": {
          "type": "boolean",
          "description": "Indicates if this is the default address."
        }
      },
      "required": [
        "street",
        "city",
        "state",
        "zipCode",
        "country"
      ]
    },
    "paymentMethod": {
      "type": "object",
      "properties": {
        "paymentMethodId": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the payment method."
        },
        "cardType": {
          "type": "string",
          "enum": [
            "credit",
            "debit",
            "gift card"
          ],
          "description": "Type of payment method."
        },
        "cardNumber": {
          "type": "string",
          "description": "Card number (last 4 digits for display)."
        },
        "expiryMonth": {
          "type": "integer",
          "minimum": 1,
          "maximum": 12,
          "description": "Expiration month."
        },
        "expiryYear": {
          "type": "integer",
          "description": "Expiration year."
        },
        "billingAddress": {
          "$ref": "#/definitions/address"
        },
        "isDefault": {
          "type": "boolean",
          "description": "Indicates if this is the default payment method."
        }
      },
      "required": [
        "paymentMethodId",
        "cardType"
      ]
    },
    "orderItem": {
      "type": "object",
      "properties": {
        "productId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the product."
        },
        "quantity": {
          "type": "integer",
          "minimum": 1,
          "description": "Quantity of the product ordered."
        },
        "price": {
          "type": "number",
          "format": "float",
          "minimum": 0,
          "description": "Price per unit at the time of order."
        },
        "seller": {
          "$ref": "#/definitions/seller"
        }
      },
      "required": [
        "productId",
        "quantity",
        "price"
      ]
    },
    "ratings": {
      "type": "object",
      "properties": {
        "averageRating": {
          "type": "number",
          "format": "float",
          "minimum": 0,
          "maximum": 5,
          "description": "Average rating of the product."
        },
        "ratingCount": {
          "type": "integer",
          "description": "Total number of ratings for the product."
        },
        "ratingDistribution": {
          "type": "object",
          "description": "Distribution of ratings (e.g., number of 5-star, 4-star ratings).",
          "properties": {
            "1": {
              "type": "integer"
            },
            "2": {
              "type": "integer"
            },
            "3": {
              "type": "integer"
            },
            "4": {
              "type": "integer"
            },
            "5": {
              "type": "integer"
            }
          },
          "additionalProperties": false
        }
      },
      "required": [
        "averageRating",
        "ratingCount"
      ]
    },
    "review": {
      "type": "object",
      "properties": {
        "reviewId": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the review."
        },
        "userId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the user who wrote the review."
        },
        "rating": {
          "type": "integer",
          "minimum": 1,
          "maximum": 5,
          "description": "Rating given in the review."
        },
        "title": {
          "type": "string",
          "description": "Title of the review."
        },
        "reviewText": {
          "type": "string",
          "description": "Content of the review."
        },
        "reviewDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the review was submitted."
        },
        "helpfulVotes": {
          "type": "integer",
          "description": "Number of users who found the review helpful."
        },
        "totalVotes": {
          "type": "integer",
          "description": "Total number of votes on the review."
        },
        "verifiedPurchase": {
          "type": "boolean",
          "description": "Indicates if the reviewer purchased the product on Amazon"
        }
      },
      "required": [
        "reviewId",
        "userId",
        "rating",
        "reviewText",
        "reviewDate"
      ]
    },
    "shippingOption": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the shipping option (e.g., Standard, Expedited)."
        },
        "deliveryTime": {
          "type": "string",
          "description": "Estimated delivery time."
        },
        "cost": {
          "type": "number",
          "format": "float",
          "minimum": 0,
          "description": "Cost of the shipping option."
        }
      },
      "required": [
        "name",
        "deliveryTime",
        "cost"
      ]
    },
    "shippingDetails": {
      "type": "object",
      "properties": {
        "carrier": {
          "type": "string",
          "description": "Name of the shipping carrier."
        },
        "trackingNumber": {
          "type": "string",
          "description": "Tracking number for the shipment."
        },
        "estimatedDeliveryDate": {
          "type": "string",
          "format": "date",
          "description": "Estimated delivery date."
        },
        "shippingStatus": {
          "type": "string",
          "enum": [
            "Preparing for Shipment",
            "Shipped",
            "Out for Delivery",
            "Delivered",
            "Delayed"
          ],
          "description": "Current status of the shipment."
        }
      },
      "required": [
        "carrier",
        "trackingNumber"
      ]
    },
    "shoppingCart": {
      "type": "object",
      "properties": {
        "cartId": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the cart."
        },
        "userId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the user who owns the cart."
        },
        "items": {
          "type": "array",
          "description": "List of items in the cart.",
          "items": {
            "$ref": "#/definitions/cartItem"
          }
        },
        "subtotal": {
          "type": "number",
          "format": "float",
          "minimum": 0,
          "description": "Subtotal of the items in the cart (before tax and shipping)."
        }
      },
      "required": [
        "cartId",
        "items",
        "subtotal"
      ]
    },
    "cartItem": {
      "type": "object",
      "properties": {
        "productId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the product in the cart."
        },
        "quantity": {
          "type": "integer",
          "minimum": 1,
          "description": "Quantity of the product in the cart."
        },
        "seller": {
          "$ref": "#/definitions/seller"
        }
      },
      "required": [
        "productId",
        "quantity"
      ]
    },
    "wishlist": {
      "type": "object",
      "properties": {
        "wishlistId": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the wishlist"
        },
        "name": {
          "type": "string",
          "description": "Name of the wishlist"
        },
        "isPublic": {
          "type": "boolean",
          "description": "Indicates whether the wishlist is public or private"
        },
        "items": {
          "type": "array",
          "description": "List of products in the wishlist",
          "items": {
            "$ref": "#/definitions/product"
          }
        }
      },
      "required": [
        "wishlistId",
        "name",
        "items"
      ]
    }
  }
}{
  "type": "object",
  "title": "Angie's List Schema",
  "description": "JSON Schema representing the core data structures of Angie's List",
  "definitions": {
    "address": {
      "type": "object",
      "properties": {
        "street": {
          "type": "string",
          "description": "Street address"
        },
        "city": {
          "type": "string",
          "description": "City"
        },
        "state": {
          "type": "string",
          "description": "State (e.g., CA, NY)",
          "pattern": "^[A-Z]{2}$"
        },
        "zip": {
          "type": "string",
          "description": "Zip code",
          "pattern": "^\\d{5}(-\\d{4})?$"
        },
        "country": {
          "type": "string",
          "description": "Country (e.g., USA)",
          "default": "USA"
        }
      },
      "required": [
        "street",
        "city",
        "state",
        "zip"
      ]
    },
    "phoneNumber": {
      "type": "string",
      "description": "Phone number",
      "pattern": "^(\\([0-9]{3}\\) |[0-9]{3}-)[0-9]{3}-[0-9]{4}$"
    },
    "rating": {
      "type": "number",
      "description": "Rating on a scale (e.g., 1-5)",
      "minimum": 1,
      "maximum": 5
    },
    "serviceCategory": {
      "type": "string",
      "description": "Category of service (e.g., Plumbing, Roofing)",
      "enum": [
        "Plumbing",
        "Roofing",
        "HVAC",
        "Electrician",
        "Landscaping",
        "Remodeling",
        "Painting",
        "Appliance Repair",
        "Pest Control",
        "Cleaning",
        "Handyman",
        "Other"
      ]
    },
    "review": {
      "type": "object",
      "properties": {
        "reviewerId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the user who wrote the review"
        },
        "reviewDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the review was posted"
        },
        "rating": {
          "$ref": "#/definitions/rating"
        },{
  "title": "Apple Messages Schema",
  "description": "A JSON Schema representing the data model of Apple Messages.",
  "type": "object",
  "properties": {
    "conversations": {
      "type": "array",
      "description": "List of conversations",
      "items": {
        "$ref": "#/definitions/conversation"
      }
    },
    "contacts": {
      "type": "array",
      "description": "List of contacts (optional, as Messages may not store a full contact list)",
      "items": {
        "$ref": "#/definitions/contact"
      }
    }
  },
  "definitions": {
    "conversation": {
      "type": "object",
      "description": "A conversation thread",
      "properties": {
        "guid": {
          "type": "string",
          "description": "Unique identifier for the conversation (e.g., a UUID)",
          "format": "uuid"
        },
        "participants": {
          "type": "array",
          "description": "List of participants in the conversation",
          "items": {
            "$ref": "#/definitions/participant"
          },
          "minItems": 1
        },
        "messages": {
          "type": "array",
          "description": "List of messages in the conversation",
          "items": {
            "$ref": "#/definitions/message"
          }
        },
        "isGroupChat": {
          "type": "boolean",
          "description": "Indicates if the conversation is a group chat"
        },
        "service":{
          "type": "string",
          "description": "Service used in this conversation. iMessage, SMS or MMS",
          "enum": ["iMessage", "SMS", "MMS"]
        },
        "lastMessagePreview": {
          "type": "string",
          "description": "Preview of the last message text (optional)",
          "maxLength": 255
        },
        "lastMessageTimestamp": {
          "type": "string",
          "description": "Timestamp of the last message (optional)",
          "format": "date-time"
        },
        "unreadMessageCount": {
          "type": "integer",
          "description": "Number of unread messages in the conversation (optional)",
          "minimum": 0
        }
      },
      "required": [
        "guid",
        "participants",
        "messages",
        "isGroupChat"
      ]
    },
    "participant": {
      "type": "object",
      "description": "A participant in a conversation",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the participant (e.g., phone number, email address)",
          "example": "+15551234567"
        },
        "handle": {
          "type": "string",
          "description": "Display name or handle for the participant (optional)",
          "example": "John Doe"
        },
        "contactId": {
          "type": "string",
          "description": "Reference to a contact (if available, optional)",
          "format": "uuid"
        }
      },
      "required": [
        "id"
      ]
    },
    "message": {
      "type": "object",
      "description": "A message within a conversation",
      "properties": {
        "guid": {
          "type": "string",
          "description": "Unique identifier for the message (e.g., a UUID)",
          "format": "uuid"
        },
        "sender": {
          "$ref": "#/definitions/participant",
          "description": "The sender of the message"
        },
        "date": {
          "type": "string",
          "description": "Timestamp of the message",
          "format": "date-time"
        },
        "text": {
          "type": "string",
          "description": "The text content of the message"
        },
        "attachments": {
          "type": "array",
          "description": "List of attachments (optional)",
          "items": {
            "$ref": "#/definitions/attachment"
          }
        },
        "isRead": {
          "type": "boolean",
          "description": "Indicates if the message has been read"
        },
        "isFromMe": {
          "type": "boolean",
          "description": "Indicates if the message was sent by the current user"
        },
        "subject": {
          "type": "string",
          "description": "The subject line of the message (optional, used in group chats or email-style messages)"
        },
        "messageParts": {
          "type": "array",
          "description": "An array describing parts of the message, e.g., for tapbacks or reactions.",
          "items":{
            "$ref": "#/definitions/messagePart"
          }
        },
        "threadOriginatorGuid": {
          "type": "string",
          "description": "The GUID of the original message when creating a thread in a conversation. Null in any other case.",
          "format": "uuid"
        }
      },
      "required": [
        "guid",
        "sender",
        "date",
        "isFromMe"
      ]
    },
    "attachment": {
      "type": "object",
      "description": "An attachment to a message",
      "properties": {
        "guid": {
          "type": "string",
          "description": "Unique identifier for the attachment (e.g., a UUID)",
          "format": "uuid"
        },
        "filename": {
          "type": "string",
          "description": "Name of the file"
        },
        "contentType": {
          "type": "string",
          "description": "MIME type of the attachment",
          "example": "image/jpeg"
        },
        "fileSize": {
          "type": "integer",
          "description": "Size of the attachment in bytes"
        },
        "transferState": {
          "type": "string",
          "enum": ["not started", "started", "paused", "finished", "error"],
          "description": "The transfer state of the attachment."
        },
        "uti": {
          "type": "string",
          "description": "Uniform Type Identifier representing the type of file of this attachment."
        },
        "transferName": {
          "type": "string",
          "description": "The name of the file to be transferred or being transferred."
        },
        "isSticker": {
          "type": "boolean",
          "description": "Boolean value indicating whether the attachment is a sticker."
        },
        "isOutgoing": {
          "type": "boolean",
          "description": "Boolean value indicating whether the attachment is outgoing."
        },
        "hideAttachment": {
          "type": "boolean",
          "description": "Boolean value indicating whether to hide the attachment. For example, when the attachment is an audio message."
        },
        "originalGuid": {
          "type": "string",
          "description": "The original guid for this attachment. For example, when the attachment is a tapback or a reaction."
        },
        "localUrl":{
          "type": "string",
          "description": "Local path where the attachment is saved",
          "format": "uri"
        },
        "cloudUrl":{
          "type": "string",
          "description": "iCloud url where the attachment is saved (if available)",
          "format": "uri"
        }
      },
      "required": [
        "guid",
        "filename",
        "contentType"
      ]
    },
    "contact": {
      "type": "object",
      "description": "A contact",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the contact (e.g., a UUID)",
          "format": "uuid"
        },
        "firstName": {
          "type": "string",
          "description": "First name of the contact"
        },
        "lastName": {
          "type": "string",
          "description": "Last name of the contact"
        },
        "nickname": {
          "type": "string",
          "description": "Nickname of the contact"
        },
        "phoneNumbers": {
          "type": "array",
          "description": "List of phone numbers associated with the contact",
          "items": {
            "type": "string",
            "example": "+15551234567"
          }
        },
        "emailAddresses": {
          "type": "array",
          "description": "List of email addresses associated with the contact",
          "items": {
            "type": "string",
            "format": "email"
          }
        }
      },
      "required": [
        "id"
      ]
    },
    "messagePart":{
      "type": "object",
      "description": "A message part or summary item in a message. Used for tapbacks or reactions.",
      "properties": {
        "partIndex": {
          "type": "integer",
          "description": "The index of this part in the message parts array."
        },
        "summaryType":{
          "type": "integer",
          "description": "Integer value that identifies the type of reaction or tapback. See Message Summary Types."
        },
        "sender": {
          "$ref": "#/definitions/participant",
          "description": "The sender of the tapback or reaction"
        }
      },
      "required": [
        "partIndex"
      ]
    }
  }
}{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Apple Music",
  "description": "JSON Schema for Apple Music data structures.",
  "definitions": {
    "resourceAttributes": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The localized name of the resource."
        },
        "artwork": {
          "$ref": "#/definitions/artwork",
          "description": "The artwork for the resource."
        },
        "artistName": {
          "type": "string",
          "description": "The name of the artist associated with the resource (if applicable)."
        },
        "url": {
          "type": "string",
          "format": "URL",
          "description": "The URL for sharing the resource on Apple Music."
        }
      },
      "required": [
        "name"
      ]
    },
    "artwork": {
      "type": "object",
      "description": "Artwork for a resource, such as an album or song.",
      "properties": {
        "width": {
          "type": "integer",
          "description": "The width of the artwork image."
        },
        "height": {
          "type": "integer",
          "description": "The height of the artwork image."
        },
        "url": {
          "type": "string",
          "format": "URL",
          "description": "The URL template for the artwork image, where {w} and {h} are replaced with width and height values, and {f} with a format like 'jpg'."
        },
        "bgColor": {
          "type": "string",
          "pattern": "^#?([0-9a-fA-F]{3}){1,2}$",
          "description": "The average background color of the artwork, as a hexadecimal color."
        },
        "textColor1": {
          "type": "string",
          "pattern": "^#?([0-9a-fA-F]{3}){1,2}$",
          "description": "The primary text color that may be used if the background color is displayed, as a hexadecimal color."
        },
        "textColor2": {
          "type": "string",
          "pattern": "^#?([0-9a-fA-F]{3}){1,2}$",
          "description": "The secondary text color, as a hexadecimal color."
        },
        "textColor3": {
          "type": "string",
          "pattern": "^#?([0-9a-fA-F]{3}){1,2}$",
          "description": "The third text color, as a hexadecimal color."
        },
        "textColor4": {
          "type": "string",
          "pattern": "^#?([0-9a-fA-F]{3}){1,2}$",
          "description": "The fourth text color, as a hexadecimal color."
        }
      },
      "required": [
        "url"
      ]
    },
    "editorialNotes": {
      "type": "object",
      "description": "Editorial notes for a resource, such as an album or playlist.",
      "properties": {
        "standard": {
          "type": "string",
          "description": "The notes describing the resource."
        },
        "short": {
          "type": "string",
          "description": "A shortened version of the notes describing the resource."
        },
        "name": {
          "type": "string",
          "description": "The title for the editorial notes."
        },
        "tagline": {
          "type": "string",
          "description": "A tagline for the editorial notes."
        }
      },
      "additionalProperties": false
    },
    "playParameters": {
      "type": "object",
      "description": "Information for identifying an object for playback.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier for the object."
        },
        "kind": {
          "type": "string",
          "description": "The kind of the object to use for playback. Possible values are song, musicVideo, playlist, album, library-song, library-music-video, library-playlist, library-album."
        },
        "isLibrary": {
          "type": "boolean",
          "description": "Indicates whether the object is in the user's library. Default is false."
        },
        "globalId": {
          "type": "string",
          "description": "The global id of the object. This is only used for objects that are not from the Apple Music Catalog (eg. User uploaded songs)."
        },
        "reporting": {
          "type": "boolean",
          "description": "Whether or not playback of this item should be reported to Apple Music as a play."
        },
        "catalogId": {
          "type": "string",
          "description": "The Apple Music catalog id of the item. This is only used for objects that are from the Apple Music Catalog (eg. Songs on Apple Music)."
        }
      },
      "required": [
        "id",
        "kind"
      ]
    },
    "preview": {
      "type": "object",
      "description": "A preview of a song or music video.",
      "properties": {
        "url": {
          "type": "string",
          "format": "URL",
          "description": "The URL for the preview."
        },
        "artwork": {
          "$ref": "#/definitions/artwork"
        },
        "hlsUrl": {
          "type": "string",
          "format": "URL",
          "description": "The URL for the preview in HLS format. Only present in Music Videos"
        }
      },
      "required": [
        "url"
      ]
    },
    "relationship": {
      "type": "object",
      "description": "A relationship to a resource.",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object"
          },
          "description": "The data for the relationship."
        },
        "href": {
          "type": "string",
          "format": "URL",
          "description": "The URL for the relationship."
        },
        "meta": {
          "type": "object,{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Apple Podcasts",
  "description": "JSON Schema for Apple Podcasts data, encompassing podcasts, episodes, categories, and related entities.",
  "type": "object",
  "properties": {
    "podcasts": {
      "type": "array",
      "description": "A list of podcasts.",
      "items": {
        "$ref": "#/definitions/podcast"
      }
    },
    "episodes": {
      "type": "array",
      "description": "A list of podcast episodes.",
      "items": {
        "$ref": "#/definitions/episode"
      }
    },
    "categories": {
      "type": "array",
      "description": "A list of podcast categories.",
      "items": {
        "$ref": "#/definitions/category"
      }
    },
    "authors": {
      "type": "array",
      "description": "A list of podcast authors/creators.",
      "items": {
        "$ref": "#/definitions/author"
      }
    },
    "topCharts": {
      "type": "object",
      "description": "Data related to top podcast charts.",
      "properties": {
        "podcasts": {
          "type": "array",
          "description": "List of top podcasts.",
          "items": {
            "$ref": "#/definitions/podcastChartEntry"
          }
        },
        "episodes": {
          "type": "array",
          "description": "List of top episodes.",
          "items": {
            "$ref": "#/definitions/episodeChartEntry"
          }
        }
      },
      "additionalProperties": false
    }
  },
  "additionalProperties": false,
  "definitions": {
    "podcast": {
      "type": "object",
      "description": "Represents a podcast.",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique identifier for the podcast (e.g., feed ID or Apple Podcasts ID)."
        },
        "collectionId": {
          "type": "integer",
          "description": "Apple Podcasts collection ID."
        },
        "trackId": {
          "type": "integer",
          "description": "Apple Podcasts track ID."
        },
        "artistId": {
          "type": "integer",
          "description": "Apple Podcasts artist ID."
        },
        "artistName": {
          "type": "string",
          "description": "Name of the podcast artist/creator."
        },
        "collectionName": {
          "type": "string",
          "description": "Name of the podcast."
        },
        "trackName": {
          "type": "string",
          "description": "Alias for collectionName"
        },
        "feedUrl": {
          "type": "string",
          "format": "URL",
          "description": "URL of the podcast's RSS feed."
        },
        "artworkUrl30": {
          "type": "string",
          "format": "URL",
          "description": "URL of the podcast artwork (30x30 pixels)."
        },
        "artworkUrl60": {
          "type": "string",
          "format": "URL",
          "description": "URL of the podcast artwork (60x60 pixels)."
        },
        "artworkUrl100": {
          "type": "string",
          "format": "URL",
          "description": "URL of the podcast artwork (100x100 pixels)."
        },
        "artworkUrl600": {
          "type": "string",
          "format": "URL",
          "description": "URL of the podcast artwork (600x600 pixels)."
        },
        "primaryGenreName": {
          "type": "string",
          "description": "Primary genre of the podcast."
        },
        "genres": {
          "type": "array",
          "description": "List of genres associated with the podcast.",
          "items": {
            "type": "string"
          }
        },
        "genreIds": {
          "type": "array",
          "description": "List of genre IDs",
          "items": {
            "type": "string"
          }
        },
        "releaseDate": {
          "type": "string",
          "format": "date-time",
          "description": "Release date of the podcast."
        },
        "trackCount": {
          "type": "integer",
          "description": "Number of episodes in the podcast."
        },
        "country": {
          "type": "string",
          "description": "Country of origin (ISO 3166-1 alpha-3 code)."
        },
        "description": {
          "type": "string",
          "description": "Description of the podcast."
        },
        "shortDescription": {
          "type": "string",
          "description": "Short description of the podcast."
        },
        "copyright": {
          "type": "string",
          "description": "Copyright information."
        },
        "contentAdvisoryRating": {
          "type": "string",
          "description": "Content advisory rating (e.g., 'Clean', 'Explicit')."
        },
        "kind": {
          "type": "string",
          "description": "Kind of content",
          "enum": ["podcast"]
        },
        "wrapperType": {
          "type": "string",
          "description": "Type of wrapper",
          "enum": ["track", "artist"]
        },
        "episodes": {
          "type": "array",
          "description": "List of episodes associated with this podcast.",
          "items": {
            "$ref": "#/definitions/episode"
          }
        }
      },
      "required": [
        "id",
        "collectionName",
        "feedUrl"
      ],
      "additionalProperties": false
    },
    "episode": {
      "type": "object",
      "description": "Represents a podcast episode.",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique identifier for the episode (e.g., GUID)."
        },
        "podcastId": {
          "type": "integer",
          "description": "ID of the podcast this episode belongs to."
        },
        "trackId": {
          "type": "integer",
          "description": "Apple Podcasts track ID."
        },
        "artistId": {
          "type": "integer",
          "description": "Apple Podcasts artist ID."
        },
        "collectionId": {
          "type": "integer",
          "description": "Apple Podcasts collection ID."
        },
        "trackName": {
          "type": "string",
          "description": "Title of the episode."
        },
        "collectionName": {
          "type": "string",
          "description": "Name of the podcast the episode belongs to."
        },
        "artistName": {
          "type": "string",
          "description": "Name of the podcast artist/creator."
        },
        "description": {
          "type": "string",
          "description": "Description of the episode."
        },
        "shortDescription": {
          "type": "string",
          "description": "Short description of the episode."
        },
        "releaseDate": {
          "type": "string",
          "format": "date-time",
          "description": "Release date of the episode."
        },
        "closedCaptioning": {
          "type": "string",
          "description": "Closed captioning status",
          "enum": ["none", "CC"]
        },
        "trackTimeMillis": {
          "type": "integer",
          "description": "Duration of the episode in milliseconds."
        },
        "episodeFileExtension": {
          "type": "string",
          "description": "File extension of episode media."
        },
        "episodeUrl": {
          "type": "string",
          "format": "URL",
          "description": "URL of the episode's media file."
        },
        "episodeGuid": {
          "type": "string",
          "description": "GUID of the episode"
        },
        "artworkUrl30": {
          "type": "string",
          "format": "URL",
          "description": "URL of the episode artwork (30x30 pixels)."
        },
        "artworkUrl60": {
          "type": "string",
          "format": "URL",
          "description": "URL of the episode artwork (60x60 pixels)."
        },
        "artworkUrl160": {
          "type": "string",
          "format": "URL",
          "description": "URL of the episode artwork (160x160 pixels)."
        },
        "artworkUrl600": {
          "type": "string",
          "format": "URL",
          "description": "URL of the episode artwork (600x600 pixels)."
        },
        "previewUrl": {
          "type": "string",
          "format": "URL",
          "description": "URL of the episode preview file."
        },
        "contentAdvisoryRating": {
          "type": "string",
          "description": "Content advisory rating (e.g., 'Clean', 'Explicit')."
        },
        "genres": {
          "type": "array",
          "description": "List of genres",
          "items": {
            "type": "string"
          }
        },
        "genreIds": {
          "type": "array",
          "description": "List of genre IDs",
          "items": {
            "type": "string"
          }
        },
        "kind": {
          "type": "string",
          "description": "Kind of content",
          "enum": ["podcast-episode"]
        },
        "wrapperType": {
          "type": "string",
          "description": "Type of wrapper",
          "enum": ["track", "podcastEpisode"]
        }
      },
      "required": [
        "id",
        "podcastId",
        "trackName",
        "episodeUrl"
      ],
      "additionalProperties": false
    },
    "category": {
      "type": "object",
      "description": "Represents a podcast category.",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique identifier for the category."
        },
        "name": {
          "type": "string",
          "description": "Name of the category."
        },
        "subcategories": {
          "type": "array",
          "description": "List of subcategories.",
          "items": {
            "$ref": "#/definitions/category"
          }
        }
      },
      "required": [
        "id",
        "name"
      ],
      "additionalProperties": false
    },
    "author": {
      "type": "object",
      "description": "Represents a podcast author or creator.",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique identifier for the author (e.g., Apple Podcasts artist ID)."
        },
        "name": {
          "type": "string",
          "description": "Name of the author."
        },
        "podcasts": {
          "type": "array",
          "description": "List of podcasts by this author.",
          "items": {
            "$ref": "#/definitions/podcast"
          }
        }
      },
      "required": [
        "id",
        "name"
      ],
      "additionalProperties": false
    },
    "podcastChartEntry": {
      "type": "object",
      "description": "Represents a podcast entry in a chart.",
      "properties": {
        "podcast": {
          "$ref": "#/definitions/podcast"
        },
        "rank": {
          "type": "integer",
          "description": "Ranking of the podcast in the chart."
        }
      },
      "required": [
        "podcast",
        "rank"
      ],
      "additionalProperties": false
    },
    "episodeChartEntry": {
      "type": "object",
      "description": "Represents a podcast episode entry in a chart.",
      "properties": {
        "episode": {
          "$ref": "#/definitions/episode"
        },
        "rank": {
          "type": "integer",
          "description": "Ranking of the episode in the chart."
        }
      },
      "required": [
        "episode",
        "rank"
      ],
      "additionalProperties": false
    }
  }
}{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "BigCommerce App Schema",
  "description": "Schema for defining a BigCommerce App",
  "type": "object",
  "required": [
    "auth_callback",
    "load_callback",
    "uninstall_callback",
    "scopes",
    "app_name",
    "app_description",
    "app_version",
    "author_name",
    "author_email",
    "author_url"
  ],
  "properties": {
    "auth_callback": {
      "type": "string",
      "format": "url",
      "description": "URL to receive OAuth2 authentication requests. This is where BigCommerce will redirect the user during the app installation process."
    },
    "load_callback": {
      "type": "string",
      "format": "url",
      "description": "URL to receive requests when the app is loaded in the BigCommerce control panel or in other designated places within BigCommerce."
    },
    "uninstall_callback": {
      "type": "string",
      "format": "url",
      "description": "URL to receive a notification when the app is uninstalled from a store. This is where you can perform cleanup tasks like revoking API tokens or removing data."
    },
    "remove_user_callback": {
      "type": "string",
      "format": "url",
      "description": "URL called when a user is removed from a store. Useful for revoking their access to your app."
    },
    "scopes": {
      "type": "string",
      "description": "Space-separated list of OAuth scopes the app requires. Scopes define the permissions your app needs to access specific data or perform actions on behalf of the user. Example: 'store_v2_products store_v2_orders'",
      "examples": [
        "store_v2_products store_v2_orders store_v2_customers",
        "store_v2_content"
      ]
    },
    "app_name": {
      "type": "string",
      "description": "Name of the app. This will be displayed to users during the installation process and in the BigCommerce control panel.",
      "maxLength": 255
    },
    "app_description": {
      "type": "string",
      "description": "A detailed description of the app's functionality. This will be displayed to users during the installation process."
    },
    "app_version": {
      "type": "string",
      "description": "Version of the app. Follow semantic versioning (e.g., 1.0.0).",
      "pattern": "^\\d+\\.\\d+\\.\\d+$",
      "examples": [
        "1.0.0",
        "2.5.1"
      ]
    },
    "author_name": {
      "type": "string",
      "description": "Name of the app developer or company.",
      "maxLength": 255
    },
    "author_email": {
      "type": "string",
      "format": "email",
      "description": "Contact email address of the app developer or company."
    },
    "author_url": {
      "type": "string",
      "format": "url",
      "description": "Website URL of the app developer or company."
    },
    "logo": {
      "type": "string",
      "format": "url",
      "description": "URL to the app's logo. Recommended size is 250x250 pixels."
    },
    "support_email": {
      "type": "string",
      "format": "email",
      "description": "Email address for customer support inquiries."
    },
    "support_url": {
      "type": "string",
      "format": "url",
      "description": "URL to a support page or documentation for the app."
    },
    "privacy_policy_url": {
      "type": "string",
      "format": "url",
      "description": "URL to the app's privacy policy."
    },
    "app_type": {
      "type": "string",
      "description": "Indicates the type of app being developed. Can be used to categorize apps (e.g., 'marketing', 'inventory', 'shipping')",
      "examples": [
        "marketing",
        "inventory",
        "shipping"
      ]
    },
    "features": {
      "type": "array",
      "description": "An array of features provided by the app.",
      "items": {
        "type": "string",
        "description": "A description of a specific feature."
      }
    },
    "external_ids": {
      "type": "object",
      "description": "External identifiers if the app interacts with other platforms.",
      "additionalProperties": {
        "type": "string"
      }
    },
    "is_visible": {
      "type": "boolean",
      "description": "Determines if the app is visible in the App Marketplace. Defaults to true for draft apps.",
      "default": true
    },
    "dev_tools": {
      "type": "object",
      "description": "Settings specifically for use during development.",
      "properties": {
        "debug_callback": {
          "type": "string",
          "format": "url",
          "description": "Optional URL for receiving debug information during development."
        }
      }
    },
    "translations": {
      "type": "object",
      "description": "Object containing translations of the app's metadata for different locales.",
      "additionalProperties": {
        "type": "object",
        "description": "Translation for a specific locale.",
        "properties": {
          "app_name": {
            "type": "string",
            "description": "Translated app name."
          },
          "app_description": {
            "type": "string",
            "description": "Translated app description."
          }
        },
        "additionalProperties": false
      },
      "examples": [
        {
          "es": {
            "app_name": "Mi Aplicación",
            "app_description": "Descripción de mi aplicación en español."
          },
          "fr": {
            "app_name": "Mon Application",
            "app_description": "Description de mon application en français."
          }
        }
      ]
    }
  },
  "additionalProperties": false
}{
  "type": "object",
  "title": "Binance API Schema",
  "description": "A comprehensive JSON Schema representing the Binance API, covering common endpoints and data structures. Note: This schema is a simplified representation and might not include every single endpoint or field. For complete and up-to-date information, refer to the official Binance API documentation.",
  "properties": {
    "exchangeInfo": {
      "type": "object",
      "description": "Endpoint: /api/v3/exchangeInfo",
      "properties": {
        "timezone": { "type": "string", "example": "UTC" },
        "serverTime": { "type": "integer", "format": "int64", "description": "Timestamp in milliseconds" },
        "rateLimits": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "rateLimitType": { "type": "string", "enum": ["REQUEST_WEIGHT", "ORDERS", "RAW_REQUESTS"] },
              "interval": { "type": "string", "enum": ["SECOND", "MINUTE", "DAY"] },
              "intervalNum": { "type": "integer" },
              "limit": { "type": "integer" }
            },
            "required": ["rateLimitType", "interval", "intervalNum", "limit"]
          }
        },
        "exchangeFilters": { "type": "array", "items": { "type": "object" } },
        "symbols": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "symbol": { "type": "string", "example": "BTCUSDT" },
              "status": { "type": "string", "enum": ["PRE_TRADING", "TRADING", "POST_TRADING", "END_OF_DAY", "HALT", "AUCTION_MATCH", "BREAK"] },
              "baseAsset": { "type": "string", "example": "BTC" },
              "baseAssetPrecision": { "type": "integer" },
              "quoteAsset": { "type": "string", "example": "USDT" },
              "quotePrecision": { "type": "integer" },
              "quoteAssetPrecision": { "type": "integer" },
              "baseCommissionPrecision": { "type": "integer" },
              "quoteCommissionPrecision": { "type": "integer" },
              "orderTypes": {
                "type": "array",
                "items": { "type": "string", "enum": ["LIMIT", "MARKET", "STOP_LOSS", "STOP_LOSS_LIMIT", "TAKE_PROFIT", "TAKE_PROFIT_LIMIT", "LIMIT_MAKER"] }
              },
              "icebergAllowed": { "type": "boolean" },
              "ocoAllowed": { "type": "boolean" },
              "quoteOrderQtyMarketAllowed": { "type": "boolean" },
              "allowTrailingStop": { "type": "boolean" },
              "cancelReplaceAllowed": { "type": "boolean" },
              "isSpotTradingAllowed": { "type": "boolean" },
              "isMarginTradingAllowed": { "type": "boolean" },
              "filters": { "type": "array", "items": { "type": "object" } },
              "permissions": { "type": "array", "items": { "type": "string", "enum": ["SPOT", "MARGIN", "LEVERAGED", "TRD_GRP_002", "TRD_GRP_003", "TRD_GRP_004", "TRD_GRP_005"] } }
            },
            "required": [
              "symbol",
              "status",
              "baseAsset",
              "baseAssetPrecision",
              "quoteAsset",
              "quotePrecision",
              "quoteAssetPrecision",
              "baseCommissionPrecision",
              "quoteCommissionPrecision",
              "orderTypes",
              "icebergAllowed",
              "ocoAllowed",
              "quoteOrderQtyMarketAllowed",
              "allowTrailingStop",
              "cancelReplaceAllowed",
              "isSpotTradingAllowed",
              "isMarginTradingAllowed",
              "filters",
              "permissions"
            ]
          }
        }
      },
      "required": [
        "timezone",
        "serverTime",
        "rateLimits",
        "exchangeFilters",
        "symbols"
      ]
    },
    "orderBook": {
      "type": "object",
      "description": "Endpoint: /api/v3/depth",
      "properties": {
        "lastUpdateId": { "type": "integer", "format": "int64" },
        "bids": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              { "type": "string", "format": "decimal", "description": "Price" },
              { "type": "string", "format": "decimal", "description": "Quantity" }
            ],
            "minItems": 2,
            "maxItems": 2
          }
        },
        "asks": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              { "type": "string", "format": "decimal", "description": "Price" },
              { "type": "string", "format": "decimal", "description": "Quantity" }
            ],
            "minItems": 2,
            "maxItems": 2
          }
        }
      },
      "required": [
        "lastUpdateId",
        "bids",
        "asks"
      ]
    },
    "recentTrades": {
      "type": "array",
      "description": "Endpoint: /api/v3/trades",
      "items": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64" },
          "price": { "type": "string", "format": "decimal" },
          "qty": { "type": "string", "format": "decimal" },
          "quoteQty": { "type": "string", "format": "decimal" },
          "time": { "type": "integer", "format": "int64", "description": "Timestamp in milliseconds" },
          "isBuyerMaker": { "type": "boolean" },
          "isBestMatch": { "type": "boolean" }
        },
        "required": [
          "id",
          "price",
          "qty",
          "quoteQty",
          "time",
          "isBuyerMaker",
          "isBestMatch"
        ]
      }
    },
    "historicalTrades": {
      "type": "array",
      "description": "Endpoint: /api/v3/historicalTrades",
      "items": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64" },
          "price": { "type": "string", "format": "decimal" },
          "qty": { "type": "string", "format": "decimal" },
          "quoteQty": { "type": "string", "format": "decimal" },
          "time": { "type": "integer", "format": "int64", "description": "Timestamp in milliseconds" },
          "isBuyerMaker": { "type": "boolean" },
          "isBestMatch": { "type": "boolean" }
        },
        "required": [
          "id",
          "price",
          "qty",
          "quoteQty",
          "time",
          "isBuyerMaker",
          "isBestMatch"
        ]
      }
    },
    "accountInformation": {
      "type": "object",
      "description": "Endpoint: /api/v3/account",
      "properties": {
        "makerCommission": { "type": "integer" },
        "takerCommission": { "type": "integer" },
        "buyerCommission": { "type": "integer" },
        "sellerCommission": { "type": "integer" },
        "canTrade": { "type": "boolean" },
        "canWithdraw": { "type": "boolean" },
        "canDeposit": { "type": "boolean" },
        "brokered": { "type": "boolean" },
        "updateTime": { "type": "integer", "format": "int64" },
        "accountType": { "type": "string", "enum": ["SPOT", "MARGIN", "FUTURES", "LEVERAGED", "TRD_GRP_002", "TRD_GRP_003", "TRD_GRP_004", "TRD_GRP_005"] },
        "balances": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "asset": { "type": "string", "example": "BTC" },
              "free": { "type": "string", "format": "decimal" },
              "locked": { "type": "string", "format": "decimal" }
            },
            "required": [
              "asset",
              "free",
              "locked"
            ]
          }
        },
        "permissions": { "type": "array", "items": { "type": "string" } }
      },
      "required": [
        "makerCommission",
        "takerCommission",
        "buyerCommission",
        "sellerCommission",
        "canTrade",
        "canWithdraw",
        "canDeposit",
        "brokered",
        "updateTime",
        "accountType",
        "balances",
        "permissions"
      ]
    },
    "newOrder": {
      "type": "object",
      "description": "Endpoint: /api/v3/order",
      "properties": {
        "symbol": { "type": "string" },
        "orderId": { "type": "integer", "format": "int64" },
        "orderListId": { "type": "integer", "format": "int64" },
        "clientOrderId": { "type": "string" },
        "transactTime": { "type": "integer", "format": "int64" },
        "price": { "type": "string", "format": "decimal" },
        "origQty": { "type": "string", "format": "decimal" },
        "executedQty": { "type": "string", "format": "decimal" },
        "cummulativeQuoteQty": { "type": "string", "format": "decimal" },
        "status": { "type": "string", "enum": ["NEW", "PARTIALLY_FILLED", "FILLED", "CANCELED", "PENDING_CANCEL", "REJECTED", "EXPIRED"] },
        "timeInForce": { "type": "string", "enum": ["GTC", "IOC", "FOK"] },
        "type": { "type": "string", "enum": ["LIMIT", "MARKET", "STOP_LOSS", "STOP_LOSS_LIMIT", "TAKE_PROFIT", "TAKE_PROFIT_LIMIT", "LIMIT_MAKER"] },
        "side": { "type": "string", "enum": ["BUY", "SELL"] },
        "fills": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "price": { "type": "string", "format": "decimal" },
              "qty": { "type": "string", "format": "decimal" },
              "commission": { "type": "string", "format": "decimal" },
              "commissionAsset": { "type": "string" }
            },
            "required": [
              "price",
              "qty",
              "commission",
              "commissionAsset"
            ]
          }
        }
      },
      "required": [
        "symbol",
        "orderId",
        "orderListId",
        "clientOrderId",
        "transactTime"
      ]
    },
    "cancelOrder": {
      "type": "object",
      "description": "Endpoint: /api/v3/order",
      "properties": {
        "symbol": { "type": "string" },
        "origClientOrderId": { "type": "string" },
        "orderId": { "type": "integer", "format": "int64" },
        "orderListId": { "type": "integer", "format": "int64" },
        "clientOrderId": { "type": "string" },
        "price": { "type": "string", "format": "decimal" },
        "origQty": { "type": "string", "format": "decimal" },
        "executedQty": { "type": "string", "format": "decimal" },
        "cummulativeQuoteQty": { "type": "string", "format": "decimal" },
        "status": { "type": "string", "enum": ["NEW", "PARTIALLY_FILLED", "FILLED", "CANCELED", "PENDING_CANCEL", "REJECTED", "EXPIRED"] },
        "timeInForce": { "type": "string", "enum": ["GTC", "IOC", "FOK"] },
        "type": { "type": "string", "enum": ["LIMIT", "MARKET", "STOP_LOSS", "STOP_LOSS_LIMIT", "TAKE_PROFIT", "TAKE_PROFIT_LIMIT", "LIMIT_MAKER"] },
        "side": { "type": "string", "enum": ["BUY", "SELL"] }
      },
      "required": [
        "symbol",
        "origClientOrderId",
        "orderId",
        "orderListId",
        "clientOrderId",
        "price",
        "origQty",
        "executedQty",
        "cummulativeQuoteQty",
        "status",
        "timeInForce",
        "type",
        "side"
      ]
    },
    "openOrders": {
      "type": "array",
      "description": "Endpoint: /api/v3/openOrders",
      "items": {
        "type": "object",
        "properties": {
          "symbol": { "type": "string" },
          "orderId": { "type": "integer", "format": "int64" },
          "orderListId": { "type": "integer", "format": "int64" },
          "clientOrderId": { "type": "string" },
          "price": { "type": "string", "format": "decimal" },
          "origQty": { "type": "string", "format": "decimal" },
          "executedQty": { "type": "string", "format": "decimal" },
          "cummulativeQuoteQty": { "type": "string", "format": "decimal" },
          "status": { "type": "string", "enum": ["NEW", "PARTIALLY_FILLED", "FILLED", "CANCELED", "PENDING_CANCEL", "REJECTED", "EXPIRED"] },
          "timeInForce": { "type": "string", "enum": ["GTC", "IOC", "FOK"] },
          "type": { "type": "string", "enum": ["LIMIT", "MARKET", "STOP_LOSS", "STOP_LOSS_LIMIT", "TAKE_PROFIT", "TAKE_PROFIT_LIMIT", "LIMIT_MAKER"] },
          "side": { "type": "string", "enum": ["BUY", "SELL"] },
          "stopPrice": { "type": "string", "format": "decimal" },
          "icebergQty": { "type": "string", "format": "decimal" },
          "time": { "type": "integer", "format": "int64" },
          "updateTime": { "type": "integer", "format": "int64" },
          "isWorking": { "type": "boolean" },
          "origQuoteOrderQty": { "type": "string", "format": "decimal" }
        },
        "required": [
          "symbol",
          "orderId",
          "orderListId",
          "clientOrderId",
          "price",
          "origQty",
          "executedQty",
          "cummulativeQuoteQty",
          "status",
          "timeInForce",
          "type",
          "side",
          "stopPrice",
          "icebergQty",
          "time",
          "updateTime",
          "isWorking",
          "origQuoteOrderQty"
        ]
      }
    },
    "allOrders": {
      "type": "array",
      "description": "Endpoint: /api/v3/allOrders",
      "items": {
        "type": "object",
        "properties": {
          "symbol": { "type": "string" },
          "orderId": { "type": "integer", "format": "int64" },
          "orderListId": { "type": "integer", "format": "int64" },
          "clientOrderId": { "type": "string" },
          "price": { "type": "string", "format": "decimal" },
          "origQty": { "type": "string", "format": "decimal" },
          "executedQty": { "type": "string", "format": "decimal" },
          "cummulativeQuoteQty": { "type": "string", "format": "decimal" },
          "status": { "type": "string", "enum": ["NEW", "PARTIALLY_FILLED", "FILLED", "CANCELED", "PENDING_CANCEL", "REJECTED", "EXPIRED"] },
          "timeInForce": { "type": "string", "enum": ["GTC", "IOC", "FOK"] },
          "type": { "type": "string", "enum": ["LIMIT", "MARKET", "STOP_LOSS", "STOP_LOSS_LIMIT", "TAKE_PROFIT", "TAKE_PROFIT_LIMIT", "LIMIT_MAKER"] },
          "side": { "type": "string", "enum": ["BUY", "SELL"] },
          "stopPrice": { "type": "string", "format": "decimal" },
          "icebergQty": { "type": "string", "format": "decimal" },
          "time": { "type": "integer", "format": "int64" },
          "updateTime": { "type": "integer", "format": "int64" },
          "isWorking": { "type": "boolean" },
          "origQuoteOrderQty": { "type": "string", "format": "decimal" }
        },
        "required": [
          "symbol",
          "orderId",
          "orderListId",
          "clientOrderId",
          "price",
          "origQty",
          "executedQty",
          "cummulativeQuoteQty",
          "status",
          "timeInForce",
          "type",
          "side",
          "stopPrice",
          "icebergQty",
          "time",
          "updateTime",
          "isWorking",
          "origQuoteOrderQty"
        ]
      }
    },
    "error": {
      "type": "object",
      "description": "Error response from the Binance API",
      "properties": {
        "code": { "type": "integer", "description": "Error code" },
        "msg": { "type": "string", "description": "Error message" }
      },
      "required": [
        "code",
        "msg"
      ]
    }
  }
}{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "BitChute",
  "description": "JSON Schema for BitChute data structures",
  "definitions": {
    "video": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the video (often a hash or URL part)",
          "pattern": "^[a-zA-Z0-9_-]+$"
        },
        "title": {
          "type": "string",
          "description": "Title of the video",
          "minLength": 1,
          "maxLength": 255
        },
        "description": {
          "type": "string",
          "description": "Description of the video"
        },
        "channel": {
          "type": "string",
          "description": "Name or ID of the channel that uploaded the video",
          "pattern": "^[a-zA-Z0-9_-]+$"
        },
        "channel_id": {
          "type": "string",
          "description": "Unique identifier for the channel that uploaded the video",
          "pattern": "^[a-zA-Z0-9_-]+$"
        },
        "duration": {
          "type": "integer",
          "description": "Duration of the video in seconds",
          "minimum": 0
        },
        "upload_date": {
          "type": "string",
          "description": "Date and time the video was uploaded",
          "format": "date-time"
        },
        "view_count": {
          "type": "integer",
          "description": "Number of times the video has been viewed",
          "minimum": 0
        },
        "like_count": {
          "type": "integer",
          "description": "Number of likes the video has received (can be inaccurate)",
          "minimum": 0
        },
        "dislike_count": {
          "type": "integer",
          "description": "Number of dislikes the video has received (can be inaccurate)",
          "minimum": 0
        },
        "thumbnail_url": {
          "type": "string",
          "description": "URL of the video's thumbnail image",
          "format": "URL"
        },
        "video_url": {
          "type": "string",
          "description": "URL of the video file (might be a torrent or direct link)",
          "format": "URL"
        },
        "tags": {
          "type": "array",
          "description": "Keywords or tags associated with the video",
          "items": {
            "type": "string"
          }
        },
        "magnet_link": {
          "type": "string",
          "description": "Magnet URI for the video torrent, if available",
          "format": "URL"
        },
        "category": {
          "type": "string",
          "description": "Category the video belongs to (e.g., News, Gaming)"
        },
        "comments": {
          "type": "array",
          "description": "List of comments on the video",
          "items": {
            "$ref": "#/definitions/comment"
          }
        }
      },
      "required": [
        "id",
        "title",
        "channel",
        "upload_date",
        "video_url"
      ]
    },
    "channel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the channel (often a URL part or name)",
          "pattern": "^[a-zA-Z0-9_-]+$"
        },
        "name": {
          "type": "string",
          "description": "Name of the channel",
          "minLength": 1,
          "maxLength": 255
        },
        "description": {
          "type": "string",
          "description": "Description of the channel"
        },
        "banner_url": {
          "type": "string",
          "description": "URL of the channel's banner image",
          "format": "URL"
        },
        "avatar_url": {
          "type": "string",
          "description": "URL of the channel's avatar/profile image",
          "format": "URL"
        },
        "subscriber_count": {
          "type": "integer",
          "description": "Approximate number of subscribers (often not publicly available)",
          "minimum": 0
        },
        "videos": {
          "type": "array",
          "description": "List of videos uploaded by the channel",
          "items": {
            "$ref": "#/definitions/video"
          }
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "comment": {
      "type": "object",
      "properties": {
        "author": {
          "type": "string",
          "description": "Name or identifier of the comment author"
        },
        "text": {
          "type": "string",
          "description": "The content of the comment"
        },
        "timestamp": {
          "type": "string",
          "description": "Date and time the comment was posted",
          "format": "date-time"
        },
        "like_count": {
          "type": "integer",
          "description": "Number of likes on the comment (if available)",
          "minimum": 0
        },
        "replies": {
          "type": "array",
          "description": "List of replies to this comment",
          "items": {
            "$ref": "#/definitions/comment"
          }
        }
      },
      "required": [
        "author",
        "text",
        "timestamp"
      ]
    },
    "search_result": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of search result (e.g., 'video', 'channel')",
          "enum": [
            "video",
            "channel"
          ]
        },
        "data": {
          "type": "object",
          "description": "The actual search result data",
          "oneOf": [
            {
              "$ref": "#/definitions/video"
            },
            {
              "$ref": "#/definitions/channel"
            }
          ]
        }
      },
      "required": [
        "type",
        "data"
      ]
    }
  },
  "type": "object",
  "properties": {
    "videos": {
      "type": "array",
      "description": "List of videos",
      "items": {
        "$ref": "#/definitions/video"
      }
    },
    "channels": {
      "type": "array",
      "description": "List of channels",
      "items": {
        "$ref": "#/definitions/channel"
      }
    },
    "search_results": {
      "type": "array",
      "description": "List of search results",
      "items": {
        "$ref": "#/definitions/search_result"
      }
    },
    "trending": {
      "type": "array",
      "description": "List of currently trending videos",
      "items": {
        "$ref": "#/definitions/video"
      }
    },
    "categories": {
      "type": "array",
      "description": "List of available video categories",
      "items": {
        "type": "string"
      }
    }
  }
}{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Bitfinex API Schema",
  "description": "A JSON Schema describing the data structures used in the Bitfinex API (v2). This schema covers common request and response objects. It does not include every single endpoint and parameter but aims to provide a good overview and structure for many frequent uses.",
  "type": "object",
  "definitions": {
    "orderStatus": {
      "type": "string",
      "enum": [
        "ACTIVE",
        "EXECUTED",
        "PARTIALLY FILLED",
        "CANCELED"
      ]
    },
    "orderType": {
      "type": "string",
      "enum": [
        "MARKET",
        "EXCHANGE MARKET",
        "LIMIT",
        "EXCHANGE LIMIT",
        "STOP",
        "EXCHANGE STOP",
        "TRAILING STOP",
        "EXCHANGE TRAILING STOP",
        "FOK",
        "EXCHANGE FOK",
        "STOP LIMIT",
        "EXCHANGE STOP LIMIT"
      ]
    },
    "tickerSymbol": {
      "type": "string",
      "pattern": "^t[A-Z0-9]+:[A-Z0-9]+$|^t[A-Z0-9]+$|^f[A-Z0-9]+$"
    },
    "fundingSymbol": {
      "type": "string",
      "pattern": "^f[A-Z0-9]+$"
    },
    "tradingPairSymbol": {
      "type": "string",
      "pattern": "^t[A-Z0-9]+:[A-Z0-9]+$|^t[A-Z0-9]+$"
    },
    "walletType": {
      "type": "string",
      "enum": [
        "exchange",
        "margin",
        "funding"
      ]
    },
    "numberArray": {
      "type": "array",
      "items": {
        "type": "number"
      }
    },
    "stringOrNumber": {
      "oneOf": [
        { "type": "string" },
        { "type": "number" }
      ]
    },
    "ticker": {
      "type": "array",
      "items": [
        { "$ref": "#/definitions/tickerSymbol" },
        { "$ref": "#/definitions/numberArray" }
      ],
      "description": "Ticker data. [SYMBOL, BID, BID_SIZE, ASK, ASK_SIZE, DAILY_CHANGE, DAILY_CHANGE_RELATIVE, LAST_PRICE, VOLUME, HIGH, LOW]",
      "minItems": 11,
      "maxItems": 11
    },
    "bookEntry": {
      "type": "array",
      "items": {
        "type": "number"
      },
      "minItems": 3,
      "maxItems": 4,
      "description": "Order book entry. [PRICE, COUNT, AMOUNT] or [PERIOD, RATE, AMOUNT] for funding books"
    },
    "orderBook": {
      "type": "object",
      "properties": {
        "bids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/bookEntry"
          }
        },
        "asks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/bookEntry"
          }
        }
      },
      "required": ["bids", "asks"]
    },
    "trade": {
      "type": "array",
      "items": [
        { "type": "integer", "description": "Trade ID" },
        { "type": "integer", "description": "MTS (millisecond timestamp)" },
        { "type": "number", "description": "Amount" },
        { "type": "number", "description": "Price" },
        { "type": "number", "optional": true, "description": "Rate (for funding trades)"},
        { "type": "integer", "optional": true, "description": "Period (for funding trades)"}
      ],
      "minItems": 4,
      "maxItems": 6,
      "description": "Public trade data. [ID, MTS, AMOUNT, PRICE] or [ID, MTS, AMOUNT, PRICE, RATE, PERIOD] for funding trades"
    },
    "candle": {
      "type": "array",
      "items": {
        "type": "number"
      },
      "minItems": 6,
      "maxItems": 6,
      "description": "Candle data. [MTS, OPEN, CLOSE, HIGH, LOW, VOLUME]"
    },
    "wallet": {
      "type": "array",
      "items": [
        { "$ref": "#/definitions/walletType" },
        { "type": "string", "description": "Currency" },
        { "type": "number", "description": "Balance" },
        { "type": "number", "description": "Unsettled Interest" },
        { "type": "number", "description": "Balance Available", "optional": true },
        { "type": "string", "description": "Last change description", "optional": true},
        { "type": "object", "optional": true, "description": "Meta information"}

      ],
      "minItems": 4,
      "maxItems": 7,
      "description": "Wallet information. [WALLET_TYPE, CURRENCY, BALANCE, UNSETTLED_INTEREST, BALANCE_AVAILABLE, LAST_CHANGE, META]"
    },
    "order": {
      "type": "array",
      "items": [
        { "type": "integer", "description": "Order ID" },
        { "type": "integer", "description": "Group ID (optional)" },
        { "type": "integer", "description": "Client Order ID (optional)" },
        { "$ref": "#/definitions/tickerSymbol" },
        { "type": "integer", "description": "MTS Create" },
        { "type": "integer", "description": "MTS Update" },
        { "type": "number", "description": "Amount" },
        { "type": "number", "description": "Amount Original" },
        { "$ref": "#/definitions/orderType" },
        { "type": "string", "description": "Previous Order Type" },
        { "type": "integer", "optional": true, "description": "MTS TIF"},
        { "type": "integer", "optional": true, "description": "Flags" },
        { "$ref": "#/definitions/orderStatus" },
        { "type": "null" },
        { "type": "null" },
        { "type": "number", "description": "Price" },
        { "type": "number", "description": "Price Average" },
        { "type": "number", "description": "Price Trailing" },
        { "type": "number", "description": "Price Auxiliary Limit" },
        { "type": "null" },
        { "type": "null" },
        { "type": "null" },
        { "type": "integer", "description": "Hidden (0 or 1)" },
        { "type": "integer", "description": "Place ID if Place ID was assigned" },
        { "type": "integer", "optional": true, "description": "GRCL required (0 or 1)"},
        { "type": "number", "optional": true, "description": "Leverage"},
        { "type": "string", "optional": true, "description": "Order meta information"},
        { "type": "integer", "optional": true, "description": "Reduce Only (0 or 1)"},
        { "type": "integer", "optional": true, "description": "Post Only (0 or 1)"},
        { "type": "integer", "optional": true, "description": "OCO (0 or 1)"},
        { "type": "integer", "optional": true, "description": "OCO Cancel Amount"},
        { "type": "integer", "optional": true, "description": "Time In Force: 0 = GTC, 1 = IOC, 2 = FOK, 3 = PO, 4 = EXPIRED"},
        { "type": "string", "optional": true, "description": "VT"},
        { "type": "string", "optional": true, "description": "VT_Reason"}
      ],
      "minItems": 26,
      "maxItems": 35,
      "description": "Order details. Refer to the documentation for detailed field descriptions."
    },
    "position": {
      "type": "array",
      "items": [
        { "$ref": "#/definitions/tradingPairSymbol" },
        { "type": "string", "description": "Status" },
        { "type": "number", "description": "Amount" },
        { "type": "number", "description": "Base Price" },
        { "type": "number", "description": "Margin Funding" },
        { "type": "number", "description": "Margin Funding Type" },
        { "type": "number", "description": "PL" },
        { "type": "number", "description": "PL (%)" },
        { "type": "number", "description": "Price Liquidation" },
        { "type": "number", "description": "Leverage" },
        { "type": "null" },
        { "type": "integer", "description": "Position ID" },
        { "type": "integer", "description": "MTS Create" },
        { "type": "integer", "description": "MTS Update" },
        { "type": "null" },
        { "type": "number", "description": "Collateral" },
        { "type": "number", "description": "Collateral Minimum" },
        { "type": "object", "description": "Meta", "optional": true }
      ],
      "minItems": 18,
      "maxItems": 19,
      "description": "Position details. Refer to the documentation for detailed field descriptions."
    },
    "fundingOffer": {
      "type": "array",
      "items": [
        { "type": "integer", "description": "Offer ID" },
        { "type": "integer", "description": "MTS Create" },
        { "type": "integer", "description": "MTS Update" },
        { "$ref": "#/definitions/fundingSymbol" },
        { "type": "number", "description": "Amount" },
        { "type": "number", "description": "Amount Original" },
        { "type": "string", "description": "Offer Type" },
        { "type": "null" },
        { "type": "null" },
        { "type": "integer", "description": "Flags" },
        { "type": "string", "description": "Status" },
        { "type": "null" },
        { "type": "null" },
        { "type": "null" },
        { "type": "number", "description": "Rate" },
        { "type": "integer", "description": "Period" },
        { "type": "integer", "description": "Notify (0 or 1)" },
        { "type": "integer", "description": "Hidden (0 or 1)" },
        { "type": "null" },
        { "type": "number", "description": "Renew (0 or 1)" },
        { "type": "number", "description": "Rate Real" }
      ],
      "minItems": 21,
      "maxItems": 21,
      "description": "Funding Offer details. Refer to the documentation for detailed field descriptions."
    },
    "fundingCredit": {
      "type": "array",
      "items": [
        { "type": "integer", "description": "Credit ID" },
        { "$ref": "#/definitions/fundingSymbol" },
        { "type": "string", "description": "Side" },
        { "type": "integer", "description": "MTS Create" },
        { "type": "integer", "description": "MTS Update" },
        { "type": "number", "description": "Amount" },
        { "type": "integer", "description": "Flags" },
        { "type": "string", "description": "Status" },
        { "type": "null" },
        { "type": "null" },
        { "type": "null" },
        { "type": "number", "description": "Rate" },
        { "type": "integer", "description": "Period" },
        { "type": "integer", "description": "MTS Opened" },
        { "type": "integer", "description": "MTS Last Payout" },
        { "type": "integer", "description": "Notify (0 or 1)" },
        { "type": "integer", "description": "Hidden (0 or 1)" },
        { "type": "null" },
        { "type": "number", "description": "Rate Real" },
        { "type": "number", "description": "No Close (0 or 1)" },
        { "type": "object", "description": "Position Pair", "optional": true }
      ],
      "minItems": 20,
      "maxItems": 21,
      "description": "Funding Credit details. Refer to the documentation for detailed field descriptions."
    },
    "fundingLoan": {
      "type": "array",
      "items": [
        { "type": "integer", "description": "Loan ID" },
        { "$ref": "#/definitions/fundingSymbol" },
        { "type": "string", "description": "Side" },
        { "type": "integer", "description": "MTS Create" },
        { "type": "integer", "description": "MTS Update" },
        { "type": "number", "description": "Amount" },
        { "type": "integer", "description": "Flags" },
        { "type": "string", "description": "Status" },
        { "type": "null" },
        { "type": "null" },
        { "type": "null" },
        { "type": "number", "description": "Rate" },
        { "type": "integer", "description": "Period" },
        { "type": "integer", "description": "MTS Opened" },
        { "type": "integer", "description": "MTS Last Payout" },
        { "type": "integer", "description": "Notify (0 or 1)" },
        { "type": "integer", "description": "Hidden (0 or 1)" },
        { "type": "null" },
        { "type": "null" },
        { "type": "number", "description": "Rate Real" },
        { "type": "number", "description": "No Close (0 or 1)" }
      ],
      "minItems": 20,
      "maxItems": 20,
      "description": "Funding Loan details. Refer to the documentation for detailed field descriptions."
    },
    "fundingTrade": {
      "type": "array",
      "items": [
        { "type": "integer", "description": "Trade ID" },
        { "$ref": "#/definitions/fundingSymbol" },
        { "type": "integer", "description": "MTS Create" },
        { "type": "integer", "description": "Offer ID" },
        { "type": "number", "description": "Amount" },
        { "type": "number", "description": "Rate" },
        { "type": "integer", "description": "Period" },
        { "type": "integer", "description": "Maker (0 or 1)" }
      ],
      "minItems": 8,
      "maxItems": 8,
      "description": "Funding Trade details. Refer to the documentation for detailed field descriptions."
    },
    "notification": {
      "type": "array",
      "items": [
        { "type": "integer", "description": "MTS" },
        { "type": "string", "description": "Type" },
        { "type": "integer", "description": "Message ID" },
        { "type": "null" },
        {
          "oneOf": [
            { "$ref": "#/definitions/order" },
            { "$ref": "#/definitions/position" },
            { "$ref": "#/definitions/fundingOffer" },
            { "$ref": "#/definitions/fundingCredit" },
            { "$ref": "#/definitions/fundingLoan" },
            { "$ref": "#/definitions/wallet" },
            { "type": "array", "items": {"type": "string"}, "minItems": 1, "maxItems": 1 }
          ],
          "description": "Data associated with the notification"
        },
        { "type": "integer", "description": "Code" },
        { "type": "integer", "description": "Status (0 or 1)" },
        { "type": "string", "description": "Text" }
      ],
      "minItems": 8,
      "maxItems": 8,
      "description": "Notification details. Refer to the documentation for detailed field descriptions."
    },
    "authResponse": {
      "type": "array",
      "items": [
        { "type": "string", "description": "Status (OK or ERROR)" },
        { "type": "integer", "description": "MTS" },
        { "type": "string", "description": "Type (AUTH)" },
        { "type": "null" },
        { "type": "integer", "description": "Code" },
        { "type": "string", "description": "Message" },
        { "type": "object", "description": "Auth_Payload" }
      ],
      "minItems": 7,
      "maxItems": 7,
      "description": "Authentication response from the server."
    },
    "websocketEvent": {
      "type": "object",
      "properties": {
        "event": {
          "type": "string"
        },
        "channel": {
          "type": "string",
          "optional": true
        },
        "chanId": {
          "type": "integer",
          "optional": true
        },
        "symbol": {
          "$ref": "#/definitions/tickerSymbol",
          "optional": true
        },
        "prec": {
          "type": "string",
          "optional": true
        },
        "freq": {
          "type": "string",
          "optional": true
        },
        "key": {
          "type": "string",
          "optional": true
        },
        "len": {
          "type": "string",
          "optional": true
        },
        "pair": {
          "type": "string",
          "optional": true
        },
        "code": {
          "type": "integer",
          "optional": true
        },
        "msg": {
          "type": "string",
          "optional": true
        },
        "status": {
          "type": "string",
          "optional": true
        },
        "userId": {
          "type": "integer",
          "optional": true
        },
        "subId": {
          "type": "string",
          "optional": true
        },
        "version": {
          "type": "integer",
          "optional": true
        },
        "platform": {
          "type": "object",
          "properties": {
            "status": { "type": "integer" }
          },
          "required": ["status"],
          "optional": true
        },
        "apiKey": {
          "type": "string",
          "optional": true
        },
        "eventTime": {
          "type": "integer",
          "optional": true
        },
        "soc": {
          "type": "integer",
          "optional": true
        },
        "wallet_type": {
          "$ref": "#/definitions/walletType",
          "optional": true
        },
        "order_id": {
          "type": "integer",
          "optional": true
        },
        "order_type": {
          "$ref": "#/definitions/orderType",
          "optional": true
        },
        "order_cid": {
          "type": "integer",
          "optional": true
        }
      },
      "required": [
        "event"
      ]
    }
  },
  "properties": {
    "websocket": {
      "type": "array",
      "description": "WebSocket message format. The first element is always the channel ID.",
      "items": [
        {
          "type": "integer",
          "description": "Channel ID"
        },
        {
          "oneOf": [
            { "$ref": "#/definitions/ticker" },
            { "$ref": "#/definitions/orderBook" },
            { "$ref": "#/definitions/trade" },
            { "$ref": "#/definitions/candle" },
            { "$ref": "#/definitions/wallet" },
            { "$ref": "#/definitions/order" },
            { "$ref": "#/definitions/position" },
            { "$ref": "#/definitions/fundingOffer" },
            { "$ref": "#/definitions/fundingCredit" },
            { "$ref": "#/definitions/fundingLoan" },
            { "$ref": "#/definitions/fundingTrade" },
            { "$ref": "#/definitions/notification" },
            { "$ref": "#/definitions/authResponse" },
            { "type": "string", "description": "Snapshot/Heartbeat/Update message type indicator (hb, ws, os, ps, etc.)" },
            { "type": "array", "items": { "oneOf": [
              { "$ref": "#/definitions/orderBook" },
              { "$ref": "#/definitions/trade" },
              { "$ref": "#/definitions/candle" },
              { "$ref": "#/definitions/wallet" },
              { "$ref": "#/definitions/order" },
              { "$ref": "#/definitions/position" },
              { "$ref": "#/definitions/fundingOffer" },
              { "$ref": "#/definitions/fundingCredit" },
              { "$ref": "#/definitions/fundingLoan" },
              { "$ref": "#/definitions/fundingTrade" }
            ]}}
          ]
        }
      ],
      "minItems": 2
    },
    "websocketEvent": {
      "$ref": "#/definitions/websocketEvent"
    }
  }
}{
  "type": "object",
  "title": "CashApp",
  "description": "JSON Schema for a simplified CashApp implementation",
  "properties": {
    "users": {
      "type": "array",
      "description": "List of CashApp users",
      "items": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the user"
          },
          "cashtag": {
            "type": "string",
            "description": "User's unique CashApp identifier",
            "pattern": "^\\$[a-zA-Z0-9._]{1,20}$",
            "example": "$johnDoe123"
          },
          "name": {
            "type": "string",
            "description": "User's full name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "phoneNumber": {
            "type": "string",
            "description": "User's phone number",
            "pattern": "^\\+?[1-9]\\d{1,14}$"
          },
          "balance": {
            "type": "number",
            "format": "float",
            "description": "Current balance of the user",
            "minimum": 0
          },
          "linkedAccounts": {
            "type": "array",
            "description": "List of linked bank accounts or debit cards",
            "items": {
              "type": "object",
              "properties": {
                "accountType": {
                  "type": "string",
                  "enum": ["bank", "debitCard"],
                  "description": "Type of linked account"
                },
                "accountNumber": {
                  "type": "string",
                  "description": "Bank account or card number (masked for security)",
                  "example": "**** **** **** 1234"
                },
                "institutionName": {
                  "type": "string",
                  "description": "Name of the bank or card issuer"
                }
              },
              "required": [
                "accountType",
                "accountNumber"
              ]
            }
          },
          "transactionHistory": {
            "type": "array",
            "description": "History of user's transactions",
            "items": {
              "type": "object",
              "properties": {
                "transactionId": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the transaction"
                },
                "type": {
                  "type": "string",
                  "enum": ["payment", "request", "deposit", "withdrawal"],
                  "description": "Type of transaction"
                },
                "amount": {
                  "type": "number",
                  "format": "float",
                  "description": "Amount of the transaction"
                },
                "counterparty": {
                  "type": "string",
                  "description": "Cashtag of the other party involved (if applicable)"
                },
                "timestamp": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date and time of the transaction"
                },
                "status": {
                  "type": "string",
                  "enum": ["pending", "completed", "failed", "canceled"],
                  "description": "Status of the transaction"
                },
                "note": {
                  "type": "string",
                  "description": "Optional note associated with the transaction"
                }
              },
              "required": [
                "transactionId",
                "type",
                "amount",
                "timestamp",
                "status"
              ]
            }
          }
        },
        "required": [
          "userId",
          "cashtag",
          "name",
          "balance"
        ]
      }
    },
    "payments": {
      "type": "array",
      "description": "List of all payment transactions within the system",
      "items": {
        "type": "object",
        "properties": {
          "paymentId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID for the payment"
          },
          "senderId": {
            "type": "string",
            "format": "uuid",
            "description": "UserID of the sender"
          },
          "recipientId": {
            "type": "string",
            "format": "uuid",
            "description": "UserID of the recipient"
          },
          "amount": {
            "type": "number",
            "format": "float",
            "description": "The payment amount"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Payment timestamp"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "completed", "failed", "canceled"],
            "description": "Payment status"
          },
          "note": {
            "type": "string",
            "description": "Optional note for the payment"
          }
        },
        "required": [
          "paymentId",
          "senderId",
          "recipientId",
          "amount",
          "timestamp",
          "status"
        ]
      }
    },
    "requests": {
      "type": "array",
      "description": "List of all money requests within the system",
      "items": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID for the request"
          },
          "requesterId": {
            "type": "string",
            "format": "uuid",
            "description": "UserID of the requester"
          },
          "requestedFromId": {
            "type": "string",
            "format": "uuid",
            "description": "UserID of the user the money is requested from"
          },
          "amount": {
            "type": "number",
            "format": "float",
            "description": "The requested amount"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Request timestamp"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "fulfilled", "declined", "canceled"],
            "description": "Request status"
          },
          "note": {
            "type": "string",
            "description": "Optional note for the request"
          }
        },
        "required": [
          "requestId",
          "requesterId",
          "requestedFromId",
          "amount",
          "timestamp",
          "status"
        ]
      }
    }
  },
  "required": [
    "users"
  ]
}{
  "type": "object",
  "title": "Clubhouse App Schema",
  "description": "JSON Schema representing the core data structures of the Clubhouse app.",
  "properties": {
    "users": {
      "type": "array",
      "description": "List of all users in the app.",
      "items": {
        "$ref": "#/definitions/User"
      }
    },
    "clubs": {
      "type": "array",
      "description": "List of all clubs in the app.",
      "items": {
        "$ref": "#/definitions/Club"
      }
    },
    "rooms": {
      "type": "array",
      "description": "List of all rooms (active and past) in the app.",
      "items": {
        "$ref": "#/definitions/Room"
      }
    },
    "events": {
      "type": "array",
      "description": "List of scheduled events.",
      "items": {
        "$ref": "#/definitions/Event"
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "description": "Represents a user profile.",
      "properties": {
        "user_id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the user."
        },
        "username": {
          "type": "string",
          "description": "User's chosen username.",
          "minLength": 1,
          "maxLength": 50
        },
        "name": {
          "type": "string",
          "description": "User's full name.",
          "maxLength": 100
        },
        "photo_url": {
          "type": "string",
          "format": "URL",
          "description": "URL to the user's profile picture."
        },
        "bio": {
          "type": "string",
          "description": "Short biography of the user.",
          "maxLength": 255
        },
        "twitter": {
          "type": "string",
          "description": "User's Twitter handle (optional)."
        },
        "instagram": {
          "type": "string",
          "description": "User's Instagram handle (optional)."
        },
        "num_followers": {
          "type": "integer",
          "description": "Number of followers the user has."
        },
        "num_following": {
          "type": "integer",
          "description": "Number of users the user is following."
        },
        "time_created": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of when the user account was created."
        },
        "invited_by_user_profile": {
          "type": "object",
          "description": "Basic info about the user who invited this user (optional, as later invites could be removed).",
          "properties": {
            "user_id": {
              "type": "string",
              "format": "uuid"
            },
            "name": {
              "type": "string"
            },
            "photo_url": {
              "type": "string",
              "format": "URL"
            }
          },
          "required": [
            "user_id",
            "name"
          ]
        },
        "is_blocked_by_network": {
          "type": "boolean",
          "description": "Whether the user has been blocked by the network"
        },
        "is_admin":{
          "type": "boolean",
          "description": "Whether the user has admin permissions"
        }
      },
      "required": [
        "user_id",
        "username",
        "name",
        "time_created"
      ]
    },
    "Club": {
      "type": "object",
      "description": "Represents a club within the app.",
      "properties": {
        "club_id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the club."
        },
        "name": {
          "type": "string",
          "description": "Name of the club.",
          "minLength": 1,
          "maxLength": 100
        },
        "description": {
          "type": "string",
          "description": "Description of the club.",
          "maxLength": 500
        },
        "photo_url": {
          "type": "string",
          "format": "URL",
          "description": "URL to the club's photo."
        },
        "num_members": {
          "type": "integer",
          "description": "Number of members in the club."
        },
        "num_followers": {
          "type": "integer",
          "description": "Number of followers of the club."
        },
        "is_follow_allowed": {
          "type": "boolean",
          "description": "Whether users can follow the club."
        },
        "is_membership_private": {
          "type": "boolean",
          "description": "Whether the club's member list is private."
        },
        "is_community": {
          "type": "boolean",
          "description": "Whether the club is a community type"
        },
        "rules": {
          "type": "array",
          "description": "List of club rules",
          "items": {
            "type": "object",
            "properties":{
              "title":{
                "type": "string"
              },
              "desc":{
                "type": "string"
              }
            }
          }
        },
        "member_ids": {
          "type": "array",
          "description": "List of user IDs who are members of the club.",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "admin_ids": {
          "type": "array",
          "description": "List of user IDs who are admins of the club.",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "required": [
        "club_id",
        "name",
        "description"
      ]
    },
    "Room": {
      "type": "object",
      "description": "Represents a live audio room.",
      "properties": {
        "room_id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the room."
        },
        "club": {
          "type": "object",
          "description": "The club associated with the room (optional).",
          "properties": {
            "club_id": {
              "type": "string",
              "format": "uuid"
            },
            "name": {
              "type": "string"
            },
            "is_follow_allowed": {
              "type": "boolean"
            },
            "is_membership_private": {
              "type": "boolean"
            }
          },
          "required": [
            "club_id",
            "name"
          ]
        },
        "name": {
          "type": "string",
          "description": "Title/topic of the room."
        },
        "is_private": {
          "type": "boolean",
          "description": "Whether the room is private."
        },
        "is_social_mode": {
          "type": "boolean",
          "description": "Whether the room is in social mode"
        },
        "url": {
          "type": "string",
          "format": "URL",
          "description": "URL to join the room."
        },
        "feature_flags": {
          "type": "array",
          "description": "List of features available in the room",
          "items": {
            "type": "string"
          }
        },
        "time_created": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of when the room was created."
        },
        "users": {
          "type": "array",
          "description": "List of users currently in the room.",
          "items": {
            "$ref": "#/definitions/RoomUser"
          }
        },
        "creator_user_profile_id": {
          "type": "string",
          "format": "uuid",
          "description": "User ID of the room creator"
        },
        "is_expired": {
          "type": "boolean",
          "description": "Indicates whether the room has ended"
        }
      },
      "required": [
        "room_id",
        "name",
        "time_created"
      ]
    },
    "RoomUser": {
      "type": "object",
      "description": "Represents a user within a room, including their role.",
      "properties": {
        "user_id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the user."
        },
        "name": {
          "type": "string",
          "description": "User's full name."
        },
        "photo_url": {
          "type": "string",
          "format": "URL",
          "description": "URL to the user's profile picture."
        },
        "is_speaker": {
          "type": "boolean",
          "description": "Whether the user is currently a speaker."
        },
        "is_moderator": {
          "type": "boolean",
          "description": "Whether the user is a moderator in the room."
        },
        "time_joined_as_speaker": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of when the user joined as a speaker (optional)."
        },
        "is_new": {
          "type": "boolean",
          "description": "Whether the user is new in the platform"
        },
        "is_followed_by_speaker": {
          "type": "boolean",
          "description": "Whether the user is followed by a speaker"
        },
        "is_invited_as_speaker": {
          "type": "boolean",
          "description": "Whether the user has been invited to be a speaker"
        }
      },
      "required": [
        "user_id",
        "name"
      ]
    },
    "Event": {
      "type": "object",
      "description": "Represents a scheduled event.",
      "properties": {
        "event_id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the event."
        },
        "name": {
          "type": "string",
          "description": "Name/title of the event."
        },
        "description": {
          "type": "string",
          "description": "Description of the event."
        },
        "time_start": {
          "type": "string",
          "format": "date-time",
          "description": "Start time of the event."
        },
        "club": {
          "$ref": "#/definitions/Club",
          "description": "The club hosting the event (optional)."
        },
        "hosts": {
          "type": "array",
          "description": "List of users who are hosts of the event.",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "is_expired": {
          "type": "boolean",
          "description": "Indicates whether the event has ended"
        },
        "is_member_only": {
          "type": "boolean",
          "description": "Whether the event is for club members only"
        },
        "url": {
          "type": "string",
          "format": "URL",
          "description": "URL to the event page."
        },
        "channel": {
          "type": "string",
          "description": "Channel where the event will be held (room id)"
        }
      },
      "required": [
        "event_id",
        "name",
        "description",
        "time_start"
      ]
    }
  }
}{
  "type": "object",
  "title": "Coinbase API Schema",
  "description": "JSON Schema representation of key Coinbase API endpoints and data structures.",
  "properties": {
    "accounts": {
      "type": "object",
      "description": "Represents user accounts.",
      "properties": {
        "list": {
          "type": "object",
          "description": "List all accounts.",
          "properties": {
            "response": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/account"
              }
            }
          },
          "required": [
            "response"
          ]
        },
        "show": {
          "type": "object",
          "description": "Get a specific account.",
          "properties": {
            "parameters": {
              "type": "object",
              "properties": {
                "account_id": {
                  "type": "string",
                  "description": "The ID of the account."
                }
              },
              "required": [
                "account_id"
              ]
            },
            "response": {
              "$ref": "#/definitions/account"
            }
          },
          "required": [
            "parameters",
            "response"
          ]
        }
      },
      "required": [
        "list",
        "show"
      ]
    },
    "transactions": {
      "type": "object",
      "description": "Represents transactions.",
      "properties": {
        "list": {
          "type": "object",
          "description": "List transactions for an account.",
          "properties": {
            "parameters": {
              "type": "object",
              "properties": {
                "account_id": {
                  "type": "string",
                  "description": "The ID of the account."
                }
              },
              "required": [
                "account_id"
              ]
            },
            "response": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/transaction"
              }
            }
          },
          "required": [
            "parameters",
            "response"
          ]
        },
        "show": {
          "type": "object",
          "description": "Get a specific transaction.",
          "properties": {
            "parameters": {
              "type": "object",
              "properties": {
                "account_id": {
                  "type": "string",
                  "description": "The ID of the account."
                },
                "transaction_id": {
                  "type": "string",
                  "description": "The ID of the transaction."
                }
              },
              "required": [
                "account_id",
                "transaction_id"
              ]
            },
            "response": {
              "$ref": "#/definitions/transaction"
            }
          },
          "required": [
            "parameters",
            "response"
          ]
        },
        "send": {
          "type": "object",
          "description": "Send funds.",
          "properties": {
            "parameters": {
              "type": "object",
              "properties": {
                "account_id": {
                  "type": "string",
                  "description": "The ID of the account to send from."
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "send"
                  ],
                  "description": "Transaction type (must be 'send')."
                },
                "to": {
                  "type": "string",
                  "description": "Destination address or email."
                },
                "amount": {
                  "type": "string",
                  "description": "Amount to send (in the currency of the account)."
                },
                "currency": {
                  "type": "string",
                  "description": "Currency code (e.g., 'BTC', 'ETH')."
                },
                "description": {
                  "type": "string",
                  "description": "Optional description."
                }
              },
              "required": [
                "account_id",
                "type",
                "to",
                "amount",
                "currency"
              ]
            },
            "response": {
              "$ref": "#/definitions/transaction"
            }
          },
          "required": [
            "parameters",
            "response"
          ]
        },
        "request": {
          "type": "object",
          "description": "Request funds.",
          "properties": {
            "parameters": {
              "type": "object",
              "properties": {
                "account_id": {
                  "type": "string",
                  "description": "The ID of the account to request funds to."
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "request"
                  ],
                  "description": "Transaction type (must be 'request')."
                },
                "from": {
                  "type": "string",
                  "description": "Email of the person to request funds from."
                },
                "amount": {
                  "type": "string",
                  "description": "Amount to request (in the currency of the account)."
                },
                "currency": {
                  "type": "string",
                  "description": "Currency code."
                },
                "description": {
                  "type": "string",
                  "description": "Optional description."
                }
              },
              "required": [
                "account_id",
                "type",
                "from",
                "amount",
                "currency"
              ]
            },
            "response": {
              "$ref": "#/definitions/transaction"
            }
          },
          "required": [
            "parameters",
            "response"
          ]
        }
      },
      "required": [
        "list",
        "show",
        "send"
      ]
    },
    "prices": {
      "type": "object",
      "description": "Represents cryptocurrency prices.",
      "properties": {
        "buy": {
          "type": "object",
          "description": "Get the buy price for a cryptocurrency.",
          "properties": {
            "parameters": {
              "type": "object",
              "properties": {
                "currency_pair": {
                  "type": "string",
                  "description": "Currency pair (e.g., 'BTC-USD')."
                }
              },
              "required": [
                "currency_pair"
              ]
            },
            "response": {
              "$ref": "#/definitions/price"
            }
          },
          "required": [
            "parameters",
            "response"
          ]
        },
        "sell": {
          "type": "object",
          "description": "Get the sell price for a cryptocurrency.",
          "properties": {
            "parameters": {
              "type": "object",
              "properties": {
                "currency_pair": {
                  "type": "string",
                  "description": "Currency pair (e.g., 'BTC-USD')."
                }
              },
              "required": [
                "currency_pair"
              ]
            },
            "response": {
              "$ref": "#/definitions/price"
            }
          },
          "required": [
            "parameters",
            "response"
          ]
        },
        "spot": {
          "type": "object",
          "description": "Get the spot price for a cryptocurrency.",
          "properties": {
            "parameters": {
              "type": "object",
              "properties": {
                "currency_pair": {
                  "type": "string",
                  "description": "Currency pair (e.g., 'BTC-USD')."
                },
                "date": {
                  "type": "string",
                  "format": "date",
                  "description": "Optional date for historical price."
                }
              },
              "required": [
                "currency_pair"
              ]
            },
            "response": {
              "$ref": "#/definitions/price"
            }
          },
          "required": [
            "parameters",
            "response"
          ]
        }
      },
      "required": [
        "buy",
        "sell",
        "spot"
      ]
    },
    "user": {
      "type": "object",
      "description": "Represents user information.",
      "properties": {
        "show": {
          "type": "object",
          "description": "Get current user's information.",
          "properties": {
            "response": {
              "$ref": "#/definitions/user"
            }
          },
          "required": [
            "response"
          ]
        }
      },
      "required": [
        "show"
      ]
    }
  },
  "required": [
    "accounts",
    "transactions",
    "prices",
    "user"
  ],
  "definitions": {
    "account": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Account ID."
        },
        "name": {
          "type": "string",
          "description": "Account name."
        },
        "balance": {
          "$ref": "#/definitions/money"
        },
        "currency": {
          "type": "string",
          "description": "Currency code (e.g., 'BTC', 'USD')."
        },
        "type": {
          "type": "string",
          "description": "Account type (e.g., 'wallet', 'fiat')."
        },
        "primary": {
          "type": "boolean",
          "description": "Whether this is the user's primary account."
        },
        "active": {
          "type": "boolean",
          "description": "Whether this account is active."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Creation timestamp."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Last update timestamp."
        }
      },
      "required": [
        "id",
        "name",
        "balance",
        "currency"
      ]
    },
    "transaction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Transaction ID."
        },
        "type": {
          "type": "string",
          "enum": [
            "send",
            "request",
            "transfer",
            "buy",
            "sell",
            "fiat_deposit",
            "fiat_withdrawal",
            "exchange_deposit",
            "exchange_withdrawal",
            "vault_withdrawal"
          ],
          "description": "Transaction type."
        },
        "status": {
          "type": "string",
          "enum": [
            "pending",
            "completed",
            "failed",
            "expired",
            "canceled",
            "waiting_for_signature",
            "waiting_for_clearing"
          ],
          "description": "Transaction status."
        },
        "amount": {
          "$ref": "#/definitions/money"
        },
        "native_amount": {
          "$ref": "#/definitions/money"
        },
        "description": {
          "type": "string",
          "description": "Transaction description."
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "to": {
          "$ref": "#/definitions/resource"
        },
        "from": {
          "$ref": "#/definitions/resource"
        }
      },
      "required": [
        "id",
        "type",
        "status",
        "amount",
        "native_amount"
      ]
    },
    "price": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "string",
          "description": "Price amount."
        },
        "currency": {
          "type": "string",
          "description": "Currency code (e.g., 'USD')."
        },
        "base": {
          "type": "string",
          "description": "Base currency code."
        }
      },
      "required": [
        "amount",
        "currency",
        "base"
      ]
    },
    "user": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "User ID."
        },
        "name": {
          "type": "string",
          "description": "User's name."
        },
        "username": {
          "type": "string",
          "description": "Username."
        },
        "profile_location": {
          "type": "string",
          "description": "Profile location."
        },
        "profile_bio": {
          "type": "string",
          "description": "Profile bio."
        },
        "profile_url": {
          "type": "string",
          "description": "Profile URL."
        },
        "avatar_url": {
          "type": "string",
          "description": "Avatar URL."
        },
        "resource": {
          "type": "string",
          "description": "Resource type (should be 'user')."
        },
        "resource_path": {
          "type": "string",
          "description": "Resource path."
        },
        "email": {
          "type": "string",
          "description": "User's email."
        },
        "legacy_id": {
          "type": "string",
          "description": "Legacy ID."
        },
        "time_zone": {
          "type": "string",
          "description": "Time zone."
        },
        "native_currency": {
          "type": "string",
          "description": "Native currency."
        },
        "bitcoin_unit": {
          "type": "string",
          "description": "Bitcoin unit."
        },
        "state": {
          "type": "string",
          "description": "State."
        },
        "country": {
          "$ref": "#/definitions/country"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "tiers": {
          "type": "object",
          "properties": {
            "completed_description": {
              "type": "string"
            }
          },
          "required": ["completed_description"]
        }
      },
      "required": [
        "id",
        "resource",
        "resource_path"
      ]
    },
    "money": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "string",
          "description": "Amount as string."
        },
        "currency": {
          "type": "string",
          "description": "Currency code."
        }
      },
      "required": [
        "amount",
        "currency"
      ]
    },
    "resource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Resource ID."
        },
        "resource": {
          "type": "string",
          "description": "Resource type."
        },
        "resource_path": {
          "type": "string",
          "description": "Resource path."
        },
        "email": {
          "type": "string",
          "description": "Email address (for user resources)."
        }
      },
      "required": [
        "id",
        "resource",
        "resource_path"
      ]
    },
    "country": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "Country code (e.g., 'US')."
        },
        "name": {
          "type": "string",
          "description": "Country name."
        }
      },
      "required": [
        "code",
        "name"
      ]
    }
  }
}{
  "type": "object",
  "title": "Craigslist",
  "description": "JSON Schema for a simplified representation of Craigslist data.",
  "properties": {
    "location": {
      "type": "object",
      "description": "Location information for the listing or search.",
      "properties": {
        "city": {
          "type": "string",
          "description": "The city (e.g., 'san francisco')",
          "examples": [
            "san francisco",
            "new york",
            "los angeles"
          ]
        },
        "area": {
          "type": "string",
          "description": "The specific area within the city (e.g., 'soma / south beach')",
          "examples": [
            "soma / south beach",
            "downtown",
            "mission district"
          ]
        },
        "state": {
          "type": "string",
          "description": "The state or region (e.g., 'CA')",
          "examples": [
            "CA",
            "NY",
            "TX"
          ]
        },
        "country": {
          "type": "string",
          "description": "The country (e.g., 'US')",
          "examples": [
            "US",
            "CA",
            "GB"
          ]
        }
      },
      "required": [
        "city"
      ]
    },
    "categories": {
      "type": "array",
      "description": "List of categories and subcategories available on Craigslist.",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the category.",
            "examples": [
              "community",
              "housing",
              "jobs",
              "for sale",
              "services"
            ]
          },
          "subcategories": {
            "type": "array",
            "description": "List of subcategories within the category.",
            "items": {
              "type": "string",
              "examples": [
                "activities",
                "apartments / housing",
                "accounting & finance",
                "cars+trucks",
                "automotive services"
              ]
            }
          }
        },
        "required": [
          "name"
        ]
      }
    },
    "postings": {
      "type": "array",
      "description": "List of individual postings.",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the posting.",
            "examples": [
              "7624518951"
            ]
          },
          "title": {
            "type": "string",
            "description": "Title of the posting.",
            "examples": [
              "Spacious 1-bedroom apartment in downtown",
              "Used Honda Civic for sale",
              "Looking for a freelance web developer"
            ]
          },
          "url": {
            "type": "string",
            "format": "URL",
            "description": "URL to the full posting.",
            "examples": [
              "https://sfbay.craigslist.org/sfc/apa/d/san-francisco-spacious-1-bedroom/7624518951.html"
            ]
          },
          "date_posted": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the posting was created."
          },
          "date_updated": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the posting was last updated."
          },
          "location": {
            "$ref": "#/properties/location"
          },
          "category": {
            "type": "string",
            "description": "Main category of the posting.",
            "examples": [
              "housing",
              "for sale",
              "jobs"
            ]
          },
          "subcategory": {
            "type": "string",
            "description": "Subcategory of the posting.",
            "examples": [
              "apartments / housing",
              "cars+trucks",
              "web / info design"
            ]
          },
          "price": {
            "type": "number",
            "format": "float",
            "description": "Price of the item or service, if applicable.",
            "examples": [
              1500,
              12500.50
            ]
          },
          "body": {
            "type": "string",
            "description": "Main body text of the posting.",
            "examples": [
              "This beautiful apartment features hardwood floors, a modern kitchen, and plenty of natural light."
            ]
          },
          "images": {
            "type": "array",
            "description": "List of image URLs associated with the posting.",
            "items": {
              "type": "string",
              "format": "URL"
            }
          },
          "attributes": {
            "type": "array",
            "description": "List of attributes specific to the posting's category (e.g., bedrooms, bathrooms for housing).",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "examples": [
                    "bedrooms",
                    "bathrooms",
                    "make / manufacturer",
                    "condition"
                  ]
                },
                "value": {
                  "type": "string",
                  "examples": [
                    "2",
                    "1.5",
                    "Honda",
                    "excellent"
                  ]
                }
              },
              "required": [
                "name",
                "value"
              ]
            }
          },
          "contact": {
            "type": "object",
            "description": "Contact information for the posting",
            "properties": {
              "email": {
                "type": "string",
                "format": "email",
                "examples": [
                  "a1b2c3d4e5@example.com"
                ]
              },
              "phone_number": {
                "type": "string",
                "examples": [
                  "(123) 456-7890"
                ]
              },
              "show_contact_info": {
                "type": "boolean",
                "description": "Whether or not the contact info is visible to the public"
              }
            },
            "required": [
              "show_contact_info"
            ]
          }
        },
        "required": [
          "id",
          "title",
          "url",
          "date_posted",
          "location",
          "category",
          "subcategory"
        ]
      }
    },
    "search": {
      "type": "object",
      "description": "Schema for a search query on Craigslist",
      "properties": {
        "query": {
          "type": "string",
          "description": "The search term(s) entered by the user",
          "examples": [
            "bicycle",
            "software engineer",
            "2 bedroom apartment"
          ]
        },
        "location": {
          "$ref": "#/properties/location"
        },
        "category": {
          "type": "string",
          "description": "Main category to search within"
        },
        "subcategory": {
          "type": "string",
          "description": "Subcategory to search within"
        },
        "min_price": {
          "type": "number",
          "description": "Minimum price filter"
        },
        "max_price": {
          "type": "number",
          "description": "Maximum price filter"
        },
        "search_title_only": {
          "type": "boolean",
          "description": "Whether to search only in titles"
        },
        "has_image": {
          "type": "boolean",
          "description": "Whether to only include postings with images"
        },
        "posted_today": {
          "type": "boolean",
          "description": "Whether to only include postings from today"
        },
        "bundle_duplicates": {
          "type": "boolean",
          "description": "Whether to bundle duplicate postings"
        },
        "other_filters": {
          "type": "array",
          "description": "Other category-specific filters",
          "items": {
            "type": "object",
            "properties": {
              "filter_name": {
                "type": "string"
              },
              "filter_value": {
                "type": "string"
              }
            },
            "required": [
              "filter_name",
              "filter_value"
            ]
          }
        }
      },
      "required": [
        "query",
        "location"
      ]
    }
  },
  "required": [
    "location",
    "categories"
  ]
}{
  "type": "object",
  "title": "DoorDash Schema",
  "description": "JSON Schema for the DoorDash application data model",
  "properties": {
    "users": {
      "type": "array",
      "description": "List of users",
      "items": {
        "$ref": "#/definitions/user"
      }
    },
    "restaurants": {
      "type": "array",
      "description": "List of restaurants",
      "items": {
        "$ref": "#/definitions/restaurant"
      }
    },
    "orders": {
      "type": "array",
      "description": "List of orders",
      "items": {
        "$ref": "#/definitions/order"
      }
    },
    "dashers": {
      "type": "array",
      "description": "List of delivery drivers (Dashers)",
      "items": {
        "$ref": "#/definitions/dasher"
      }
    }
  },
  "definitions": {
    "user": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the user"
        },
        "firstName": {
          "type": "string",
          "description": "User's first name"
        },
        "lastName": {
          "type": "string",
          "description": "User's last name"
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "User's email address"
        },
        "phoneNumber": {
          "type": "string",
          "pattern": "^\\+?[1-9]\\d{1,14}$",
          "description": "User's phone number (E.164 format)"
        },
        "address": {
          "$ref": "#/definitions/address",
          "description": "User's delivery address"
        },
        "paymentMethods": {
          "type": "array",
          "description": "User's payment methods",
          "items": {
            "$ref": "#/definitions/paymentMethod"
          }
        },
        "orderHistory": {
          "type": "array",
          "description": "User's order history (references order IDs)",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "required": [
        "id",
        "firstName",
        "lastName",
        "email",
        "phoneNumber",
        "address"
      ]
    },
    "restaurant": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the restaurant"
        },
        "name": {
          "type": "string",
          "description": "Restaurant's name"
        },
        "cuisine": {
          "type": "array",
          "description": "Types of cuisine offered",
          "items": {
            "type": "string"
          }
        },
        "address": {
          "$ref": "#/definitions/address",
          "description": "Restaurant's address"
        },
        "phoneNumber": {
          "type": "string",
          "pattern": "^\\+?[1-9]\\d{1,14}$",
          "description": "Restaurant's phone number (E.164 format)"
        },
        "rating": {
          "type": "number",
          "minimum": 0,
          "maximum": 5,
          "description": "Average rating of the restaurant"
        },
        "menu": {
          "type": "array",
          "description": "Restaurant's menu",
          "items": {
            "$ref": "#/definitions/menuItem"
          }
        },
        "imageUrl": {
          "type": "string",
          "format": "URL",
          "description": "URL of the restaurant's image"
        },
        "deliveryFee": {
          "type": "number",
          "format": "float",
          "minimum": 0,
          "description": "Delivery fee for this restaurant"
        },
        "estimatedDeliveryTime": {
          "type": "string",
          "description": "Estimated delivery time range (e.g., '30-45 mins')"
        }
      },
      "required": [
        "id",
        "name",
        "cuisine",
        "address",
        "phoneNumber",
        "menu"
      ]
    },
    "menuItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the menu item"
        },
        "name": {
          "type": "string",
          "description": "Name of the menu item"
        },
        "description": {
          "type": "string",
          "description": "Description of the menu item"
        },
        "price": {
          "type": "number",
          "format": "float",
          "minimum": 0,
          "description": "Price of the menu item"
        },
        "imageUrl": {
          "type": "string",
          "format": "URL",
          "description": "URL of the menu item's image"
        },
        "dietaryRestrictions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/dietaryRestriction"
          }
        },
        "options": {
          "type": "array",
          "description": "Customization options for the item",
          "items": {
            "$ref": "#/definitions/itemOption"
          }
        }
      },
      "required": [
        "id",
        "name",
        "price"
      ]
    },
    "itemOption": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the option (e.g., 'Size', 'Spice Level')"
        },
        "choices": {
          "type": "array",
          "description": "Choices for this option",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the choice (e.g., 'Small', 'Medium', 'Hot')"
              },
              "price": {
                "type": "number",
                "format": "float",
                "minimum": 0,
                "description": "Additional price for this choice (can be 0)"
              }
            },
            "required": [
              "name"
            ]
          }
        }
      },
      "required": [
        "name",
        "choices"
      ]
    },
    "dietaryRestriction": {
      "type": "string",
      "enum": [
        "Vegetarian",
        "Vegan",
        "Gluten-Free",
        "Dairy-Free",
        "Nut-Free",
        "Halal",
        "Kosher"
      ],
      "description": "Dietary restriction tags"
    },
    "order": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the order"
        },
        "userId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the user who placed the order"
        },
        "restaurantId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the restaurant the order is from"
        },
        "items": {
          "type": "array",
          "description": "Items in the order",
          "items": {
            "$ref": "#/definitions/orderItem"
          }
        },
        "subtotal": {
          "type": "number",
          "format": "float",
          "minimum": 0,
          "description": "Subtotal of the order"
        },
        "deliveryFee": {
          "type": "number",
          "format": "float",
          "minimum": 0,
          "description": "Delivery fee"
        },
        "tax": {
          "type": "number",
          "format": "float",
          "minimum": 0,
          "description": "Tax amount"
        },
        "tip": {
          "type": "number",
          "format": "float",
          "minimum": 0,
          "description": "Tip amount"
        },
        "total": {
          "type": "number",
          "format": "float",
          "minimum": 0,
          "description": "Total amount of the order"
        },
        "status": {
          "type": "string",
          "enum": [
            "Placed",
            "Confirmed",
            "Preparing",
            "Out for Delivery",
            "Delivered",
            "Cancelled"
          ],
          "description": "Current status of the order"
        },
        "dasherId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the assigned Dasher (if any)"
        },
        "placedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the order was placed"
        },
        "deliveredAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the order was delivered (if applicable)"
        },
        "deliveryAddress": {
          "$ref": "#/definitions/address",
          "description": "Delivery address for the order"
        },
        "paymentMethod": {
          "$ref": "#/definitions/paymentMethod"
        }
      },
      "required": [
        "id",
        "userId",
        "restaurantId",
        "items",
        "subtotal",
        "deliveryFee",
        "tax",
        "total",
        "status",
        "placedAt",
        "deliveryAddress",
        "paymentMethod"
      ]
    },
    "orderItem": {
      "type": "object",
      "properties": {
        "menuItemId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the menu item"
        },
        "quantity": {
          "type": "integer",
          "minimum": 1,
          "description": "Quantity of the item ordered"
        },
        "price": {
          "type": "number",
          "format": "float",
          "description": "Price at the time of ordering"
        },
        "specialInstructions": {
          "type": "string",
          "description": "Special instructions for the item"
        },
        "selectedOptions": {
          "type": "array",
          "description": "Options selected by the user",
          "items": {
            "type": "object",
            "properties": {
              "optionName": {
                "type": "string",
                "description": "Name of the option"
              },
              "choiceName": {
                "type": "string",
                "description": "Name of the chosen option"
              },
              "price": {
                "type": "number",
                "format": "float",
                "description": "Additional price of the chosen option"
              }
            },
            "required": [
              "optionName",
              "choiceName"
            ]
          }
        }
      },
      "required": [
        "menuItemId",
        "quantity",
        "price"
      ]
    },
    "dasher": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the Dasher"
        },
        "firstName": {
          "type": "string",
          "description": "Dasher's first name"
        },
        "lastName": {
          "type": "string",
          "description": "Dasher's last name"
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "Dasher's email address"
        },
        "phoneNumber": {
          "type": "string",
          "pattern": "^\\+?[1-9]\\d{1,14}$",
          "description": "Dasher's phone number (E.164 format)"
        },
        "vehicle": {
          "$ref": "#/definitions/vehicle",
          "description": "Dasher's vehicle information"
        },
        "rating": {
          "type": "number",
          "minimum": 0,
          "maximum": 5,
          "description": "Dasher's average rating"
        },
        "location": {
          "type": "object",
          "description": "Dasher's current location",
          "properties": {
            "latitude": {
              "type": "number",
              "format": "float"
            },
            "longitude": {
              "type": "number",
              "format": "float"
            }
          },
          "required": [
            "latitude",
            "longitude"
          ]
        },
        "status": {
          "type": "string",
          "enum": [
            "Online",
            "Offline",
            "On Delivery"
          ],
          "description": "Dasher's current status"
        },
        "bankAccount": {
          "$ref": "#/definitions/bankAccount",
          "description": "Dasher's bank account information for earnings"
        }
      },
      "required": [
        "id",
        "firstName",
        "lastName",
        "email",
        "phoneNumber",
        "vehicle",
        "location",
        "status"
      ]
    },
    "vehicle": {
      "type": "object",
      "properties": {
        "make": {
          "type": "string",
          "description": "Vehicle make"
        },
        "model": {
          "type": "string",
          "description": "Vehicle model"
        },
        "year": {
          "type": "integer",
          "description": "Vehicle year"
        },
        "color": {
          "type": "string",
          "description": "Vehicle color"
        },
        "licensePlate": {
          "type": "string",
          "description": "Vehicle license plate number"
        }
      },
      "required": [
        "make",
        "model",
        "year",
        "color",
        "licensePlate"
      ]
    },
    "address": {
      "type": "object",
      "properties": {
        "streetAddress": {
          "type": "string",
          "description": "Street address"
        },
        "addressLine2": {
          "type": "string",
          "description": "Apartment, suite, etc. (optional)"
        },
        "city": {
          "type": "string",
          "description": "City"
        },
        "state": {
          "type": "string",
          "description": "State (e.g., CA, NY)"
        },
        "zipCode": {
          "type": "string",
          "description": "Postal code"
        },
        "country": {
          "type": "string",
          "description": "Country (e.g., USA)"
        },
        "latitude": {
          "type": "number",
          "format": "float"
        },
        "longitude": {
          "type": "number",
          "format": "float"
        }
      },
      "required": [
        "streetAddress",
        "city",
        "state",
        "zipCode",
        "country"
      ]
    },
    "paymentMethod": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Credit Card",
            "Debit Card",
            "PayPal",
            "Apple Pay",
            "Google Pay",
            "DoorDash Gift Card"
          ]
        },
        "lastFourDigits": {
          "type": "string",
          "description": "Last four digits of the card (if applicable)",
          "pattern": "^\\d{4}$"
        },
        "expirationDate": {
          "type": "string",
          "description": "Expiration date of the card (if applicable, MM/YY)"
        },
        "isDefault": {
          "type": "boolean",
          "description": "Whether this is the default payment method"
        }
      },
      "required": [
        "type"
      ]
    },
    "bankAccount": {
      "type": "object",
      "properties": {
        "accountNumber": {
          "type": "string",
          "description": "Bank account number"
        },
        "routingNumber": {
          "type": "string",
          "description": "Bank routing number"
        },
        "accountType": {
          "type": "string",
          "enum": [
            "Checking",
            "Savings"
          ],
          "description": "Type of bank account"
        }
      },
      "required": [
        "accountNumber",
        "routingNumber",
        "accountType"
      ]
    }
  }
}{
  "type": "object",
  "title": "DoorDash App Schema",
  "description": "A JSON Schema representing the core data structures of the DoorDash application.",
  "properties": {
    "users": {
      "type": "array",
      "description": "List of all users (customers, dashers, merchants)",
      "items": {
        "oneOf": [
          { "$ref": "#/definitions/customer" },
          { "$ref": "#/definitions/dasher" },
          { "$ref": "#/definitions/merchant" }
        ]
      }
    },
    "restaurants": {
      "type": "array",
      "description": "List of restaurants available on the platform",
      "items": {
        "$ref": "#/definitions/restaurant"
      }
    },
    "orders": {
      "type": "array",
      "description": "List of all orders placed on the platform",
      "items": {
        "$ref": "#/definitions/order"
      }
    },
    "categories": {
      "type": "array",
      "description": "List of food categories (e.g., Pizza, Burgers, Sushi)",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the category"
          },
          "name": {
            "type": "string",
            "description": "Name of the category"
          },
          "imageUrl": {
            "type": "string",
            "format": "URL",
            "description": "URL of the category image",
            "examples": [
              "https://example.com/images/categories/pizza.jpg"
            ]
          }
        },
        "required": [
          "id",
          "name"
        ]
      }
    },
    "promotions": {
      "type": "array",
      "description": "List of active promotions and discounts",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the promotion"
          },
          "code": {
            "type": "string",
            "description": "Unique code for the promotion (e.g., SUMMER20)"
          },
          "description": {
            "type": "string",
            "description": "Description of the promotion"
          },
          "discountType": {
            "type": "string",
            "enum": [
              "percentage",
              "fixed_amount"
            ],
            "description": "Type of discount applied"
          },
          "discountValue": {
            "type": "number",
            "description": "Value of the discount (e.g., 20 for 20%, or 5 for $5 off)"
          },
          "minimumOrderValue": {
            "type": "number",
            "description": "Minimum order value required to apply the promotion"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Start date and time of the promotion"
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "description": "End date and time of the promotion"
          },
          "applicableRestaurants": {
            "type": "array",
            "description": "List of restaurant IDs to which the promotion applies (optional, if empty it applies to all)",
            "items": {
              "type": "integer"
            }
          }
        },
        "required": [
          "id",
          "code",
          "description",
          "discountType",
          "discountValue",
          "startDate",
          "endDate"
        ]
      }
    }
  },
  "definitions": {
    "customer": {
      "type": "object",
      "description": "Represents a customer user",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique identifier for the customer"
        },
        "userType": {
          "type": "string",
          "enum": ["customer"],
          "default": "customer"
        },
        "firstName": {
          "type": "string",
          "description": "Customer's first name"
        },
        "lastName": {
          "type": "string",
          "description": "Customer's last name"
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "Customer's email address"
        },
        "phoneNumber": {
          "type": "string",
          "description": "Customer's phone number"
        },
        "addresses": {
          "type": "array",
          "description": "List of customer's saved addresses",
          "items": {
            "$ref": "#/definitions/address"
          }
        },
        "paymentMethods": {
          "type": "array",
          "description": "List of customer's saved payment methods",
          "items": {
            "$ref": "#/definitions/paymentMethod"
          }
        },
        "orderHistory": {
          "type": "array",
          "description": "List of customer's past orders (IDs only)",
          "items": {
            "type": "integer"
          }
        },
        "profileImageUrl": {
          "type": "string",
          "format": "URL",
          "description": "URL of the customer's profile image",
          "examples": [
            "https://example.com/images/users/12345.jpg"
          ]
        }
      },
      "required": [
        "id",
        "userType",
        "firstName",
        "lastName",
        "email",
        "phoneNumber"
      ]
    },
    "dasher": {
      "type": "object",
      "description": "Represents a delivery driver (Dasher)",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique identifier for the Dasher"
        },
        "userType": {
          "type": "string",
          "enum": ["dasher"],
          "default": "dasher"
        },
        "firstName": {
          "type": "string",
          "description": "Dasher's first name"
        },
        "lastName": {
          "type": "string",
          "description": "Dasher's last name"
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "Dasher's email address"
        },
        "phoneNumber": {
          "type": "string",
          "description": "Dasher's phone number"
        },
        "vehicleType": {
          "type": "string",
          "description": "Dasher's vehicle type (e.g., Car, Bike, Scooter)"
        },
        "location": {
          "$ref": "#/definitions/location",
          "description": "Dasher's current location"
        },
        "rating": {
          "type": "number",
          "description": "Dasher's average rating",
          "minimum": 0,
          "maximum": 5
        },
        "profileImageUrl": {
          "type": "string",
          "format": "URL",
          "description": "URL of the dasher's profile image"
        }
      },
      "required": [
        "id",
        "userType",
        "firstName",
        "lastName",
        "email",
        "phoneNumber",
        "vehicleType"
      ]
    },
    "merchant": {
      "type": "object",
      "description": "Represents a merchant/restaurant owner user",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique identifier for the merchant"
        },
        "userType": {
          "type": "string",
          "enum": ["merchant"],
          "default": "merchant"
        },
        "firstName": {
          "type": "string",
          "description": "Merchant's first name"
        },
        "lastName": {
          "type": "string",
          "description": "Merchant's last name"
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "Merchant's email address"
        },
        "phoneNumber": {
          "type": "string",
          "description": "Merchant's phone number"
        },
        "restaurantId": {
          "type": "integer",
          "description": "ID of the restaurant the merchant manages"
        },
        "profileImageUrl": {
          "type": "string",
          "format": "URL",
          "description": "URL of the merchant's profile image"
        }
      },
      "required": [
        "id",
        "userType",
        "firstName",
        "lastName",
        "email",
        "phoneNumber",
        "restaurantId"
      ]
    },
    "restaurant": {
      "type": "object",
      "description": "Represents a restaurant",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique identifier for the restaurant"
        },
        "name": {
          "type": "string",
          "description": "Restaurant's name"
        },
        "description": {
          "type": "string",
          "description": "Restaurant's description"
        },
        "address": {
          "$ref": "#/definitions/address",
          "description": "Restaurant's address"
        },
        "phoneNumber": {
          "type": "string",
          "description": "Restaurant's phone number"
        },
        "cuisineType": {
          "type": "array",
          "description": "Cuisine types offered by the restaurant",
          "items": {
            "type": "string"
          }
        },
        "menu": {
          "type": "array",
          "description": "Restaurant's menu",
          "items": {
            "$ref": "#/definitions/menuItem"
          }
        },
        "rating": {
          "type": "number",
          "description": "Restaurant's average rating",
          "minimum": 0,
          "maximum": 5
        },
        "priceRange": {
          "type": "string",
          "enum": [
            "$",
            "$$",
            "$$$",
            "$$$$"
          ],
          "description": "Restaurant's price range"
        },
        "photos": {
          "type": "array",
          "description": "List of URLs to restaurant photos",
          "items": {
            "type": "string",
            "format": "URL",
            "examples": [
              "https://example.com/images/restaurants/1/photo1.jpg"
            ]
          }
        },
        "operatingHours": {
          "type": "array",
          "description": "Restaurant's operating hours for each day of the week",
          "items": {
            "$ref": "#/definitions/operatingHours"
          }
        },
        "deliveryFee": {
          "type": "number",
          "description": "Delivery fee for the restaurant"
        },
        "estimatedDeliveryTime": {
          "type": "string",
          "description": "Estimated delivery time range (e.g., '30-45 min')"
        },
        "acceptingOrders": {
          "type": "boolean",
          "description": "Indicates if the restaurant is currently accepting orders"
        }
      },
      "required": [
        "id",
        "name",
        "address",
        "phoneNumber",
        "menu"
      ]
    },
    "menuItem": {
      "type": "object",
      "description": "Represents a menu item",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique identifier for the menu item"
        },
        "name": {
          "type": "string",
          "description": "Name of the menu item"
        },
        "description": {
          "type": "string",
          "description": "Description of the menu item"
        },
        "price": {
          "type": "number",
          "description": "Price of the menu item"
        },
        "imageUrl": {
          "type": "string",
          "format": "URL",
          "description": "URL of the menu item image",
          "examples": [
            "https://example.com/images/menu/1/item1.jpg"
          ]
        },
        "category": {
          "type": "string",
          "description": "Category the menu item belongs to"
        },
        "options": {
          "type": "array",
          "description": "List of options for the menu item (e.g., size, toppings)",
          "items": {
            "$ref": "#/definitions/menuItemOption"
          }
        },
        "dietaryRestrictions": {
          "type": "array",
          "description": "List of dietary restrictions (e.g., Vegetarian, Gluten-Free)",
          "items": {
            "type": "string"
          }
        },
        "available": {
          "type": "boolean",
          "description": "Indicates if the menu item is currently available",
          "default": true
        }
      },
      "required": [
        "id",
        "name",
        "price"
      ]
    },
    "menuItemOption": {
      "type": "object",
      "description": "Represents an option for a menu item",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the option group (e.g., Size, Toppings)"
        },
        "choices": {
          "type": "array",
          "description": "List of choices within the option group",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the choice (e.g., Small, Pepperoni)"
              },
              "price": {
                "type": "number",
                "description": "Additional price for the choice (can be 0)"
              }
            },
            "required": [
              "name"
            ]
          }
        },
        "required": {
          "type": "boolean",
          "description": "Indicates if selecting an option from this group is required"
        }
      },
      "required": [
        "name",
        "choices"
      ]
    },
    "order": {
      "type": "object",
      "description": "Represents an order",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique identifier for the order"
        },
        "customerId": {
          "type": "integer",
          "description": "ID of the customer who placed the order"
        },
        "restaurantId": {
          "type": "integer",
          "description": "ID of the restaurant the order is from"
        },
        "dasherId": {
          "type": "integer",
          "description": "ID of the Dasher assigned to the order (null if not yet assigned)"
        },
        "items": {
          "type": "array",
          "description": "List of items in the order",
          "items": {
            "$ref": "#/definitions/orderItem"
          }
        },
        "subtotal": {
          "type": "number",
          "description": "Subtotal of the order (before tax, fees, and tip)"
        },
        "deliveryFee": {
          "type": "number",
          "description": "Delivery fee for the order"
        },
        "tax": {
          "type": "number",
          "description": "Tax amount for the order"
        },
        "tip": {
          "type": "number",
          "description": "Tip amount for the Dasher"
        },
        "total": {
          "type": "number",
          "description": "Total amount of the order"
        },
        "status": {
          "type": "string",
          "enum": [
            "placed",
            "preparing",
            "ready_for_pickup",
            "out_for_delivery",
            "delivered",
            "canceled"
          ],
          "description": "Current status of the order"
        },
        "orderTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the order was placed"
        },
        "estimatedDeliveryTime": {
          "type": "string",
          "format": "date-time",
          "description": "Estimated delivery time of the order"
        },
        "actualDeliveryTime": {
          "type": "string",
          "format": "date-time",
          "description": "Actual delivery time of the order (null if not yet delivered)"
        },
        "deliveryAddress": {
          "$ref": "#/definitions/address",
          "description": "Delivery address for the order"
        },
        "paymentMethod": {
          "$ref": "#/definitions/paymentMethod",
          "description": "Payment method used for the order"
        },
        "instructions": {
          "type": "string",
          "description": "Special instructions for the order (e.g., 'Leave at door')"
        },
        "appliedPromotionId": {
          "type": "integer",
          "description": "ID of the promotion applied to the order (optional)"
        }
      },
      "required": [
        "id",
        "customerId",
        "restaurantId",
        "items",
        "subtotal",
        "deliveryFee",
        "tax",
        "total",
        "status",
        "orderTime",
        "deliveryAddress",
        "paymentMethod"
      ]
    },
    "orderItem": {
      "type": "object",
      "description": "Represents an item in an order",
      "properties": {
        "menuItemId": {
          "type": "integer",
          "description": "ID of the menu item"
        },
        "quantity": {
          "type": "integer",
          "description": "Quantity of the item ordered"
        },
        "name": {
          "type": "string",
          "description": "Name of the menu item (duplicated from menu for historical records)"
        },
        "price": {
          "type": "number",
          "description": "Price of the menu item (duplicated from menu for historical records)"
        },
        "selectedOptions": {
          "type": "array",
          "description": "List of selected options for the item",
          "items": {
            "type": "object",
            "properties": {
              "optionName": {
                "type": "string",
                "description": "Name of the option group"
              },
              "choiceName": {
                "type": "string",
                "description": "Name of the selected choice"
              },
              "choicePrice": {
                "type": "number",
                "description": "Price of the selected choice"
              }
            },
            "required": [
              "optionName",
              "choiceName"
            ]
          }
        },
        "specialInstructions": {
          "type": "string",
          "description": "Special instructions for the item (e.g., 'No onions')"
        }
      },
      "required": [
        "menuItemId",
        "quantity",
        "name",
        "price"
      ]
    },
    "address": {
      "type": "object",
      "description": "Represents an address",
      "properties": {
        "streetAddress": {
          "type": "string",
          "description": "Street address"
        },
        "streetAddress2": {
          "type": "string",
          "description": "Apartment, suite, or unit number (optional)"
        },
        "city": {
          "type": "string",
          "description": "City"
        },
        "state": {
          "type": "string",
          "description": "State (e.g., CA, NY)"
        },
        "zipCode": {
          "type": "string",
          "description": "Zip code"
        },
        "country": {
          "type": "string",
          "description": "Country"
        },
        "latitude": {
          "type": "number",
          "format": "float",
          "description": "Latitude of the address"
        },
        "longitude": {
          "type": "number",
          "format": "float",
          "description": "Longitude of the address"
        },
        "label": {
          "type": "string",
          "description": "Label for the address (e.g., Home, Work)"
        }
      },
      "required": [
        "streetAddress",
        "city",
        "state",
        "zipCode",
        "country"
      ]
    },
    "paymentMethod": {
      "type": "object",
      "description": "Represents a payment method",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "credit_card",
            "debit_card",
            "paypal",
            "google_pay",
            "apple_pay",
            "doordash_credits"
          ],
          "description": "Type of payment method"
        },
        "lastFourDigits": {
          "type": "string",
          "description": "Last four digits of the card number (if applicable)"
        },
        "brand": {
          "type": "string",
          "description": "Card brand (e.g., Visa, Mastercard) (if applicable)"
        },
        "expirationDate": {
          "type": "string",
          "description": "Card expiration date (MM/YY) (if applicable)"
        }
      },
      "required": [
        "type"
      ]
    },
    "location": {
      "type": "object",
      "description": "Represents a geographical location",
      "properties": {
        "latitude": {
          "type": "number",
          "format": "float",
          "description": "Latitude of the location"
        },
        "longitude": {
          "type": "number",
          "format": "float",
          "description": "Longitude of the location"
        }
      },
      "required": [
        "latitude",
        "longitude"
      ]
    },
    "operatingHours": {
      "type": "object",
      "description": "Represents operating hours for a day of the week",
      "properties": {
        "day": {
          "type": "string",
          "enum": [
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday"
          ],
          "description": "Day of the week"
        },
        "openTime": {
          "type": "string",
          "format": "time",
          "description": "Opening time in 24-hour format (e.g., '09:00')"
        },
        "closeTime": {
          "type": "string",
          "format": "time",
          "description": "Closing time in 24-hour format (e.g., '22:00')"
        }
      },
      "required": [
        "day",
        "openTime",
        "closeTime"
      ]
    }
  }
}{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Element/Matrix App",
  "description": "JSON Schema for the core features and data structures of the Element/Matrix application.",
  "type": "object",
  "properties": {
    "user": {
      "type": "object",
      "description": "Represents a user in the Matrix ecosystem.",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "The unique Matrix user ID (MXID).",
          "pattern": "^@[^:]+:[^:]+$",
          "example": "@alice:example.com"
        },
        "display_name": {
          "type": "string",
          "description": "The user's display name (may not be unique)."
        },
        "avatar_url": {
          "type": "string",
          "format": "URL",
          "description": "The URL of the user's avatar image."
        },
        "devices": {
          "type": "array",
          "description": "A list of the user's devices.",
          "items": {
            "type": "object",
            "properties": {
              "device_id": {
                "type": "string",
                "description": "Unique identifier for the device"
              },
              "display_name": {
                "type": "string",
                "description": "Human-readable name for the device"
              }
            },
            "required": [
              "device_id"
            ]
          }
        }
      },
      "required": [
        "user_id"
      ]
    },
    "room": {
      "type": "object",
      "description": "Represents a chat room in Matrix.",
      "properties": {
        "room_id": {
          "type": "string",
          "description": "The unique Matrix room ID.",
          "pattern": "^![^:]+:[^:]+$",
          "example": "!abcdefg:example.com"
        },
        "name": {
          "type": "string",
          "description": "The human-readable name of the room (may not be unique)."
        },
        "topic": {
          "type": "string",
          "description": "The room's topic or description."
        },
        "avatar_url": {
          "type": "string",
          "format": "URL",
          "description": "The URL of the room's avatar image."
        },
        "is_direct": {
          "type": "boolean",
          "description": "Indicates whether the room is a direct (1:1) chat."
        },
        "members": {
          "type": "array",
          "description": "List of user IDs that are members of the room.",
          "items": {
            "$ref": "#/properties/user/properties/user_id"
          }
        },
        "power_levels": {
          "type": "object",
          "description": "Defines user power levels within the room.",
          "properties": {
            "users": {
              "type": "object",
              "description": "Mapping of user IDs to their power levels.",
              "additionalProperties": {
                "type": "integer",
                "minimum": 0
              }
            },
            "events": {
              "type": "object",
              "description": "Default power level required to send specific event types.",
              "additionalProperties": {
                "type": "integer",
                "minimum": 0
              }
            },
            "state_default": {
              "type": "integer",
              "minimum": 0,
              "description": "Default power level to send state events"
            },
            "events_default": {
              "type": "integer",
              "minimum": 0,
              "description": "Default power level to send message events"
            },
            "users_default": {
              "type": "integer",
              "minimum": 0,
              "description": "Default power level for users joining the room"
            },
            "invite": {
              "type": "integer",
              "minimum": 0,
              "description": "Power level required to invite users"
            },
            "kick": {
              "type": "integer",
              "minimum": 0,
              "description": "Power level required to kick users"
            },
            "ban": {
              "type": "integer",
              "minimum": 0,
              "description": "Power level required to ban users"
            },
            "redact": {
              "type": "integer",
              "minimum": 0,
              "description": "Power level required to redact events"
            }
          }
        }
      },
      "required": [
        "room_id"
      ]
    },
    "event": {
      "type": "object",
      "description": "Represents an event (message, state change, etc.) in a Matrix room.",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique ID of the event."
        },
        "sender": {
          "$ref": "#/properties/user/properties/user_id",
          "description": "The user ID of the event sender."
        },
        "origin_server_ts": {
          "type": "integer",
          "format": "int64",
          "description": "Timestamp (milliseconds since epoch) when the event was sent by the origin server."
        },
        "room_id": {
          "$ref": "#/properties/room/properties/room_id",
          "description": "The room ID where the event occurred."
        },
        "type": {
          "type": "string",
          "description": "The event type (e.g., m.room.message, m.room.name, etc.).",
          "enum": [
            "m.room.message",
            "m.room.name",
            "m.room.topic",
            "m.room.member",
            "m.room.create",
            "m.room.join_rules",
            "m.room.power_levels",
            "m.room.redaction",
            "m.room.avatar",
            "m.room.encryption",
            "m.room.canonical_alias",
            "m.sticker",
            "m.reaction"
          ]
        },
        "content": {
          "type": "object",
          "description": "The event content, which varies depending on the event type."
        },
        "unsigned": {
          "type": "object",
          "description": "Unsigned data relating to the event such as age"
        },
        "redacts": {
          "type": "string",
          "description": "For redaction events, the ID of the event being redacted"
        },
        "state_key": {
          "type": "string",
          "description": "State key, if this is a state event."
        }
      },
      "required": [
        "event_id",
        "sender",
        "origin_server_ts",
        "room_id",
        "type",
        "content"
      ],
      "oneOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "m.room.message"
              }
            }
          },
          "then": {
            "properties": {
              "content": {
                "type": "object",
                "properties": {
                  "msgtype": {
                    "type": "string",
                    "description": "The message type (e.g., m.text, m.image, m.file, etc.).",
                    "enum": [
                      "m.text",
                      "m.emote",
                      "m.notice",
                      "m.image",
                      "m.file",
                      "m.audio",
                      "m.location",
                      "m.video"
                    ]
                  },
                  "body": {
                    "type": "string",
                    "description": "The body of the message (text content)."
                  },
                  "url": {
                    "type": "string",
                    "format": "URL",
                    "description": "URL of the media (for image, file, audio, video types)."
                  },
                  "info": {
                    "type": "object",
                    "description": "Additional information about the media (size, mimetype, etc.)."
                  }
                },
                "required": [
                  "msgtype",
                  "body"
                ]
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "m.room.member"
              }
            }
          },
          "then": {
            "properties": {
              "content": {
                "type": "object",
                "properties": {
                  "membership": {
                    "type": "string",
                    "enum": [
                      "invite",
                      "join",
                      "leave",
                      "ban",
                      "knock"
                    ],
                    "description": "The membership state of the user."
                  },
                  "displayname": {
                    "type": "string",
                    "description": "The user's display name at the time of the event."
                  },
                  "avatar_url": {
                    "type": "string",
                    "format": "URL",
                    "description": "The user's avatar URL at the time of the event."
                  }
                },
                "required": [
                  "membership"
                ]
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "enum": [
                  "m.room.name",
                  "m.room.topic",
                  "m.room.avatar",
                  "m.room.create",
                  "m.room.join_rules",
                  "m.room.power_levels",
                  "m.room.encryption",
                  "m.room.canonical_alias"
                ]
              }
            }
          },
          "then": {
            "properties": {
              "state_key": {
                "type": "string",
                "description": "A unique key to identify the state. Often empty for m.room.create",
                "maxLength": 255
              }
            },
            "required": [
              "state_key"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "m.reaction"
              }
            }
          },
          "then": {
            "properties": {
              "content": {
                "type": "object",
                "properties": {
                  "m.relates_to": {
                    "type": "object",
                    "properties": {
                      "rel_type": {
                        "type": "string",
                        "const": "m.annotation"
                      },
                      "event_id": {
                        "type": "string"
                      },
                      "key": {
                        "type": "string",
                        "description": "The reaction (e.g. an emoji)"
                      }
                    },
                    "required": [
                      "rel_type",
                      "event_id",
                      "key"
                    ]
                  }
                },
                "required": [
                  "m.relates_to"
                ]
              }
            },
            "required": [
              "content"
            ]
          }
        }
      ]
    },
    "space": {
      "type": "object",
      "description": "Represents a space, which is a hierarchical collection of rooms and subspaces.",
      "properties": {
        "room_id": {
          "$ref": "#/properties/room/properties/room_id",
          "description": "The room ID that represents the space."
        },
        "name": {
          "type": "string",
          "description": "The name of the space."
        },
        "children": {
          "type": "array",
          "description": "List of room IDs and space IDs that are children of this space.",
          "items": {
            "type": "string",
            "description": "Room ID or space ID",
            "pattern": "^[#|!][^:]+:[^:]+$"
          }
        }
      },
      "required": [
        "room_id"
      ]
    }
  },
  "required": []
}{
  "type": "object",
  "title": "Facebook",
  "description": "A simplified JSON Schema representation of Facebook's core features.",
  "properties": {
    "users": {
      "type": "array",
      "description": "List of Facebook users.",
      "items": {
        "$ref": "#/definitions/user"
      }
    },
    "posts": {
      "type": "array",
      "description": "List of Facebook posts.",
      "items": {
        "$ref": "#/definitions/post"
      }
    },
    "groups": {
      "type": "array",
      "description": "List of Facebook groups.",
      "items": {
        "$ref": "#/definitions/group"
      }
    },
    "pages": {
      "type": "array",
      "description": "List of Facebook pages.",
      "items": {
        "$ref": "#/definitions/page"
      }
    },
    "events": {
      "type": "array",
      "description": "List of Facebook events.",
      "items": {
        "$ref": "#/definitions/event"
      }
    },
    "messages": {
      "type": "array",
      "description": "List of private messages.",
      "items": {
        "$ref": "#/definitions/message"
      }
    },
    "ads": {
      "type": "array",
      "description": "List of Facebook ads.",
      "items": {
        "$ref": "#/definitions/ad"
      }
    },
    "marketplace_listings": {
      "type": "array",
      "description": "List of Facebook Marketplace listings.",
      "items": {
        "$ref": "#/definitions/marketplaceListing"
      }
    }
  },
  "definitions": {
    "user": {
      "type": "object",
      "description": "A Facebook user.",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the user."
        },
        "first_name": {
          "type": "string",
          "description": "User's first name."
        },
        "last_name": {
          "type": "string",
          "description": "User's last name."
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "User's email address."
        },
        "password": {
          "type": "string",
          "description": "User's password (hashed and salted in a real system)."
        },
        "profile_picture": {
          "type": "string",
          "format": "URL",
          "description": "URL to the user's profile picture."
        },
        "friends": {
          "type": "array",
          "description": "List of user IDs who are friends with this user.",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "groups": {
          "type": "array",
          "description": "List of group IDs the user is a member of.",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "pages_liked": {
          "type": "array",
          "description": "List of page IDs the user has liked.",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "date_of_birth": {
          "type": "string",
          "format": "date",
          "description": "User's date of birth."
        },
        "location": {
          "$ref": "#/definitions/location"
        },
        "bio": {
          "type": "string",
          "description": "Short biography of the user."
        },
        "joined_date": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the user joined Facebook."
        }
      },
      "required": [
        "id",
        "first_name",
        "last_name",
        "email",
        "password"
      ]
    },
    "post": {
      "type": "object",
      "description": "A post on Facebook.",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the post."
        },
        "author_id": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the user who created the post."
        },
        "content": {
          "type": "string",
          "description": "Text content of the post."
        },
        "media": {
          "type": "array",
          "description": "List of media attachments (photos, videos, etc.).",
          "items": {
            "$ref": "#/definitions/media"
          }
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the post was created."
        },
        "likes": {
          "type": "array",
          "description": "List of user IDs who liked the post.",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "comments": {
          "type": "array",
          "description": "List of comments on the post.",
          "items": {
            "$ref": "#/definitions/comment"
          }
        },
        "shares": {
          "type": "array",
          "description": "List of user IDs who shared the post. In reality, this would likely be a more complex structure to handle different types of shares",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "privacy": {
          "type": "string",
          "enum": [
            "public",
            "friends",
            "friends_except",
            "only_me",
            "custom"
          ],
          "description": "Privacy setting of the post."
        },
        "location": {
          "$ref": "#/definitions/location"
        }
      },
      "required": [
        "id",
        "author_id",
        "content",
        "timestamp"
      ]
    },
    "comment": {
      "type": "object",
      "description": "A comment on a post.",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the comment."
        },
        "author_id": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the user who wrote the comment."
        },
        "content": {
          "type": "string",
          "description": "Text content of the comment."
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the comment was created."
        },
        "likes": {
          "type": "array",
          "description": "List of user IDs who liked the comment.",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "required": [
        "id",
        "author_id",
        "content",
        "timestamp"
      ]
    },
    "group": {
      "type": "object",
      "description": "A Facebook group.",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the group."
        },
        "name": {
          "type": "string",
          "description": "Name of the group."
        },
        "description": {
          "type": "string",
          "description": "Description of the group."
        },
        "admin_ids": {
          "type": "array",
          "description": "List of user IDs who are administrators of the group.",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "members": {
          "type": "array",
          "description": "List of user IDs who are members of the group.",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "posts": {
          "type": "array",
          "description": "List of post IDs that belong to this group.",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "privacy": {
          "type": "string",
          "enum": [
            "public",
            "closed",
            "secret"
          ],
          "description": "Privacy setting of the group."
        },
        "cover_photo": {
          "type": "string",
          "format": "URL",
          "description": "URL to the group's cover photo."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the group was created"
        }
      },
      "required": [
        "id",
        "name",
        "admin_ids",
        "members"
      ]
    },
    "page": {
      "type": "object",
      "description": "A Facebook page.",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the page."
        },
        "name": {
          "type": "string",
          "description": "Name of the page."
        },
        "description": {
          "type": "string",
          "description": "Description of the page."
        },
        "category": {
          "type": "string",
          "description": "Category of the page (e.g., Business, Brand, Public Figure)."
        },
        "admin_ids": {
          "type": "array",
          "description": "List of user IDs who are administrators of the page.",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "likes": {
          "type": "integer",
          "description": "Number of likes the page has received."
        },
        "followers": {
          "type": "integer",
          "description": "Number of followers the page has"
        },
        "posts": {
          "type": "array",
          "description": "List of post IDs that belong to this page.",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "cover_photo": {
          "type": "string",
          "format": "URL",
          "description": "URL to the page's cover photo."
        },
        "profile_picture": {
          "type": "string",
          "format": "URL",
          "description": "URL to the page's profile picture."
        },
        "website": {
          "type": "string",
          "format": "URL",
          "description": "Website URL associated with the page."
        },
        "phone": {
          "type": "string",
          "description": "Phone number associated with the page."
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "Email associated with the page."
        },
        "location": {
          "$ref": "#/definitions/location"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the page was created"
        }
      },
      "required": [
        "id",
        "name",
        "admin_ids"
      ]
    },
    "event": {
      "type": "object",
      "description": "A Facebook event.",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the event."
        },
        "name": {
          "type": "string",
          "description": "Name of the event."
        },
        "description": {
          "type": "string",
          "description": "Description of the event."
        },
        "organizer_id": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the user or page organizing the event."
        },
        "start_time": {
          "type": "string",
          "format": "date-time",
          "description": "Start time of the event."
        },
        "end_time": {
          "type": "string",
          "format": "date-time",
          "description": "End time of the event."
        },
        "location": {
          "$ref": "#/definitions/location"
        },
        "privacy": {
          "type": "string",
          "enum": [
            "public",
            "private",
            "group"
          ],
          "description": "Privacy setting of the event."
        },
        "attendees": {
          "type": "array",
          "description": "List of user IDs who are attending the event.",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "interested": {
          "type": "array",
          "description": "List of user IDs who are interested in the event.",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "cover_photo": {
          "type": "string",
          "format": "URL",
          "description": "URL to the event's cover photo."
        }
      },
      "required": [
        "id",
        "name",
        "organizer_id",
        "start_time"
      ]
    },
    "message": {
      "type": "object",
      "description": "A private message between users.",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the message."
        },
        "sender_id": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the user who sent the message."
        },
        "recipient_id": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the user who received the message."
        },
        "content": {
          "type": "string",
          "description": "Text content of the message."
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the message was sent."
        },
        "is_read": {
          "type": "boolean",
          "description": "Whether the message has been read by the recipient."
        }
      },
      "required": [
        "id",
        "sender_id",
        "recipient_id",
        "content",
        "timestamp"
      ]
    },
    "media": {
      "type": "object",
      "description": "Represents a media item (photo, video).",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "photo",
            "video"
          ],
          "description": "Type of media."
        },
        "url": {
          "type": "string",
          "format": "URL",
          "description": "URL to the media file."
        },
        "caption": {
          "type": "string",
          "description": "Optional caption for the media."
        }
      },
      "required": [
        "type",
        "url"
      ]
    },
    "location": {
      "type": "object",
      "description": "Represents a geographic location.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the location (e.g., city, place)."
        },
        "latitude": {
          "type": "number",
          "format": "float",
          "description": "Latitude coordinate."
        },
        "longitude": {
          "type": "number",
          "format": "float",
          "description": "Longitude coordinate."
        },
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        }
      },
      "required": [
        "latitude",
        "longitude"
      ]
    },
    "ad": {
      "type": "object",
      "description": "Represents a Facebook ad.",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the ad."
        },
        "page_id": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the page associated with the ad."
        },
        "headline": {
          "type": "string",
          "description": "Headline of the ad."
        },
        "body": {
          "type": "string",
          "description": "Body text of the ad."
        },
        "image_url": {
          "type": "string",
          "format": "URL",
          "description": "URL to the ad image."
        },
        "call_to_action": {
          "type": "string",
          "description": "Call to action text (e.g., 'Learn More', 'Shop Now')."
        },
        "target_audience": {
          "$ref": "#/definitions/targetAudience"
        },
        "budget": {
          "type": "number",
          "format": "float",
          "description": "Budget allocated for the ad."
        },
        "start_date": {
          "type": "string",
          "format": "date",
          "description": "Start date of the ad campaign."
        },
        "end_date": {
          "type": "string",
          "format": "date",
          "description": "End date of the ad campaign."
        },
        "clicks": {
          "type": "integer",
          "description": "Number of clicks on the ad."
        },
        "impressions": {
          "type": "integer",
          "description": "Number of times the ad was displayed."
        }
      },
      "required": [
        "id",
        "page_id",
        "headline",
        "body",
        "target_audience"
      ]
    },
    "targetAudience": {
      "type": "object",
      "description": "Represents the target audience for an ad.",
      "properties": {
        "locations": {
          "type": "array",
          "description": "List of target locations.",
          "items": {
            "$ref": "#/definitions/location"
          }
        },
        "age_min": {
          "type": "integer",
          "description": "Minimum age of the target audience."
        },
        "age_max": {
          "type": "integer",
          "description": "Maximum age of the target audience."
        },
        "genders": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "male",
              "female"
            ]
          },
          "description": "Target genders."
        },
        "interests": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of interests for targeting."
        },
        "behaviors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of behaviors for targeting."
        },
        "connections": {
          "type": "string",
          "enum": [
            "all",
            "people_who_like_your_page",
            "friends_of_people_who_like_your_page"
          ]
        }
      },
      "required": []
    },
    "marketplaceListing": {
      "type": "object",
      "description": "A listing on Facebook Marketplace.",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the listing."
        },
        "seller_id": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the user selling the item."
        },
        "title": {
          "type": "string",
          "description": "Title of the listing."
        },
        "description": {
          "type": "string",
          "description": "Description of the item."
        },
        "price": {
          "type": "number",
          "format": "float",
          "description": "Price of the item."
        },
        "currency": {
          "type": "string",
          "description": "Currency code (e.g., USD, EUR)."
        },
        "category": {
          "type": "string",
          "description": "Category of the item."
        },
        "condition": {
          "type": "string",
          "enum": [
            "new",
            "used_like_new",
            "used_good",
            "used_fair"
          ],
          "description": "Condition of the item."
        },
        "photos": {
          "type": "array",
          "description": "List of URLs to photos of the item.",
          "items": {
            "type": "string",
            "format": "URL"
          }
        },
        "location": {
          "$ref": "#/definitions/location"
        },
        "availability": {
          "type": "string",
          "enum": [
            "in_stock",
            "out_of_stock",
            "pending",
            "sold"
          ],
          "description": "Availability of the item."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the listing was created."
        }
      },
      "required": [
        "id",
        "seller_id",
        "title",
        "description",
        "price",
        "currency",
        "category",
        "condition",
        "photos",
        "location",
        "availability"
      ]
    }
  }
}{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Facebook Messenger Schema",
  "description": "A JSON Schema representing the core data structures of Facebook Messenger.",
  "type": "object",
  "properties": {
    "users": {
      "type": "array",
      "description": "List of users within the Messenger ecosystem.",
      "items": {
        "$ref": "#/definitions/user"
      }
    },
    "conversations": {
      "type": "array",
      "description": "List of conversations (threads).",
      "items": {
        "$ref": "#/definitions/conversation"
      }
    },
    "messages": {
      "type": "array",
      "description": "List of all messages.",
      "items": {
        "$ref": "#/definitions/message"
      }
    },
    "groups": {
      "type": "array",
      "description": "List of group conversations.",
      "items": {
        "$ref": "#/definitions/group"
      }
    }
  },
  "definitions": {
    "user": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the user."
        },
        "first_name": {
          "type": "string",
          "description": "User's first name."
        },
        "last_name": {
          "type": "string",
          "description": "User's last name."
        },
        "profile_picture": {
          "type": "string",
          "format": "URL",
          "description": "URL to the user's profile picture."
        },
        "is_online": {
          "type": "boolean",
          "description": "Indicates if the user is currently online."
        }
      },
      "required": [
        "id",
        "first_name",
        "last_name"
      ]
    },
    "conversation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the conversation."
        },
        "participants": {
          "type": "array",
          "description": "List of user IDs participating in the conversation.",
          "items": {
            "type": "string",
            "format": "uuid"
          },
          "minItems": 2
        },
        "last_message": {
          "$ref": "#/definitions/message",
          "description": "The most recent message in the conversation."
        },
        "unread_count": {
          "type": "integer",
          "minimum": 0,
          "description": "Number of unread messages in the conversation."
        }
      },
      "required": [
        "id",
        "participants"
      ]
    },
    "message": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the message."
        },
        "conversation_id": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the conversation this message belongs to."
        },
        "sender_id": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the user who sent the message."
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of when the message was sent."
        },
        "content": {
          "type": "object",
          "description": "Content of the message.",
          "oneOf": [
            {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["text"]
                },
                "text": {
                  "type": "string",
                  "description": "Text content of the message."
                }
              },
              "required": [
                "type",
                "text"
              ]
            },
            {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["image"]
                },
                "url": {
                  "type": "string",
                  "format": "URL",
                  "description": "URL to the image."
                }
              },
              "required": [
                "type",
                "url"
              ]
            },
            {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["video"]
                },
                "url": {
                  "type": "string",
                  "format": "URL",
                  "description": "URL to the video."
                }
              },
              "required": [
                "type",
                "url"
              ]
            },
            {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["audio"]
                },
                "url": {
                  "type": "string",
                  "format": "URL",
                  "description": "URL to the audio file."
                }
              },
              "required": [
                "type",
                "url"
              ]
            },
            {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["file"]
                },
                "url": {
                  "type": "string",
                  "format": "URL",
                  "description": "URL to the file."
                },
                "filename": {
                  "type": "string"
                }
              },
              "required": [
                "type",
                "url",
                "filename"
              ]
            },
            {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["sticker"]
                },
                "sticker_id": {
                  "type": "string"
                }
              },
              "required": [
                "type",
                "sticker_id"
              ]
            },
            {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["reaction"]
                },
                "emoji": {
                  "type": "string",
                  "description": "Unicode emoji representing the reaction."
                },
                "target_message_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The ID of the message being reacted to"
                },
                "user_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The ID of the user who reacted"
                }
              },
              "required": [
                "type",
                "emoji",
                "target_message_id",
                "user_id"
              ]
            }
          ]
        },
        "is_read": {
          "type": "boolean",
          "description": "Indicates if the message has been read."
        }
      },
      "required": [
        "id",
        "conversation_id",
        "sender_id",
        "timestamp",
        "content"
      ]
    },
    "group": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the group."
        },
        "name": {
          "type": "string",
          "description": "Name of the group."
        },
        "members": {
          "type": "array",
          "description": "List of user IDs who are members of the group.",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "admins": {
          "type": "array",
          "description": "List of user IDs who are admins of the group.",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "group_conversation": {
          "$ref": "#/definitions/conversation",
          "description": "The corresponding conversation object for this group."
        }
      },
      "required": [
        "id",
        "members",
        "group_conversation"
      ]
    }
  }
}{
  "type": "object",
  "title": "FaceTime App Schema",
  "description": "JSON Schema representing the core data structures and functionality of a FaceTime-like application.",
  "properties": {
    "users": {
      "type": "array",
      "description": "List of registered users.",
      "items": {
        "$ref": "#/definitions/User"
      }
    },
    "calls": {
      "type": "array",
      "description": "List of active and past calls.",
      "items": {
        "$ref": "#/definitions/Call"
      }
    },
    "contacts": {
      "type": "array",
      "description": "List of user contacts, potentially pulled from device contacts.",
      "items": {
        "$ref": "#/definitions/Contact"
      }
    },
    "settings": {
      "type": "object",
      "description": "User-specific settings.",
      "properties": {
        "notifications": {
          "type": "boolean",
          "description": "Enable or disable call notifications.",
          "default": true
        },
        "dataUsage": {
          "type": "string",
          "enum": [
            "auto",
            "low",
            "high"
          ],
          "description": "Data usage settings for calls.",
          "default": "auto"
        },
        "blockedContacts": {
          "type": "array",
          "description": "List of blocked contact identifiers.",
          "items": {
            "type": "string"
          }
        },
        "defaultCamera": {
          "type": "string",
          "enum": ["front", "rear"],
          "description": "Default camera to use when starting a call",
          "default": "front"
        },
        "defaultMic": {
          "type": "boolean",
          "description": "Default state for microphone (enabled/disabled) at start of call.",
          "default": true
        }
      },
      "additionalProperties": false
    }
  },
  "required": [
    "users",
    "calls",
    "contacts"
  ],
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the user."
        },
        "phoneNumber": {
          "type": "string",
          "format": "e164",
          "description": "User's phone number (E.164 format)."
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "User's email address."
        },
        "firstName": {
          "type": "string",
          "description": "User's first name."
        },
        "lastName": {
          "type": "string",
          "description": "User's last name."
        },
        "profilePictureUrl": {
          "type": "string",
          "format": "URL",
          "description": "URL to the user's profile picture."
        },
        "status": {
          "type": "string",
          "enum": [
            "available",
            "away",
            "busy",
            "offline"
          ],
          "description": "Current availability status of the user.",
          "default": "offline"
        }
      },
      "required": [
        "userId",
        "phoneNumber"
      ]
    },
    "Call": {
      "type": "object",
      "properties": {
        "callId": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the call."
        },
        "participants": {
          "type": "array",
          "description": "List of participants in the call.",
          "items": {
            "$ref": "#/definitions/Participant"
          },
          "minItems": 2
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp indicating when the call started."
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp indicating when the call ended."
        },
        "status": {
          "type": "string",
          "enum": [
            "ringing",
            "inProgress",
            "ended",
            "missed",
            "declined",
            "failed"
          ],
          "description": "Current status of the call."
        },
        "callType": {
          "type": "string",
          "enum": [
            "audio",
            "video"
          ],
          "description": "Type of the call."
        }
      },
      "required": [
        "callId",
        "participants",
        "startTime",
        "status",
        "callType"
      ]
    },
    "Participant": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "format": "uuid",
          "description": "Identifier of the user participating in the call."
        },
        "status": {
          "type": "string",
          "enum": [
            "invited",
            "joined",
            "left",
            "declined"
          ],
          "description": "Status of the participant in the call."
        },
        "joinedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time when participant joined the call."
        },
        "leftAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time when participant left the call."
        }
      },
      "required": [
        "userId",
        "status"
      ]
    },
    "Contact": {
      "type": "object",
      "properties": {
        "contactId": {
          "type": "string",
          "description": "Unique identifier for the contact (can be from device contacts)."
        },
        "displayName": {
          "type": "string",
          "description": "Display name of the contact."
        },
        "phoneNumber": {
          "type": "string",
          "format": "e164",
          "description": "Contact's phone number (E.164 format)."
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "Contact's email address"
        },
        "isFaceTimeUser": {
          "type": "boolean",
          "description": "Indicates whether this contact is also a registered FaceTime user."
        },
        "profilePictureUrl": {
          "type": "string",
          "format": "url",
          "description": "URL to the contact's profile picture (if available)."
        }
      },
      "required": [
        "contactId",
        "displayName",
        "phoneNumber"
      ]
    }
  }
}{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "GiveSendGo App",
  "description": "JSON Schema for a simplified GiveSendGo-like application.",
  "type": "object",
  "properties": {
    "users": {
      "type": "array",
      "description": "List of users",
      "items": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "integer",
            "description": "Unique identifier for the user",
            "readOnly": true
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "password": {
            "type": "string",
            "description": "User's password (hashed in a real application)",
            "writeOnly": true
          },
          "first_name": {
            "type": "string",
            "description": "User's first name"
          },
          "last_name": {
            "type": "string",
            "description": "User's last name"
          },
          "profile_picture_url": {
            "type": "string",
            "format": "URL",
            "description": "URL to user's profile picture"
          }
        },
        "required": [
          "email",
          "password",
          "first_name",
          "last_name"
        ]
      }
    },
    "campaigns": {
      "type": "array",
      "description": "List of fundraising campaigns",
      "items": {
        "type": "object",
        "properties": {
          "campaign_id": {
            "type": "integer",
            "description": "Unique identifier for the campaign",
            "readOnly": true
          },
          "user_id": {
            "type": "integer",
            "description": "ID of the user who created the campaign"
          },
          "title": {
            "type": "string",
            "description": "Title of the campaign",
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the campaign"
          },
          "goal_amount": {
            "type": "number",
            "format": "float",
            "description": "Target amount to be raised",
            "minimum": 0
          },
          "amount_raised": {
            "type": "number",
            "format": "float",
            "description": "Current amount raised",
            "minimum": 0,
            "readOnly": true
          },
          "category": {
            "type": "string",
            "description": "Category of the campaign (e.g., Medical, Memorial, Mission)",
            "enum": [
              "Medical",
              "Memorial",
              "Mission",
              "Emergency",
              "Nonprofit",
              "Education",
              "Adoption",
              "Other"
            ]
          },
          "location": {
            "type": "string",
            "description": "Location related to the campaign (e.g., city, state)"
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the campaign was started",
            "readOnly": true
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the campaign is scheduled to end (optional)"
          },
          "image_url": {
            "type": "string",
            "format": "URL",
            "description": "URL to the main image for the campaign"
          },
          "video_url": {
            "type": "string",
            "format": "URL",
            "description": "URL to a video related to the campaign (optional)"
          },
          "updates": {
            "type": "array",
            "description": "List of updates for the campaign",
            "items": {
              "type": "object",
              "properties": {
                "update_id": {
                  "type": "integer",
                  "description": "Unique identifier for the update",
                  "readOnly": true
                },
                "campaign_id": {
                  "type": "integer",
                  "description": "Campaign that this update belongs to",
                  "readOnly": true
                },
                "user_id": {
                  "type": "integer",
                  "description": "ID of user that posted the update",
                  "readOnly": true
                },
                "title": {
                  "type": "string",
                  "description": "Title of the update",
                  "maxLength": 255
                },
                "content": {
                  "type": "string",
                  "description": "Content of the update"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date and time when the update was created",
                  "readOnly": true
                }
              },
              "required": [
                "campaign_id",
                "user_id",
                "title",
                "content"
              ]
            }
          },
          "is_active": {
            "type": "boolean",
            "description": "Indicates if the campaign is currently active",
            "default": true
          }
        },
        "required": [
          "user_id",
          "title",
          "description",
          "goal_amount",
          "category"
        ]
      }
    },
    "donations": {
      "type": "array",
      "description": "List of donations made",
      "items": {
        "type": "object",
        "properties": {
          "donation_id": {
            "type": "integer",
            "description": "Unique identifier for the donation",
            "readOnly": true
          },
          "campaign_id": {
            "type": "integer",
            "description": "ID of the campaign being donated to"
          },
          "user_id": {
            "type": "integer",
            "description": "ID of the user making the donation (optional if anonymous)"
          },
          "amount": {
            "type": "number",
            "format": "float",
            "description": "Amount donated",
            "minimum": 0.01
          },
          "donation_date": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the donation was made",
            "readOnly": true
          },
          "is_anonymous": {
            "type": "boolean",
            "description": "Indicates if the donation is anonymous",
            "default": false
          },
          "comment": {
            "type": "string",
            "description": "Optional comment from the donor"
          },
          "payment_method": {
            "type": "string",
            "description": "Information about the payment method used (e.g., Credit Card, PayPal)",
            "enum": [
              "Credit Card",
              "Debit Card",
              "PayPal",
              "Other"
            ]
          },
          "transaction_id": {
            "type": "string",
            "description": "Unique identifier for transaction provided by the payment processor"
          }
        },
        "required": [
          "campaign_id",
          "amount",
          "payment_method",
          "transaction_id"
        ]
      }
    }
  },
  "required": [
    "users",
    "campaigns",
    "donations"
  ]
}{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Google Docs Document",
  "description": "JSON Schema for a simplified representation of a Google Docs document.",
  "type": "object",
  "properties": {
    "documentId": {
      "type": "string",
      "description": "Unique identifier for the document.",
      "pattern": "^[a-zA-Z0-9_-]+$"
    },
    "title": {
      "type": "string",
      "description": "Title of the document."
    },
    "body": {
      "type": "object",
      "description": "Main content of the document.",
      "properties": {
        "content": {
          "type": "array",
          "description": "An array of structural elements that make up the document.",
          "items": {
            "oneOf": [
              { "$ref": "#/definitions/paragraph" },
              { "$ref": "#/definitions/table" },
              { "$ref": "#/definitions/image" },
              { "$ref": "#/definitions/horizontalRule" },
              { "$ref": "#/definitions/pageBreak" },
              { "$ref": "#/definitions/list" }
            ]
          }
        }
      },
      "required": [
        "content"
      ]
    },
    "revisionId": {
      "type": "string",
      "description": "Identifier representing the current revision of the document.",
      "pattern": "^[a-zA-Z0-9_-]+$"
    },
    "suggestionsViewMode": {
      "type": "string",
      "description": "The mode in which suggestions are viewed (e.g., SUGGESTIONS_INLINE, SUGGESTIONS_DISABLED).",
      "enum": ["SUGGESTIONS_INLINE", "SUGGESTIONS_DISABLED", "PREVIEW_WITHOUT_SUGGESTIONS"]
    },
    "inlineObjects": {
      "type": "object",
      "description": "Collection of inline objects (e.g., images, embedded objects) referenced within the document.",
      "additionalProperties": {
        "type": "object",
        "properties": {
          "inlineObjectProperties": {
            "type": "object",
            "properties": {
              "embeddedObject": {
                "type": "object",
                "$ref": "#/definitions/embeddedObject"
              }
            }
          }
        }
      }
    },
    "namedStyles": {
      "type": "object",
      "description": "A collection of named styles that can be applied to content.",
      "properties": {
        "styles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/namedStyle"
          }
        }
      }
    },
    "lists": {
      "type": "object",
      "description": "A collection of lists used in the document, keyed by list ID.",
      "additionalProperties": {
        "$ref": "#/definitions/listDefinition"
      }
    }
  },
  "required": [
    "body"
  ],
  "definitions": {
    "paragraph": {
      "type": "object",
      "description": "A paragraph element.",
      "properties": {
        "paragraphStyle": {
          "$ref": "#/definitions/paragraphStyle"
        },
        "elements": {
          "type": "array",
          "description": "An array of content elements within the paragraph.",
          "items": {
            "oneOf": [
              { "$ref": "#/definitions/textRun" },
              { "$ref": "#/definitions/inlineObjectElement" },
              { "$ref": "#/definitions/footnoteReference" },
              { "$ref": "#/definitions/equation" }
            ]
          }
        },
        "bullet": {
          "type": "object",
          "description": "Bullet properties if the paragraph is part of a list.",
          "properties": {
            "listId": {
              "type": "string",
              "description": "The ID of the list this paragraph belongs to."
            },
            "nestingLevel": {
              "type": "integer",
              "description": "The nesting level of the bullet (0-based)."
            }
          }
        }
      },
      "required": [
        "elements"
      ]
    },
    "textRun": {
      "type": "object",
      "description": "A run of text with consistent styling.",
      "properties": {
        "content": {
          "type": "string",
          "description": "The text content."
        },
        "textStyle": {
          "$ref": "#/definitions/textStyle"
        }
      },
      "required": [
        "content"
      ]
    },
    "inlineObjectElement": {
      "type": "object",
      "description": "Represents an inline object within the document content, such as an image or an embedded drawing.",
      "properties": {
        "inlineObjectId": {
          "type": "string",
          "description": "The ID that uniquely identifies this inline object within the document."
        },
        "textStyle": {
          "$ref": "#/definitions/textStyle"
        }
      },
      "required": [
        "inlineObjectId"
      ]
    },
    "footnoteReference": {
      "type": "object",
      "description": "Represents a reference to a footnote.",
      "properties": {
        "footnoteId": {
          "type": "string",
          "description": "The ID of the footnote to which this reference points."
        },
        "footnoteNumber": {
          "type": "string",
          "description": "The formatted number of the footnote, used for display purposes."
        },
        "textStyle": {
          "$ref": "#/definitions/textStyle"
        }
      },
      "required": [
        "footnoteId",
        "footnoteNumber"
      ]
    },
    "equation": {
      "type": "object",
      "description": "Represents an inline equation.",
      "properties": {
        "content": {
          "type": "string",
          "description": "The equation content, potentially using a specific format like LaTeX."
        }
      }
    },
    "textStyle": {
      "type": "object",
      "description": "Styling properties for text.",
      "properties": {
        "bold": {
          "type": "boolean",
          "description": "Whether the text is bold."
        },
        "italic": {
          "type": "boolean",
          "description": "Whether the text is italic."
        },
        "underline": {
          "type": "boolean",
          "description": "Whether the text is underlined."
        },
        "strikethrough": {
          "type": "boolean",
          "description": "Whether the text is struck through."
        },
        "smallCaps": {
          "type": "boolean",
          "description": "Whether the text is in small caps."
        },
        "fontSize": {
          "$ref": "#/definitions/dimension"
        },
        "weightedFontFamily": {
          "type": "object",
          "properties": {
            "fontFamily": {
              "type": "string",
              "description": "The font family, e.g., \"Arial\" or \"Times New Roman\"."
            },
            "weight": {
              "type": "integer",
              "description": "The font weight. This is a numerical value in the range [100, 900], with 400 being normal and 700 being bold."
            }
          }
        },
        "backgroundColor": {
          "$ref": "#/definitions/optionalColor"
        },
        "foregroundColor": {
          "$ref": "#/definitions/optionalColor"
        },
        "link": {
          "type": "object",
          "description": "Represents a hyperlink.",
          "properties": {
            "url": {
              "type": "string",
              "description": "The URL the link points to.",
              "format": "URL"
            }
          }
        },
        "baselineOffset": {
          "type": "string",
          "enum": ["NONE", "SUPERSCRIPT", "SUBSCRIPT"]
        }
      }
    },
    "paragraphStyle": {
      "type": "object",
      "description": "Styling properties for a paragraph.",
      "properties": {
        "namedStyleType": {
          "type": "string",
          "enum": [
            "NORMAL_TEXT",
            "TITLE",
            "SUBTITLE",
            "HEADING_1",
            "HEADING_2",
            "HEADING_3",
            "HEADING_4",
            "HEADING_5",
            "HEADING_6"
          ]
        },
        "alignment": {
          "type": "string",
          "enum": [
            "START",
            "CENTER",
            "END",
            "JUSTIFIED"
          ]
        },
        "direction": {
          "type": "string",
          "enum": [
            "LEFT_TO_RIGHT",
            "RIGHT_TO_LEFT"
          ]
        },
        "lineSpacing": {
          "type": "number",
          "description": "The amount of space between lines, as a multiple of the default line height. Value of 1.0 represents single spacing, 1.15 represents 15% extra space, 2.0 represents double spacing."
        },
        "spaceAbove": {
          "$ref": "#/definitions/dimension"
        },
        "spaceBelow": {
          "$ref": "#/definitions/dimension"
        },
        "borderBetween": {
          "$ref": "#/definitions/paragraphBorder"
        },
        "borderTop": {
          "$ref": "#/definitions/paragraphBorder"
        },
        "borderBottom": {
          "$ref": "#/definitions/paragraphBorder"
        },
        "borderLeft": {
          "$ref": "#/definitions/paragraphBorder"
        },
        "borderRight": {
          "$ref": "#/definitions/paragraphBorder"
        },
        "indentFirstLine": {
          "$ref": "#/definitions/dimension"
        },
        "indentStart": {
          "$ref": "#/definitions/dimension"
        },
        "indentEnd": {
          "$ref": "#/definitions/dimension"
        },
        "spacingMode": {
          "type": "string",
          "enum": [
            "NEVER_COLLAPSE",
            "COLLAPSE_LISTS"
          ]
        },
        "keepLinesTogether": {
          "type": "boolean"
        },
        "keepWithNext": {
          "type": "boolean"
        },
        "avoidWidowAndOrphan": {
          "type": "boolean"
        },
        "shading": {
          "type": "object",
          "properties": {
            "backgroundColor": {
              "$ref": "#/definitions/optionalColor"
            }
          }
        }
      }
    },
    "paragraphBorder": {
      "type": "object",
      "properties": {
        "color": {
          "$ref": "#/definitions/optionalColor"
        },
        "width": {
          "$ref": "#/definitions/dimension"
        },
        "padding": {
          "$ref": "#/definitions/dimension"
        },
        "dashStyle": {
          "type": "string",
          "enum": [
            "SOLID",
            "DOT",
            "DASH"
          ]
        }
      }
    },
    "dimension": {
      "type": "object",
      "description": "Represents a dimension, such as a font size or spacing.",
      "properties": {
        "magnitude": {
          "type": "number",
          "description": "The numerical value of the dimension."
        },
        "unit": {
          "type": "string",
          "description": "The unit of the dimension (e.g., PT for points).",
          "enum": ["PT"]
        }
      },
      "required": ["magnitude", "unit"]
    },
    "optionalColor": {
      "type": "object",
      "properties": {
        "color": {
          "type": "object",
          "oneOf": [
            { "$ref": "#/definitions/rgbColor" },
            { "$ref": "#/definitions/themeColor" }
          ]
        }
      }
    },
    "rgbColor": {
      "type": "object",
      "properties": {
        "red": {
          "type": "number",
          "minimum": 0,
          "maximum": 1
        },
        "green": {
          "type": "number",
          "minimum": 0,
          "maximum": 1
        },
        "blue": {
          "type": "number",
          "minimum": 0,
          "maximum": 1
        }
      }
    },
    "themeColor": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "DARK1",
            "LIGHT1",
            "DARK2",
            "LIGHT2",
            "ACCENT1",
            "ACCENT2",
            "ACCENT3",
            "ACCENT4",
            "ACCENT5",
            "ACCENT6",
            "LINK"
          ]
        }
      }
    },
    "table": {
      "type": "object",
      "description": "A table element.",
      "properties": {
        "rows": {
          "type": "array",
          "description": "An array of table rows.",
          "items": {
            "$ref": "#/definitions/tableRow"
          }
        },
        "columns": {
          "type": "integer",
          "description": "The number of columns in the table."
        },
        "tableStyle": {
          "type": "object",
          "description": "Styles applied to the entire table.",
          "properties": {
            "tableColumnProperties": {
              "type": "array",
              "description": "Properties for each column in the table.",
              "items": {
                "type": "object",
                "properties": {
                  "width": {
                    "$ref": "#/definitions/dimension"
                  },
                  "widthType": {
                    "type": "string",
                    "enum": ["EVENLY_DISTRIBUTED", "FIXED_WIDTH"]
                  }
                }
              }
            }
          }
        }
      },
      "required": [
        "rows",
        "columns"
      ]
    },
    "tableRow": {
      "type": "object",
      "description": "A row in a table.",
      "properties": {
        "cells": {
          "type": "array",
          "description": "An array of table cells in the row.",
          "items": {
            "$ref": "#/definitions/tableCell"
          }
        },
        "tableRowStyle": {
          "type": "object",
          "description": "Styles applied to the table row.",
          "properties": {
            "minRowHeight": {
              "$ref": "#/definitions/dimension"
            }
          }
        }
      },
      "required": [
        "cells"
      ]
    },
    "tableCell": {
      "type": "object",
      "description": "A cell within a table.",
      "properties": {
        "content": {
          "type": "array",
          "description": "Content within the cell (similar to body content).",
          "items": {
            "oneOf": [
              { "$ref": "#/definitions/paragraph" },
              { "$ref": "#/definitions/table" },
              { "$ref": "#/definitions/list" }
            ]
          }
        },
        "rowSpan": {
          "type": "integer",
          "description": "Number of rows this cell spans."
        },
        "columnSpan": {
          "type": "integer",
          "description": "Number of columns this cell spans."
        },
        "tableCellStyle": {
          "type": "object",
          "description": "Styles applied to the table cell.",
          "properties": {
            "backgroundColor": {
              "$ref": "#/definitions/optionalColor"
            },
            "borderLeft": {
              "$ref": "#/definitions/tableCellBorder"
            },
            "borderRight": {
              "$ref": "#/definitions/tableCellBorder"
            },
            "borderTop": {
              "$ref": "#/definitions/tableCellBorder"
            },
            "borderBottom": {
              "$ref": "#/definitions/tableCellBorder"
            },
            "paddingLeft": {
              "$ref": "#/definitions/dimension"
            },
            "paddingRight": {
              "$ref": "#/definitions/dimension"
            },
            "paddingTop": {
              "$ref": "#/definitions/dimension"
            },
            "paddingBottom": {
              "$ref": "#/definitions/dimension"
            },
            "contentAlignment": {
              "type": "string",
              "enum": [
                "CONTENT_ALIGNMENT_UNSPECIFIED",
                "TOP",
                "MIDDLE",
                "BOTTOM"
              ]
            }
          }
        }
      },
      "required": [
        "content"
      ]
    },
    "tableCellBorder": {
      "type": "object",
      "properties": {
        "color": {
          "$ref": "#/definitions/optionalColor"
        },
        "width": {
          "$ref": "#/definitions/dimension"
        },
        "dashStyle": {
          "type": "string",
          "enum": [
            "SOLID",
            "DOT",
            "DASH"
          ]
        }
      }
    },
    "image": {
      "type": "object",
      "description": "An image element.",
      "properties": {
        "contentUri": {
          "type": "string",
          "description": "URI of the image.",
          "format": "URL"
        },
        "properties": {
          "$ref": "#/definitions/imageProperties"
        }
      },
      "required": [
        "contentUri"
      ]
    },
    "imageProperties": {
      "type": "object",
      "properties": {
        "sourceUri": {
          "type": "string",
          "description": "The source URI of the image. This can differ from the `contentUri` if the image was fetched from a source URI but stored elsewhere.",
          "format": "URL"
        },
        "brightness": {
          "type": "number",
          "description": "The brightness setting for the image, in the range [-1.0, 1.0].",
          "minimum": -1,
          "maximum": 1
        },
        "contrast": {
          "type": "number",
          "description": "The contrast setting for the image, in the range [-1.0, 1.0].",
          "minimum": -1,
          "maximum": 1
        },
        "transparency": {
          "type": "number",
          "description": "The transparency setting for the image, in the range [0.0, 1.0].",
          "minimum": 0,
          "maximum": 1
        },
        "cropProperties": {
          "type": "object",
          "properties": {
            "angle": {
              "type": "number",
              "description": "The clockwise rotation angle of the crop rectangle around its center, in radians."
            },
            "offsetLeft": {
              "type": "number",
              "description": "The offset specifies how far inwards the left edge of the crop rectangle is from the left edge of the original content as a fraction of the original content's width."
            },
            "offsetRight": {
              "type": "number"
            },
            "offsetTop": {
              "type": "number"
            },
            "offsetBottom": {
              "type": "number"
            }
          }
        },
        "imageEffectRecolor": {
          "type": "object",
          "properties": {
            "recolorStops": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "color": {
                    "$ref": "#/definitions/optionalColor"
                  },
                  "alpha": {
                    "type": "number"
                  }
                }
              }
            }
          }
        }
      }
    },
    "horizontalRule": {
      "type": "object",
      "description": "A horizontal rule element."
    },
    "pageBreak": {
      "type": "object",
      "description": "A page break element."
    },
    "embeddedObject": {
      "type": "object",
      "description": "Represents an embedded object in the document, which could be an image, a drawing, or another type of object.",
      "properties": {
        "title": {
          "type": "string",
          "description": "The title of the embedded object."
        },
        "description": {
          "type": "string",
          "description": "The description of the embedded object."
        },
        "embeddedObjectBorder": {
          "type": "object",
          "description": "The border of the embedded object.",
          "$ref": "#/definitions/embeddedObjectBorder"
        },
        "size": {
          "type": "object",
          "description": "The size of the embedded object.",
          "$ref": "#/definitions/size"
        },
        "marginTop": {
          "$ref": "#/definitions/dimension"
        },
        "marginBottom": {
          "$ref": "#/definitions/dimension"
        },
        "marginLeft": {
          "$ref": "#/definitions/dimension"
        },
        "marginRight": {
          "$ref": "#/definitions/dimension"
        },
        "imageProperties": {
          "type": "object",
          "description": "The properties of the image if the embedded object is an image.",
          "$ref": "#/definitions/imageProperties"
        },
        "linkedContentReference": {
          "type": "object",
          "description": "A reference to the external linked content, if the embedded object is linked content.",
          "properties": {
            "spreadsheetId": {
              "type": "string",
              "description": "The ID of the linked spreadsheet, if the linked content is from Google Sheets."
            }
          }
        }
      }
    },
    "embeddedObjectBorder": {
      "type": "object",
      "properties": {
        "color": {
          "$ref": "#/definitions/optionalColor"
        },
        "width": {
          "$ref": "#/definitions/dimension"
        },
        "dashStyle": {
          "type": "string",
          "enum": [
            "SOLID",
            "DOT",
            "DASH"
          ]
        },
        "propertyState": {
          "type": "string",
          "enum": [
            "RENDERED",
            "NOT_RENDERED"
          ]
        }
      }
    },
    "size": {
      "type": "object",
      "properties": {
        "height": {
          "$ref": "#/definitions/dimension"
        },
        "width": {
          "$ref": "#/definitions/dimension"
        }
      }
    },
    "namedStyle": {
      "type": "object",
      "properties": {
        "namedStyleType": {
          "type": "string",
          "enum": [
            "NORMAL_TEXT",
            "TITLE",
            "SUBTITLE",
            "HEADING_1",
            "HEADING_2",
            "HEADING_3",
            "HEADING_4",
            "HEADING_5",
            "HEADING_6"
          ]
        },
        "textStyle": {
          "$ref": "#/definitions/textStyle"
        },
        "paragraphStyle": {
          "$ref": "#/definitions/paragraphStyle"
        }
      },
      "required": [
        "namedStyleType"
      ]
    },
    "list": {
      "type": "object",
      "properties": {
        "listId": {
          "type": "string"
        },
        "listProperties": {
          "$ref": "#/definitions/listProperties"
        }
      },
      "required": [
        "listId",
        "listProperties"
      ]
    },
    "listProperties": {
      "type": "object",
      "properties": {
        "nestingLevels": {
          "type": "array",
          "maxItems": 9,
          "items": {
            "$ref": "#/definitions/nestingLevel"
          }
        }
      },
      "required": [
        "nestingLevels"
      ]
    },
    "nestingLevel": {
      "type": "object",
      "properties": {
        "glyphType": {
          "type": "string",
          "enum": [
            "DECIMAL",
            "ZERO_DECIMAL",
            "UPPER_ALPHA",
            "ALPHA",
            "UPPER_ROMAN",
            "ROMAN",
            "GLYPH_TYPE_UNSPECIFIED"
          ]
        },
        "glyphFormat": {
          "type": "string"
        },
        "glyphSymbol": {
          "type": "string"
        },
        "startNumber": {
          "type": "integer"
        },
        "indentFirstLine": {
          "$ref": "#/definitions/dimension"
        },
        "indentStart": {
          "$ref": "#/definitions/dimension"
        },
        "textStyle": {
          "$ref": "#/definitions/textStyle"
        }
      }
    },
    "listDefinition": {
      "type": "object",
      "properties": {
        "listProperties": {
          "$ref": "#/definitions/listProperties"
        }
      },
      "required": [
        "listProperties"
      ]
    }
  }
}{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Google Search Response",
  "description": "A simplified JSON Schema representation of a Google Search response. This schema focuses on the core elements and common data structures, not covering every single attribute or edge case of the actual Google Search API. It aims to illustrate the structure and type of information returned.",
  "type": "object",
  "properties": {
    "searchMetadata": {
      "type": "object",
      "description": "Metadata about the search query and execution.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the search."
        },
        "status": {
          "type": "string",
          "description": "Status of the search (e.g., 'Success', 'Partial Success')."
        },
        "jsonEndpoint": {
          "type": "string",
          "format": "URL",
          "description": "URL to the full JSON response (if applicable)."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the search was executed."
        },
        "processedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the search was processed."
        },
        "totalTimeTaken": {
          "type": "number",
          "description": "Time taken to process the search, in seconds."
        },
        "engineUrl": {
          "type": "string",
          "format": "URL",
          "description": "URL of the search engine used."
        }
      },
      "required": [
        "id",
        "status",
        "createdAt",
        "processedAt"
      ]
    },
    "searchParameters": {
      "type": "object",
      "description": "Parameters used for the search query.",
      "properties": {
        "q": {
          "type": "string",
          "description": "The search query string."
        },
        "location": {
          "type": "string",
          "description": "Geographic location for the search."
        },
        "hl": {
          "type": "string",
          "description": "Interface language (e.g., 'en', 'es')."
        },
        "gl": {
          "type": "string",
          "description": "Google country domain (e.g., 'us', 'uk')."
        },
        "googleDomain": {
          "type": "string",
          "description": "Google domain used for the search."
        }
      },
      "required": [
        "q"
      ]
    },
    "searchInformation": {
      "type": "object",
      "description": "Information about the search results.",
      "properties": {
        "organicResultsState": {
          "type": "string",
          "description": "The state of the organic results (e.g., 'Results For', 'Showing Results For')."
        },
        "queryDisplayed": {
          "type": "string",
          "description": "The query as displayed by Google, possibly modified."
        },
        "totalResults": {
          "type": "string",
          "description": "Estimated total number of results (formatted string)."
        },
        "timeTaken": {
          "type": "string",
          "description": "Time taken to execute the search, as a string (e.g., '0.54 seconds')."
        },
        "spellingFix": {
          "type": "object",
          "description": "Spelling correction suggested by Google, if any.",
          "properties": {
            "original": {
              "type": "string",
              "description": "The original, potentially misspelled query."
            },
            "corrected": {
              "type": "string",
              "description": "The corrected query."
            }
          }
        }
      }
    },
    "organicResults": {
      "type": "array",
      "description": "List of organic search results.",
      "items": {
        "type": "object",
        "properties": {
          "position": {
            "type": "integer",
            "description": "Position of the result in the list."
          },
          "title": {
            "type": "string",
            "description": "Title of the result."
          },
          "link": {
            "type": "string",
            "format": "URL",
            "description": "URL of the result."
          },
          "displayedLink": {
            "type": "string",
            "description": "Display version of the link, possibly truncated."
          },
          "snippet": {
            "type": "string",
            "description": "Snippet of text from the result page."
          },
          "aboutThisResult": {
            "type": "object",
            "description": "Information on why this result is included in the search.",
            "properties": {
              "source": {
                "type": "object",
                "description": "Information about the source of the result",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the website."
                  },
                  "description": {
                    "type": "string",
                    "description": "A description of the source of the result."
                  },
                  "security": {
                    "type": "string",
                    "description": "Whether the website is deemed secure (HTTPS)."
                  },
                  "sourceInfoUrl": {
                    "type": "string",
                    "format": "URL",
                    "description": "A URL containing further information about the source."
                  }
                }
              },
              "keywords": {
                "type": "array",
                "description": "List of keywords matched in the result.",
                "items": {
                  "type": "string"
                }
              },
              "languages": {
                "type": "array",
                "description": "List of languages used on the result page.",
                "items": {
                  "type": "string"
                }
              },
              "regions": {
                "type": "array",
                "description": "List of regions the result page is relevant to.",
                "items": {
                  "type": "string"
                }
              },
              "topics": {
                "type": "array",
                "description": "List of topics related to the result page.",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": ["source"]
          },
          "richSnippet": {
            "type": "object",
            "description": "Structured data associated with the result, if available.",
            "properties": {
              "top": {
                "type": "object",
                "description": "Structured data that shows up at the top of the search result.",
                "properties": {
                  "extensions": {
                    "type": "array",
                    "description": "Extensions or additional data fields for the rich snippet.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "detectedType": {
                    "type": "string",
                    "description": "A description of the type of structured data found."
                  }
                }
              },
              "bottom": {
                "type": "object",
                "description": "Structured data that shows up at the bottom of the search result.",
                "properties": {
                  "extensions": {
                    "type": "array",
                    "description": "Extensions or additional data fields for the rich snippet.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "detectedType": {
                    "type": "string",
                    "description": "A description of the type of structured data found."
                  }
                }
              }
            }
          },
          "date": {
            "type": "string",
            "description": "Date associated with the result, if available."
          },
          "sitelinks": {
            "type": "array",
            "description": "Links to specific sections within the same website.",
            "items": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "Title of the sitelink."
                },
                "link": {
                  "type": "string",
                  "format": "URL",
                  "description": "URL of the sitelink."
                },
                "snippet": {
                  "type": "string",
                  "description": "Snippet of text for the sitelink."
                }
              },
              "required": [
                "title",
                "link"
              ]
            }
          }
        },
        "required": [
          "position",
          "title",
          "link"
        ]
      }
    },
    "relatedSearches": {
      "type": "array",
      "description": "List of related search queries.",
      "items": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "The related search query."
          },
          "link": {
            "type": "string",
            "format": "URL",
            "description": "Link to the search results for the related query."
          }
        },
        "required": [
          "query"
        ]
      }
    },
    "relatedQuestions": {
      "type": "array",
      "description": "List of related questions",
      "items": {
        "type": "object",
        "properties": {
          "question": {
            "type": "string",
            "description": "The related question."
          },
          "answer": {
            "type": "string",
            "description": "A brief answer to the question."
          },
          "source": {
            "type": "object",
            "description": "The source of the answer.",
            "properties": {
              "title": {
                "type": "string",
                "description": "The title of the source."
              },
              "link": {
                "type": "string",
                "format": "URL",
                "description": "A URL to the source."
              }
            }
          }
        }
      }
    }
  },
  "required": [
    "searchMetadata",
    "searchParameters",
    "searchInformation",
    "organicResults"
  ]
}{
  "users": [
    {
      "id": 1,
      "name": "John Doe",
      "email": "john.doe@example.com",
      "password": "hashed_password",
      "address": {
        "street": "123 Main St",
        "city": "Anytown",
        "state": "CA",
        "zipCode": "90210",
        "country": "USA"
      },
      "phoneNumber": "555-123-4567",
      "paymentMethods": [
        {
          "type": "credit_card",
          "token": "cc_token_123",
          "isDefault": true
        }
      ]
    }
  ],
  "deals": [
    {
      "id": 101,
      "merchantId": 5,
      "title": "50% Off at The Pizza Place",
      "description": "Enjoy a delicious pizza at half the price!",
      "originalPrice": 20.0,
      "discountedPrice": 10.0,
      "startDate": "2024-03-15T10:00:00Z",
      "endDate": "2024-03-31T23:59:59Z",
      "quantityAvailable": 100,
      "quantitySold": 25,
      "images": [
        "https://example.com/images/pizza1.jpg",
        "https://example.com/images/pizza2.jpg"
      ],
      "categories": [1, 2],
      "location": {
        "latitude": 34.0522,
        "longitude": -118.2437
      },
      "redemptionInstructions": "Present this voucher at the restaurant.",
      "termsAndConditions": "Valid for dine-in only. Cannot be combined with other offers."
    }
  ],
  "merchants": [
    {
      "id": 5,
      "name": "The Pizza Place",
      "description": "Best pizza in town!",
      "address": {
        "street": "456 Oak Ave",
        "city": "Anytown",
        "state": "CA",
        "zipCode": "90210",
        "country": "USA"
      },
      "phoneNumber": "555-987-6543",
      "website": "https://www.thepizzaplace.com",
      "logo": "https://example.com/logos/pizza_place.png"
    }
  ],
  "categories": [
    {
      "id": 1,
      "name": "Food & Drink",
      "description": "Deals on restaurants, cafes, and bars.",
      "icon": "https://example.com/icons/food.png"
    },
    {
      "id": 2,
      "name": "Pizza",
      "description": "Deals for pizza places.",
      "icon": "https://example.com/icons/pizza_slice.png"
    }
  ],
  "orders": [],
  "reviews": []
}{
  "users": [
    {
      "user_id": 123,
      "name": "John Doe",
      "email": "john.doe@example.com",
      "phone_number": "555-123-4567",
      "address": {
        "street": "123 Main St",
        "city": "Anytown",
        "state": "CA",
        "zip_code": "90210",
        "country": "USA"
      },
      "payment_methods": [
        {
          "payment_id": "card_1234",
          "type": "credit_card",
          "last_four_digits": "4242",
          "expiration_date": "12/25",
          "card_type": "Visa"
        }
      ],
      "order_history": [1, 2]
    }
  ],
  "restaurants": [
    {
      "restaurant_id": 456,
      "name": "Pizza Place",
      "cuisine": "Italian",
      "address": {
        "street": "456 Oak Ave",
        "city": "Anytown",
        "state": "CA",
        "zip_code": "90210",
        "country": "USA"
      },
      "phone_number": "555-987-6543",
      "rating": 4.8,
      "menu": [
        {
          "item_id": 1,
          "name": "Pepperoni Pizza",
          "description": "Classic pepperoni pizza",
          "price": 15.99,
          "category": "Pizza"
        }
      ],
      "operating_hours": [
        {
          "day": "monday",
          "open": "11:00:00",
          "close": "22:00:00"
        },
        {
          "day": "tuesday",
          "open": "11:00:00",
          "close": "22:00:00"
        }
      ]
    }
  ],
  "orders": [
    {
      "order_id": 1,
      "user_id": 123,
      "restaurant_id": 456,
      "items": [
        {
          "item_id": 1,
          "quantity": 2,
          "subtotal": 31.98
        }
      ],
      "delivery_address": {
        "street": "123 Main St",
        "city": "Anytown",
        "state": "CA",
        "zip_code": "90210",
        "country": "USA"
      },
      "order_time": "2023-10-27T18:30:00Z",
      "estimated_delivery_time": "2023-10-27T19:15:00Z",
      "status": "delivered",
      "total_amount": 35.98,
      "delivery_fee": 3.0,
      "tax": 1.0,
      "tip": 0.0,
      "payment_method": "card_1234",
      "delivery_driver_id": 789
    }
  ],
  "delivery_drivers": [
    {
      "driver_id": 789,
      "name": "Jane Smith",
      "phone_number": "555-111-2222",
      "vehicle_type": "car",
      "current_location": {
        "latitude": 34.0522,
        "longitude": -118.2437
      },
      "rating": 4.9,
      "status": "on_delivery"
    }
  ]
}{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Instacart App Schema",
  "description": "JSON Schema for the core data structures of the Instacart app.",
  "type": "object",
  "properties": {
    "user": {
      "type": "object",
      "description": "User profile information.",
      "properties": {
        "userId": {
          "type": "integer",
          "description": "Unique identifier for the user.",
          "readOnly": true
        },
        "firstName": {
          "type": "string",
          "description": "User's first name."
        },
        "lastName": {
          "type": "string",
          "description": "User's last name."
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "User's email address."
        },
        "phoneNumber": {
          "type": "string",
          "description": "User's phone number (e.g., +15551234567)."
        },
        "password": {
          "type": "string",
          "description": "User's password (hashed).",
          "writeOnly": true
        },
        "addresses": {
          "type": "array",
          "description": "List of user's saved addresses.",
          "items": {
            "$ref": "#/definitions/address"
          }
        },
        "paymentMethods": {
          "type": "array",
          "description": "List of user's saved payment methods.",
          "items": {
            "$ref": "#/definitions/paymentMethod"
          }
        },
        "orderHistory": {
          "type": "array",
          "description": "List of user's past orders.",
          "items": {
            "$ref": "#/definitions/order"
          },
          "readOnly": true
        }
      },
      "required": [
        "firstName",
        "lastName",
        "email",
        "password"
      ]
    },
    "store": {
      "type": "object",
      "description": "Store information.",
      "properties": {
        "storeId": {
          "type": "integer",
          "description": "Unique identifier for the store.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Name of the store."
        },
        "logoUrl": {
          "type": "string",
          "format": "URL",
          "description": "URL of the store's logo."
        },
        "address": {
          "$ref": "#/definitions/address"
        },
        "departments": {
          "type": "array",
          "description": "List of departments in the store.",
          "items": {
            "$ref": "#/definitions/department"
          }
        },
        "deliveryFee": {
          "type": "number",
          "format": "float",
          "description": "Delivery fee for this store.",
          "minimum": 0
        },
        "minimumOrderAmount": {
          "type": "number",
          "format": "float",
          "description": "Minimum order amount for free delivery.",
          "minimum": 0
        },
        "estimatedDeliveryTime": {
          "type": "string",
          "description": "Estimated delivery time (e.g., 30-45 minutes)."
        }
      },
      "required": [
        "name",
        "address"
      ]
    },
    "department": {
      "type": "object",
      "description": "Department within a store.",
      "properties": {
        "departmentId": {
          "type": "integer",
          "description": "Unique identifier for the department.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Name of the department (e.g., Produce, Dairy & Eggs)."
        },
        "aisles": {
          "type": "array",
          "description": "List of aisles within the department",
          "items": {
            "$ref": "#/definitions/aisle"
          }
        }
      },
      "required": [
        "name"
      ]
    },
    "aisle": {
      "type": "object",
      "description": "Aisle within a store department",
      "properties": {
        "aisleId": {
          "type": "integer",
          "description": "Unique identifier for the aisle",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Name of the aisle (e.g. Fresh Vegetables, Milk)"
        },
        "products": {
          "type": "array",
          "description": "List of products in the aisle",
          "items": {
            "$ref": "#/definitions/product"
          }
        }
      },
      "required": [
        "name"
      ]
    },
    "product": {
      "type": "object",
      "description": "Product information.",
      "properties": {
        "productId": {
          "type": "integer",
          "description": "Unique identifier for the product.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Name of the product."
        },
        "brand": {
          "type": "string",
          "description": "Brand of the product."
        },
        "description": {
          "type": "string",
          "description": "Product description."
        },
        "imageUrl": {
          "type": "string",
          "format": "URL",
          "description": "URL of the product image."
        },
        "price": {
          "type": "number",
          "format": "float",
          "description": "Price of the product.",
          "minimum": 0
        },
        "unit": {
          "type": "string",
          "description": "Unit of measurement (e.g., oz, lb, each)."
        },
        "size": {
          "type": "string",
          "description": "Size or weight of the product (e.g. 12oz, 2 lbs)"
        },
        "stock": {
          "type": "integer",
          "description": "Number in stock",
          "minimum": 0
        },
        "storeId": {
          "type": "integer",
          "description": "ID of the store this product belongs to"
        },
        "promotions": {
          "type": "array",
          "description": "List of active promotions for this product.",
          "items": {
            "$ref": "#/definitions/promotion"
          }
        }
      },
      "required": [
        "name",
        "price",
        "storeId"
      ]
    },
    "cart": {
      "type": "object",
      "description": "User's shopping cart.",
      "properties": {
        "cartId": {
          "type": "integer",
          "description": "Unique identifier for the cart.",
          "readOnly": true
        },
        "userId": {
          "type": "integer",
          "description": "ID of the user the cart belongs to."
        },
        "items": {
          "type": "array",
          "description": "List of items in the cart.",
          "items": {
            "$ref": "#/definitions/cartItem"
          }
        },
        "storeId": {
          "type": "integer",
          "description": "ID of the store the cart is for."
        },
        "subtotal": {
          "type": "number",
          "format": "float",
          "description": "Subtotal of the items in the cart.",
          "minimum": 0,
          "readOnly": true
        },
        "deliveryFee": {
          "type": "number",
          "format": "float",
          "description": "Delivery fee.",
          "minimum": 0,
          "readOnly": true
        },
        "tax": {
          "type": "number",
          "format": "float",
          "description": "Tax amount.",
          "minimum": 0,
          "readOnly": true
        },
        "total": {
          "type": "number",
          "format": "float",
          "description": "Total cost of the cart.",
          "minimum": 0,
          "readOnly": true
        }
      },
      "required": [
        "userId",
        "storeId"
      ]
    },
    "cartItem": {
      "type": "object",
      "description": "An item in the shopping cart.",
      "properties": {
        "productId": {
          "type": "integer",
          "description": "ID of the product."
        },
        "quantity": {
          "type": "integer",
          "description": "Quantity of the product in the cart.",
          "minimum": 1
        },
        "productDetails": {
          "$ref": "#/definitions/product"
        }
      },
      "required": [
        "productId",
        "quantity"
      ]
    },
    "order": {
      "type": "object",
      "description": "Order information.",
      "properties": {
        "orderId": {
          "type": "integer",
          "description": "Unique identifier for the order.",
          "readOnly": true
        },
        "userId": {
          "type": "integer",
          "description": "ID of the user who placed the order."
        },
        "storeId": {
          "type": "integer",
          "description": "ID of the store the order is from."
        },
        "storeDetails": {
          "$ref": "#/definitions/store"
        },
        "items": {
          "type": "array",
          "description": "List of items in the order.",
          "items": {
            "$ref": "#/definitions/cartItem"
          }
        },
        "orderDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the order was placed.",
          "readOnly": true
        },
        "deliveryDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the order is scheduled for delivery."
        },
        "deliveryAddress": {
          "$ref": "#/definitions/address"
        },
        "paymentMethod": {
          "$ref": "#/definitions/paymentMethod"
        },
        "subtotal": {
          "type": "number",
          "format": "float",
          "description": "Subtotal of the order.",
          "minimum": 0
        },
        "deliveryFee": {
          "type": "number",
          "format": "float",
          "description": "Delivery fee.",
          "minimum": 0
        },
        "tax": {
          "type": "number",
          "format": "float",
          "description": "Tax amount.",
          "minimum": 0
        },
        "total": {
          "type": "number",
          "format": "float",
          "description": "Total cost of the order.",
          "minimum": 0
        },
        "status": {
          "type": "string",
          "description": "Status of the order (e.g., placed, processing, out for delivery, delivered, canceled).",
          "enum": [
            "placed",
            "processing",
            "out for delivery",
            "delivered",
            "canceled"
          ]
        },
        "shopper": {
          "$ref": "#/definitions/shopper",
          "description": "Details of the shopper assigned to the order, if any"
        },
        "specialInstructions": {
          "type": "string",
          "description": "Special instructions for the shopper or delivery person."
        }
      },
      "required": [
        "userId",
        "storeId",
        "items",
        "deliveryAddress",
        "paymentMethod",
        "subtotal",
        "deliveryFee",
        "tax",
        "total"
      ]
    },
    "promotion": {
      "type": "object",
      "description": "Promotion or discount information.",
      "properties": {
        "promotionId": {
          "type": "integer",
          "description": "Unique identifier for the promotion.",
          "readOnly": true
        },
        "code": {
          "type": "string",
          "description": "Promotion code (if applicable)."
        },
        "description": {
          "type": "string",
          "description": "Description of the promotion."
        },
        "discountType": {
          "type": "string",
          "description": "Type of discount (e.g., percentage, fixed amount).",
          "enum": [
            "percentage",
            "fixed"
          ]
        },
        "discountValue": {
          "type": "number",
          "format": "float",
          "description": "Value of the discount (e.g., 10 for 10% or 5 for $5 off).",
          "minimum": 0
        },
        "minimumPurchase": {
          "type": "number",
          "format": "float",
          "description": "Minimum purchase amount required to apply the promotion.",
          "minimum": 0
        },
        "startDate": {
          "type": "string",
          "format": "date",
          "description": "Start date of the promotion."
        },
        "endDate": {
          "type": "string",
          "format": "date",
          "description": "End date of the promotion."
        },
        "applicableTo": {
          "type": "string",
          "description": "Specifies what the promotion applies to (e.g., all products, specific product, specific category).",
          "enum": [
            "all",
            "product",
            "category"
          ]
        },
        "applicableProductId": {
          "type": "integer",
          "description": "ID of the product the promotion applies to, if applicable."
        },
        "applicableCategory": {
          "type": "string",
          "description": "Name of the category the promotion applies to, if applicable."
        }
      },
      "required": [
        "description",
        "discountType",
        "discountValue"
      ]
    },
    "shopper": {
      "type": "object",
      "description": "Information about an Instacart shopper.",
      "properties": {
        "shopperId": {
          "type": "integer",
          "description": "Unique identifier for the shopper.",
          "readOnly": true
        },
        "firstName": {
          "type": "string",
          "description": "Shopper's first name."
        },
        "lastName": {
          "type": "string",
          "description": "Shopper's last name."
        },
        "phoneNumber": {
          "type": "string",
          "description": "Shopper's phone number."
        },
        "rating": {
          "type": "number",
          "format": "float",
          "description": "Shopper's average rating.",
          "minimum": 0,
          "maximum": 5
        },
        "vehicleType": {
          "type": "string",
          "description": "Type of vehicle the shopper uses (e.g., car, bike, scooter)."
        }
      },
      "required": [
        "firstName",
        "lastName",
        "phoneNumber"
      ]
    }
  },
  "definitions": {
    "address": {
      "type": "object",
      "description": "Address information.",
      "properties": {
        "addressId": {
          "type": "integer",
          "description": "Unique address identifier"
        },
        "streetAddress": {
          "type": "string",
          "description": "Street address."
        },
        "streetAddress2": {
          "type": "string",
          "description": "Apartment, suite, or unit number."
        },
        "city": {
          "type": "string",
          "description": "City."
        },
        "state": {
          "type": "string",
          "description": "State (e.g., CA, NY)."
        },
        "zipCode": {
          "type": "string",
          "description": "ZIP code."
        },
        "country": {
          "type": "string",
          "description": "Country (e.g., US, Canada)."
        },
        "latitude": {
          "type": "number",
          "format": "float",
          "description": "Latitude coordinate."
        },
        "longitude": {
          "type": "number",
          "format": "float",
          "description": "Longitude coordinate."
        }
      },
      "required": [
        "streetAddress",
        "city",
        "state",
        "zipCode"
      ]
    },
    "paymentMethod": {
      "type": "object",
      "description": "Payment method information.",
      "properties": {
        "paymentMethodId": {
          "type": "integer",
          "description": "Unique identifier of payment method"
        },
        "cardType": {
          "type": "string",
          "description": "Type of card (e.g., Visa, Mastercard, Amex)."
        },
        "lastFourDigits": {
          "type": "string",
          "description": "Last four digits of the card number.",
          "pattern": "^\\d{4}$"
        },
        "expirationDate": {
          "type": "string",
          "description": "Expiration date (MM/YY)."
        },
        "billingAddress": {
          "$ref": "#/definitions/address"
        }
      },
      "required": [
        "cardType",
        "lastFourDigits",
        "expirationDate"
      ]
    }
  }
}{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Instacart Shopper App Schema",
  "description": "Schema for data used in the Instacart Shopper App",
  "type": "object",
  "properties": {
    "shopper": {
      "type": "object",
      "description": "Information about the Instacart shopper",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the shopper"
        },
        "firstName": {
          "type": "string",
          "description": "Shopper's first name"
        },
        "lastName": {
          "type": "string",
          "description": "Shopper's last name"
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "Shopper's email address"
        },
        "phoneNumber": {
          "type": "string",
          "description": "Shopper's phone number (e.g., +15551234567)"
        },
        "profilePictureUrl": {
          "type": "string",
          "format": "URL",
          "description": "URL to the shopper's profile picture"
        },
        "vehicle": {
          "type": "object",
          "description": "Information about the shopper's vehicle (if applicable)",
          "properties": {
            "make": {
              "type": "string",
              "description": "Vehicle make"
            },
            "model": {
              "type": "string",
              "description": "Vehicle model"
            },
            "year": {
              "type": "integer",
              "description": "Vehicle year"
            },
            "color": {
              "type": "string",
              "description": "Vehicle color"
            },
            "licensePlate": {
              "type": "string",
              "description": "Vehicle license plate number"
            }
          },
          "required": [
            "make",
            "model",
            "year",
            "color",
            "licensePlate"
          ]
        },
        "rating": {
          "type": "number",
          "minimum": 0,
          "maximum": 5,
          "description": "Shopper's average rating"
        },
        "completedOrders": {
          "type": "integer",
          "minimum": 0,
          "description": "Number of orders completed by the shopper"
        },
        "accountStatus": {
          "type": "string",
          "enum": [
            "active",
            "inactive",
            "pending",
            "suspended"
          ],
          "description": "Status of the shopper's account"
        },
        "location": {
          "type": "object",
          "description": "Current location of the shopper",
          "properties": {
            "latitude": {
              "type": "number",
              "format": "float",
              "description": "Latitude coordinate"
            },
            "longitude": {
              "type": "number",
              "format": "float",
              "description": "Longitude coordinate"
            }
          },
          "required": [
            "latitude",
            "longitude"
          ]
        }
      },
      "required": [
        "id",
        "firstName",
        "lastName",
        "email",
        "phoneNumber",
        "accountStatus"
      ]
    },
    "batch": {
      "type": "object",
      "description": "Information about a batch of orders",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the batch"
        },
        "status": {
          "type": "string",
          "enum": [
            "available",
            "accepted",
            "shopping",
            "in_transit",
            "delivered",
            "canceled"
          ],
          "description": "Current status of the batch"
        },
        "store": {
          "type": "object",
          "description": "Information about the store for this batch",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Unique identifier for the store"
            },
            "name": {
              "type": "string",
              "description": "Name of the store"
            },
            "address": {
              "type": "string",
              "description": "Address of the store"
            },
            "location": {
              "type": "object",
              "description": "Location of the store",
              "properties": {
                "latitude": {
                  "type": "number",
                  "format": "float"
                },
                "longitude": {
                  "type": "number",
                  "format": "float"
                }
              },
              "required": [
                "latitude",
                "longitude"
              ]
            }
          },
          "required": [
            "id",
            "name",
            "address",
            "location"
          ]
        },
        "orders": {
          "type": "array",
          "description": "List of orders in the batch",
          "items": {
            "$ref": "#/properties/order"
          },
          "minItems": 1
        },
        "batchPay": {
          "type": "number",
          "format": "float",
          "minimum": 0,
          "description": "Pay for completing the entire batch"
        },
        "estimatedDistance": {
          "type": "number",
          "format": "float",
          "minimum": 0,
          "description": "Estimated distance for the batch in miles or kilometers"
        },
        "estimatedTime": {
          "type": "number",
          "format": "float",
          "minimum": 0,
          "description": "Estimated time to complete the batch in minutes"
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the batch was started"
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the batch was ended"
        }
      },
      "required": [
        "id",
        "status",
        "store",
        "orders",
        "batchPay",
        "estimatedDistance",
        "estimatedTime"
      ]
    },
    "order": {
      "type": "object",
      "description": "Information about a customer's order",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the order"
        },
        "customer": {
          "type": "object",
          "description": "Information about the customer who placed the order",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Unique identifier for the customer"
            },
            "firstName": {
              "type": "string",
              "description": "Customer's first name"
            },
            "lastName": {
              "type": "string",
              "description": "Customer's last name"
            },
            "phoneNumber": {
              "type": "string",
              "description": "Customer's phone number"
            }
          },
          "required": [
            "id",
            "firstName",
            "lastName"
          ]
        },
        "items": {
          "type": "array",
          "description": "List of items in the order",
          "items": {
            "$ref": "#/properties/item"
          },
          "minItems": 1
        },
        "deliveryAddress": {
          "type": "object",
          "description": "Delivery address for the order",
          "properties": {
            "street": {
              "type": "string",
              "description": "Street address"
            },
            "city": {
              "type": "string",
              "description": "City"
            },
            "state": {
              "type": "string",
              "description": "State (e.g., CA)"
            },
            "zipCode": {
              "type": "string",
              "description": "Zip code"
            },
            "apartment": {
              "type": "string",
              "description": "Apartment, suite, or unit number (optional)"
            },
            "instructions": {
              "type": "string",
              "description": "Delivery instructions (optional)"
            },
            "location": {
              "type": "object",
              "description": "Location of the delivery address",
              "properties": {
                "latitude": {
                  "type": "number",
                  "format": "float"
                },
                "longitude": {
                  "type": "number",
                  "format": "float"
                }
              },
              "required": [
                "latitude",
                "longitude"
              ]
            }
          },
          "required": [
            "street",
            "city",
            "state",
            "zipCode",
            "location"
          ]
        },
        "tip": {
          "type": "number",
          "format": "float",
          "minimum": 0,
          "description": "Tip amount for the order"
        },
        "total": {
          "type": "number",
          "format": "float",
          "minimum": 0,
          "description": "Total cost of the order"
        },
        "deliveryTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time the order was delivered"
        },
        "orderStatus": {
          "type": "string",
          "enum": [
            "pending",
            "accepted",
            "shopping",
            "in_transit",
            "delivered",
            "canceled"
          ]
        },
        "messageHistory": {
          "type": "array",
          "description": "Message history between customer and shopper",
          "items": {
            "$ref": "#/properties/message"
          }
        }
      },
      "required": [
        "id",
        "customer",
        "items",
        "deliveryAddress",
        "total",
        "orderStatus"
      ]
    },
    "item": {
      "type": "object",
      "description": "Information about an item in an order",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the item"
        },
        "name": {
          "type": "string",
          "description": "Name of the item"
        },
        "brand": {
          "type": "string",
          "description": "Brand of the item (optional)"
        },
        "quantity": {
          "type": "integer",
          "minimum": 1,
          "description": "Quantity of the item ordered"
        },
        "unit": {
          "type": "string",
          "description": "Unit of measurement (e.g., oz, lbs, count)"
        },
        "price": {
          "type": "number",
          "format": "float",
          "minimum": 0,
          "description": "Price per unit of the item"
        },
        "imageUrl": {
          "type": "string",
          "format": "URL",
          "description": "URL to an image of the item"
        },
        "notes": {
          "type": "string",
          "description": "Customer notes about the item (optional)"
        },
        "status": {
          "type": "string",
          "enum": [
            "found",
            "out_of_stock",
            "replaced"
          ],
          "description": "Status of the item during shopping"
        },
        "replacement": {
          "type": "object",
          "description": "Details of the replacement item, if any",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Unique identifier for the replacement item"
            },
            "name": {
              "type": "string"
            },
            "brand": {
              "type": "string"
            },
            "quantity": {
              "type": "integer"
            },
            "unit": {
              "type": "string"
            },
            "price": {
              "type": "number"
            },
            "imageUrl": {
              "type": "string",
              "format": "URL"
            }
          }
        }
      },
      "required": [
        "id",
        "name",
        "quantity",
        "unit",
        "price"
      ]
    },
    "message": {
      "type": "object",
      "description": "A message sent between shopper and customer",
      "properties": {
        "sender": {
          "type": "string",
          "enum": [
            "shopper",
            "customer"
          ]
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "content": {
          "type": "string",
          "maxLength": 1000
        }
      },
      "required": [
        "sender",
        "timestamp",
        "content"
      ]
    },
    "supportTicket": {
      "type": "object",
      "description": "Information about a shopper support ticket",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the support ticket"
        },
        "shopperId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the shopper who created the ticket"
        },
        "orderId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the related order (if applicable)"
        },
        "batchId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the related batch (if applicable)"
        },
        "category": {
          "type": "string",
          "enum": [
            "account issue",
            "payment issue",
            "order issue",
            "technical issue",
            "other"
          ],
          "description": "Category of the support ticket"
        },
        "subject": {
          "type": "string",
          "description": "Subject of the support ticket"
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the issue"
        },
        "status": {
          "type": "string",
          "enum": [
            "open",
            "in progress",
            "resolved",
            "closed"
          ],
          "description": "Current status of the support ticket"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the ticket was created"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the ticket was last updated"
        },
        "messages": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "sender": {
                "type": "string",
                "enum": [
                  "shopper",
                  "support"
                ],
                "description": "Who sent the message"
              },
              "message": {
                "type": "string",
                "description": "The message content"
              },
              "timestamp": {
                "type": "string",
                "format": "date-time",
                "description": "When the message was sent"
              }
            },
            "required": [
              "sender",
              "message",
              "timestamp"
            ]
          },
          "description": "Messages exchanged between shopper and support"
        }
      },
      "required": [
        "id",
        "shopperId",
        "category",
        "subject",
        "description",
        "status",
        "createdAt"
      ]
    },
    "earnings": {
      "type": "object",
      "description": "Shopper's earnings information",
      "properties": {
        "currentBalance": {
          "type": "number",
          "format": "float",
          "description": "Current balance available for cashout"
        },
        "totalEarnings": {
          "type": "number",
          "format": "float",
          "description": "Total earnings since joining"
        },
        "weeklyEarnings": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "weekStartDate": {
                "type": "string",
                "format": "date",
                "description": "Start date of the week"
              },
              "earnings": {
                "type": "number",
                "format": "float",
                "description": "Total earnings for the week"
              },
              "batches": {
                "type": "integer",
                "description": "Number of batches completed this week"
              },
              "hours": {
                "type": "number",
                "format": "float",
                "description": "Number of hours worked this week"
              }
            },
            "required": [
              "weekStartDate",
              "earnings",
              "batches",
              "hours"
            ]
          },
          "description": "Earnings for each week"
        },
        "dailyEarnings": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "date": {
                "type": "string",
                "format": "date",
                "description": "Date of earnings"
              },
              "earnings": {
                "type": "number",
                "format": "float",
                "description": "Total earnings for the day"
              },
              "batches": {
                "type": "integer",
                "description": "Number of batches completed today"
              },
              "hours": {
                "type": "number",
                "format": "float",
                "description": "Number of hours worked today"
              }
            },
            "required": [
              "date",
              "earnings",
              "batches",
              "hours"
            ]
          },
          "description": "Earnings for each day"
        },
        "batchEarnings": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "batchId": {
                "type": "string",
                "format": "uuid",
                "description": "ID of the batch"
              },
              "date": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time when batch earnings were recorded"
              },
              "basePay": {
                "type": "number",
                "format": "float",
                "description": "Base pay for the batch"
              },
              "peakBoost": {
                "type": "number",
                "format": "float",
                "description": "Additional pay during peak hours"
              },
              "distance": {
                "type": "number",
                "format": "float",
                "description": "Distance traveled for the batch in miles or kilometers"
              },
              "mileagePay": {
                "type": "number",
                "format": "float",
                "description": "Pay for mileage"
              },
              "heavyPay": {
                "type": "number",
                "format": "float",
                "description": "Additional pay for heavy items"
              },
              "tips": {
                "type": "number",
                "format": "float",
                "description": "Total tips received for the batch"
              },
              "totalEarnings": {
                "type": "number",
                "format": "float",
                "description": "Total earnings for the batch (including tips)"
              }
            },
            "required": [
              "batchId",
              "date",
              "basePay",
              "tips",
              "totalEarnings"
            ]
          },
          "description": "Detailed earnings breakdown for each batch"
        }
      },
      "required": [
        "currentBalance",
        "totalEarnings",
        "weeklyEarnings",
        "dailyEarnings",
        "batchEarnings"
      ]
    }
  },
  "required": [
    "shopper"
  ]
}{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Instagram",
  "description": "JSON Schema for a simplified Instagram application",
  "type": "object",
  "properties": {
    "users": {
      "type": "array",
      "description": "List of users in the application",
      "items": {
        "$ref": "#/definitions/User"
      }
    },
    "posts": {
      "type": "array",
      "description": "List of posts in the application",
      "items": {
        "$ref": "#/definitions/Post"
      }
    },
    "stories": {
      "type": "array",
      "description": "List of stories currently active",
      "items": {
        "$ref": "#/definitions/Story"
      }
    },
    "comments": {
      "type": "array",
      "description": "List of comments on posts",
      "items": {
        "$ref": "#/definitions/Comment"
      }
    },
    "directMessages": {
      "type": "array",
      "description": "List of direct message conversations",
      "items": {
        "$ref": "#/definitions/DirectMessage"
      }
    }
  },
  "required": [
    "users",
    "posts"
  ],
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "integer",
          "description": "Unique identifier for the user",
          "readOnly": true
        },
        "username": {
          "type": "string",
          "description": "User's unique username",
          "pattern": "^[a-zA-Z0-9._]{1,30}$"
        },
        "password": {
          "type": "string",
          "description": "User's password (should be hashed in a real implementation)",
          "writeOnly": true,
          "minLength": 8
        },
        "email": {
          "type": "string",
          "description": "User's email address",
          "format": "email"
        },
        "fullName": {
          "type": "string",
          "description": "User's full name"
        },
        "profilePicture": {
          "type": "string",
          "description": "URL to the user's profile picture",
          "format": "URL"
        },
        "bio": {
          "type": "string",
          "description": "User's bio"
        },
        "followers": {
          "type": "array",
          "description": "List of user IDs who follow this user",
          "items": {
            "type": "integer"
          }
        },
        "following": {
          "type": "array",
          "description": "List of user IDs this user follows",
          "items": {
            "type": "integer"
          }
        },
        "isPrivate": {
          "type": "boolean",
          "description": "Whether the user's account is private"
        },
        "website": {
          "type": "string",
          "description": "URL to user website",
          "format": "URL"
        },
        "phoneNumber": {
          "type": "string",
          "description": "User's phone number"
        }
      },
      "required": [
        "userId",
        "username",
        "password",
        "email"
      ]
    },
    "Post": {
      "type": "object",
      "properties": {
        "postId": {
          "type": "integer",
          "description": "Unique identifier for the post",
          "readOnly": true
        },
        "userId": {
          "type": "integer",
          "description": "ID of the user who created the post"
        },
        "mediaUrls": {
          "type": "array",
          "description": "URLs of the media (images or videos) in the post",
          "items": {
            "type": "string",
            "format": "URL"
          }
        },
        "caption": {
          "type": "string",
          "description": "Text caption for the post"
        },
        "timestamp": {
          "type": "string",
          "description": "Date and time when the post was created",
          "format": "date-time"
        },
        "likes": {
          "type": "array",
          "description": "List of user IDs who liked the post",
          "items": {
            "type": "integer"
          }
        },
        "location": {
          "type": "object",
          "description": "Location information associated with the post",
          "properties": {
            "name": {
              "type": "string"
            },
            "latitude": {
              "type": "number"
            },
            "longitude": {
              "type": "number"
            }
          },
          "required": [
            "latitude",
            "longitude"
          ]
        },
        "taggedUsers": {
          "type": "array",
          "description": "Users tagged in this post",
          "items": {
            "type": "integer",
            "description": "userId of tagged user"
          }
        }
      },
      "required": [
        "postId",
        "userId",
        "mediaUrls",
        "timestamp"
      ]
    },
    "Story": {
      "type": "object",
      "properties": {
        "storyId": {
          "type": "integer",
          "description": "Unique identifier for the story",
          "readOnly": true
        },
        "userId": {
          "type": "integer",
          "description": "ID of the user who created the story"
        },
        "mediaUrl": {
          "type": "string",
          "description": "URL of the media (image or video) in the story",
          "format": "URL"
        },
        "timestamp": {
          "type": "string",
          "description": "Date and time when the story was created",
          "format": "date-time"
        },
        "expiresAt": {
          "type": "string",
          "description": "Date and time when the story expires (typically 24 hours after creation)",
          "format": "date-time"
        },
        "viewers": {
          "type": "array",
          "description": "List of user IDs who viewed this story",
          "items": {
            "type": "integer"
          }
        }
      },
      "required": [
        "storyId",
        "userId",
        "mediaUrl",
        "timestamp",
        "expiresAt"
      ]
    },
    "Comment": {
      "type": "object",
      "properties": {
        "commentId": {
          "type": "integer",
          "description": "Unique identifier for the comment",
          "readOnly": true
        },
        "postId": {
          "type": "integer",
          "description": "ID of the post the comment belongs to"
        },
        "userId": {
          "type": "integer",
          "description": "ID of the user who wrote the comment"
        },
        "text": {
          "type": "string",
          "description": "Content of the comment"
        },
        "timestamp": {
          "type": "string",
          "description": "Date and time when the comment was created",
          "format": "date-time"
        },
        "likes": {
          "type": "array",
          "description": "List of user IDs who liked the comment",
          "items": {
            "type": "integer"
          }
        }
      },
      "required": [
        "commentId",
        "postId",
        "userId",
        "text",
        "timestamp"
      ]
    },
    "DirectMessage": {
      "type": "object",
      "properties": {
        "conversationId": {
          "type": "integer",
          "description": "Unique identifier for the conversation",
          "readOnly": true
        },
        "participants": {
          "type": "array",
          "description": "List of user IDs participating in the conversation",
          "items": {
            "type": "integer"
          },
          "minItems": 2
        },
        "messages": {
          "type": "array",
          "description": "List of messages in the conversation",
          "items": {
            "type": "object",
            "properties": {
              "messageId": {
                "type": "integer",
                "description": "Unique identifier for the message",
                "readOnly": true
              },
              "senderId": {
                "type": "integer",
                "description": "ID of the user who sent the message"
              },
              "content": {
                "type": "string",
                "description": "Content of the message"
              },
              "timestamp": {
                "type": "string",
                "description": "Date and time when the message was sent",
                "format": "date-time"
              },
              "seenBy": {
                "type": "array",
                "description": "List of user IDs who have seen the message",
                "items": {
                  "type": "integer"
                }
              }
            },
            "required": [
              "messageId",
              "senderId",
              "content",
              "timestamp"
            ]
          }
        }
      },
      "required": [
        "conversationId",
        "participants",
        "messages"
      ]
    }
  }
}{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "IRC Message",
  "description": "JSON Schema for an IRC message.",
  "type": "object",
  "properties": {
    "tags": {
      "type": "object",
      "description": "Optional IRCv3 message tags.",
      "additionalProperties": {
        "type": "string"
      },
      "example": {
        "time": "2023-10-27T10:30:00Z",
        "account": "jdoe"
      }
    },
    "source": {
      "type": "object",
      "description": "The source of the message.",
      "properties": {
        "nick": {
          "type": "string",
          "description": "Nickname of the sender.",
          "example": "jdoe"
        },
        "user": {
          "type": "string",
          "description": "Username of the sender.",
          "example": "jdoe"
        },
        "host": {
          "type": "string",
          "description": "Hostname of the sender.",
          "example": "user.example.com"
        },
        "server": {
          "type": "string",
          "description": "Server name, if the source is a server.",
          "example": "irc.example.com"
        }
      },
      "oneOf": [
        {
          "required": ["nick", "user", "host"]
        },
        {
          "required": ["server"]
        }
      ],
      "example": {
        "nick": "jdoe",
        "user": "~jdoe",
        "host": "user.example.com"
      }
    },
    "command": {
      "type": "string",
      "description": "The IRC command.",
      "enum": [
        "ADMIN", "AWAY", "CONNECT", "DIE", "ERROR", "INFO", "INVITE", "ISON",
        "JOIN", "KICK", "KILL", "LINKS", "LIST", "LUSERS", "MODE", "MOTD",
        "NAMES", "NICK", "NOTICE", "OPER", "PART", "PASS", "PING", "PONG",
        "PRIVMSG", "QUIT", "REHASH", "RESTART", "SERVICE", "SERVLIST",
        "SQUERY", "SQUIT", "STATS", "SUMMON", "TIME", "TOPIC", "TRACE",
        "USER", "USERHOST", "USERS", "VERSION", "WALLOPS", "WHO", "WHOIS",
        "WHOWAS", "001", "002", "003", "004", "005", "251", "252", "253",
        "254", "255", "256", "257", "258", "259", "261", "262", "263", "265",
        "266", "250", "301", "302", "303", "305", "306", "311", "312", "313",
        "314", "315", "317", "318", "319", "321", "322", "323", "324", "325",
        "329", "330", "331", "332", "333", "341", "342", "346", "347", "348",
        "349", "351", "352", "353", "364", "365", "366", "367", "368", "369",
        "371", "372", "374", "375", "376", "381", "382", "383", "384", "391",
        "392", "393", "394", "395", "401", "402", "403", "404", "405", "406",
        "407", "408", "409", "411", "412", "413", "414", "415", "421", "422",
        "423", "424", "431", "432", "433", "436", "437", "441", "442", "443",
        "444", "445", "446", "451", "461", "462", "463", "464", "465", "466",
        "467", "471", "472", "473", "474", "475", "476", "477", "478", "481",
        "482", "483", "484", "485", "491", "501", "502"
      ],
      "example": "PRIVMSG"
    },
    "parameters": {
      "type": "array",
      "description": "Parameters for the command.",
      "items": {
        "type": "string"
      },
      "example": [
        "#channel",
        "Hello, world!"
      ]
    }
  },
  "required": [
    "command"
  ]
}{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "iTunes Library",
  "description": "A JSON Schema representing the structure of an iTunes library.",
  "type": "object",
  "properties": {
    "Major Version": {
      "type": "integer",
      "description": "The major version of the iTunes library format."
    },
    "Minor Version": {
      "type": "integer",
      "description": "The minor version of the iTunes library format."
    },
    "Application Version": {
      "type": "string",
      "description": "The version of iTunes that created the library."
    },
    "Date": {
      "type": "string",
      "format": "date-time",
      "description": "The date and time the library was last modified."
    },
    "Features": {
      "type": "integer",
      "description": "A bit field representing enabled features in the library (e.g., music sharing, Genius)."
    },
    "Show Content Ratings": {
      "type": "boolean",
      "description": "Whether content ratings are displayed."
    },
    "Music Folder": {
      "type": "string",
      "format": "uri-reference",
      "description": "The location of the music folder."
    },
    "Library Persistent ID": {
      "type": "string",
      "description": "A unique identifier for the library."
    },
    "Tracks": {
      "type": "object",
      "description": "A dictionary of tracks, keyed by Track ID.",
      "patternProperties": {
        "^[0-9]+$": {
          "type": "object",
          "description": "An individual track in the iTunes library.",
          "properties": {
            "Track ID": {
              "type": "integer",
              "description": "A unique identifier for the track."
            },
            "Name": {
              "type": "string",
              "description": "The name of the track."
            },
            "Artist": {
              "type": "string",
              "description": "The artist of the track."
            },
            "Album Artist": {
              "type": "string",
              "description": "The album artist of the track."
            },
            "Composer": {
              "type": "string",
              "description": "The composer of the track."
            },
            "Album": {
              "type": "string",
              "description": "The album the track belongs to."
            },
            "Genre": {
              "type": "string",
              "description": "The genre of the track."
            },
            "Kind": {
              "type": "string",
              "description": "The file type and codec of the track (e.g., 'AAC audio file')."
            },
            "Size": {
              "type": "integer",
              "description": "The file size of the track in bytes."
            },
            "Total Time": {
              "type": "integer",
              "description": "The duration of the track in milliseconds."
            },
            "Disc Number": {
              "type": "integer",
              "description": "The disc number if part of a multi-disc set."
            },
            "Disc Count": {
              "type": "integer",
              "description": "The total number of discs in the set."
            },
            "Track Number": {
              "type": "integer",
              "description": "The track number on the album."
            },
            "Track Count": {
              "type": "integer",
              "description": "The total number of tracks on the album."
            },
            "Year": {
              "type": "integer",
              "description": "The year the track was released."
            },
            "BPM": {
              "type": "integer",
              "description": "The beats per minute of the track."
            },
            "Date Modified": {
              "type": "string",
              "format": "date-time",
              "description": "The date and time the track was last modified."
            },
            "Date Added": {
              "type": "string",
              "format": "date-time",
              "description": "The date and time the track was added to the library."
            },
            "Bit Rate": {
              "type": "integer",
              "description": "The bit rate of the track in kbps."
            },
            "Sample Rate": {
              "type": "integer",
              "description": "The sample rate of the track in Hz."
            },
            "Comments": {
              "type": "string",
              "description": "User-defined comments about the track."
            },
            "Play Count": {
              "type": "integer",
              "description": "The number of times the track has been played."
            },
            "Play Date": {
              "type": "integer",
              "description": "The last time the track was played (deprecated - use Play Date UTC)."
            },
            "Play Date UTC": {
              "type": "string",
              "format": "date-time",
              "description": "The last time the track was played, in UTC."
            },
            "Skip Count": {
              "type": "integer",
              "description": "The number of times the track has been skipped"
            },
            "Skip Date": {
              "type": "string",
              "format": "date-time",
              "description": "The date and time the track was last skipped."
            },
            "Rating": {
              "type": "integer",
              "description": "The user rating of the track (0-100, where 20=1 star, 40=2 stars, etc.)."
            },
            "Rating Computed": {
              "type": "boolean",
              "description": "Whether the rating is computed automatically."
            },
            "Album Rating": {
              "type": "integer",
              "description": "The user rating of the album."
            },
            "Album Rating Computed": {
              "type": "boolean",
              "description": "Whether the album rating is computed automatically."
            },
            "Loved": {
              "type": "boolean",
              "description": "Whether the track is marked as 'Loved'."
            },
            "Disliked": {
              "type": "boolean",
              "description": "Whether the track is marked as 'Disliked'."
            },
            "Artwork Count": {
              "type": "integer",
              "description": "The number of embedded artwork images in the track."
            },
            "Persistent ID": {
              "type": "string",
              "description": "A unique identifier for the track that persists across libraries."
            },
            "Track Type": {
              "type": "string",
              "enum": [
                "File",
                "Remote",
                "URL"
              ],
              "description": "The type of the track (e.g., 'File', 'Remote', 'URL')."
            },
            "File Folder Count": {
              "type": "integer",
              "description": "Used for internal organization (related to the file system)."
            },
            "Library Folder Count": {
              "type": "integer",
              "description": "Used for internal organization (related to the file system)."
            },
            "Location": {
              "type": "string",
              "format": "uri-reference",
              "description": "The location of the track file."
            },
            "File Type": {
              "type": "integer",
              "description": "Numerical file type identifier (deprecated)."
            },
            "Normalization": {
              "type": "integer",
              "description": "Volume normalization adjustment (deprecated)."
            },
            "Compilation": {
              "type": "boolean",
              "description": "Whether the track is part of a compilation album."
            },
            "Grouping": {
              "type": "string",
              "description": "Custom grouping for tracks."
            },
            "Series": {
              "type": "string",
              "description": "For TV shows, the name of the series."
            },
            "Season": {
              "type": "integer",
              "description": "For TV shows, the season number."
            },
            "Episode": {
              "type": "string",
              "description": "For TV shows, the episode ID."
            },
            "Episode Order": {
              "type": "integer",
              "description": "For TV shows, the episode order."
            },
            "Sort Name": {
              "type": "string",
              "description": "The name used for sorting the track."
            },
            "Sort Album": {
              "type": "string",
              "description": "The album name used for sorting."
            },
            "Sort Artist": {
              "type": "string",
              "description": "The artist name used for sorting."
            },
            "Sort Album Artist": {
              "type": "string",
              "description": "The album artist name used for sorting."
            },
            "Sort Composer": {
              "type": "string",
              "description": "The composer name used for sorting."
            },
            "Sort Series": {
              "type": "string",
              "description": "The series name used for sorting."
            },
            "Protected": {
              "type": "boolean",
              "description": "Whether the file is protected by DRM."
            },
            "Purchased": {
              "type": "boolean",
              "description": "Whether the track was purchased from the iTunes Store."
            },
            "Has Video": {
              "type": "boolean",
              "description": "Whether the track is associated with a video."
            },
            "HD": {
              "type": "boolean",
              "description": "Whether the associated video is in HD."
            },
            "Video Width": {
              "type": "integer",
              "description": "The width of the associated video in pixels."
            },
            "Video Height": {
              "type": "integer",
              "description": "The height of the associated video in pixels."
            },
            "Movie": {
              "type": "boolean",
              "description": "Whether the track is a movie."
            },
            "TV Show": {
              "type": "boolean",
              "description": "Whether the track is a TV show episode."
            },
            "Podcast": {
              "type": "boolean",
              "description": "Whether the track is a podcast."
            },
            "Unplayed": {
              "type": "boolean",
              "description": "Whether the podcast has not been played."
            },
            "Part Of Gapless Album": {
              "type": "boolean",
              "description": "Whether the track is part of a gapless album."
            },
            "Content Rating": {
              "type": "string",
              "description": "The content rating of the track (e.g., 'Clean', 'Explicit')."
            },
            "Release Date": {
              "type": "string",
              "format": "date-time",
              "description": "The release date of the content."
            },
            "Work": {
              "type": "string",
              "description": "For classical music, the name of the work."
            },
            "Movement Number": {
              "type": "integer",
              "description": "For classical music, the movement number."
            },
            "Movement Count": {
              "type": "integer",
              "description": "For classical music, the total number of movements."
            },
            "Movement Name": {
              "type": "string",
              "description": "For classical music, the name of the movement."
            },
            "iTunesU": {
              "type": "boolean",
              "description": "Whether the track is an iTunes U course item."
            },
            "Music Video": {
              "type": "boolean",
              "description": "Whether the track is a music video."
            },
            "Description": {
              "type": "string",
              "description": "Description for podcast or iTunes U."
            },
            "Long Description": {
              "type": "string",
              "description": "Long Description (Used for TV Shows)."
            },
            "Lyrics": {
              "type": "string",
              "description": "Lyrics of the song"
            },
            "Volume Adjustment": {
              "type": "integer",
              "description": "Volume Adjustment for this track in db"
            },
            "Podcast URL": {
              "type": "string",
              "format": "uri-reference",
              "description": "Feed url of the podcast"
            },
            "Disabled": {
              "type": "boolean",
              "description": "Whether track is disabled in iTunes"
            },
            "Matched": {
              "type": "boolean",
              "description": "Whether track was matched by iTunes Match"
            },
            "Purchased": {
              "type": "boolean",
              "description": "Whether track was purchased from iTunes Store"
            },
            "Master": {
              "type": "boolean",
              "description": "Indicates this is a master track when using home sharing"
            },
            "Explicit": {
              "type": "boolean",
              "description": "Explicit content"
            }

          },
          "required": [
            "Track ID",
            "Name"
          ]
        }
      }
    },
    "Playlists": {
      "type": "array",
      "description": "An array of playlists.",
      "items": {
        "type": "object",
        "description": "An individual playlist.",
        "properties": {
          "Name": {
            "type": "string",
            "description": "The name of the playlist."
          },
          "Playlist ID": {
            "type": "integer",
            "description": "A unique identifier for the playlist."
          },
          "Playlist Persistent ID": {
            "type": "string",
            "description": "A unique identifier for the playlist that persists across libraries."
          },
          "Distinguished Kind": {
            "type": "integer",
            "description": "A numeric value indicating a special kind of playlist (e.g., 'Music', 'Movies')."
          },
          "Master": {
            "type": "boolean",
            "description": "Whether this is the master Music playlist."
          },
          "Parent Persistent ID": {
            "type": "string",
            "description": "The persistent ID of the parent playlist (for folders)."
          },
          "Folder": {
            "type": "boolean",
            "description": "Whether this playlist is a folder."
          },
          "Visible": {
            "type": "boolean",
            "description": "Whether this playlist is visible in the UI."
          },
          "All Items": {
            "type": "boolean",
            "description": "Whether this playlist contains all items in its scope (e.g., all music)."
          },
          "Smart Info": {
            "type": "string",
            "format": "base64",
            "description": "The criteria for a smart playlist (encoded data)."
          },
          "Smart Criteria": {
            "type": "string",
            "format": "base64",
            "description": "The criteria for a smart playlist (encoded data)."
          },
          "Playlist Items": {
            "type": "array",
            "description": "An array of track IDs contained in the playlist.",
            "items": {
              "type": "object",
              "properties": {
                "Track ID": {
                  "type": "integer",
                  "description": "The ID of a track in the playlist."
                }
              },
              "required": [
                "Track ID"
              ]
            }
          }
        },
        "required": [
          "Name",
          "Playlist ID",
          "Playlist Persistent ID",
          "All Items"
        ]
      }
    }
  },
  "required": [
    "Major Version",
    "Minor Version",
    "Application Version",
    "Date",
    "Features",
    "Show Content Ratings",
    "Library Persistent ID",
    "Tracks",
    "Playlists"
  ]
}{
  "type": "object",
  "title": "Jitsi Meet Application Schema",
  "description": "Schema for a Jitsi Meet application configuration, including user interface, meeting features, and integration details.",
  "properties": {
    "general": {
      "type": "object",
      "description": "General application settings.",
      "properties": {
        "appName": {
          "type": "string",
          "description": "Name of the Jitsi Meet application.",
          "example": "My Jitsi App"
        },
        "defaultLanguage": {
          "type": "string",
          "description": "Default language for the application interface.",
          "example": "en",
          "pattern": "^[a-z]{2}(-[A-Z]{2})?$"
        },
        "domain": {
          "type": "string",
          "description": "Domain name where the Jitsi server is hosted.",
          "example": "meet.example.com",
          "format": "hostname"
        },
        "logoURL": {
          "type": "string",
          "description": "URL to the application logo.",
          "format": "URL"
        },
        "faviconURL": {
          "type": "string",
          "description": "URL to the application favicon.",
          "format": "URL"
        },
        "supportEmail": {
          "type": "string",
          "description": "Email address for support inquiries",
          "format": "email"
        }
      }
    },
    "interfaceConfig": {
      "type": "object",
      "description": "Configuration for the user interface.",
      "properties": {
        "TOOLBAR_BUTTONS": {
          "type": "array",
          "description": "List of toolbar buttons to display.",
          "items": {
            "type": "string",
            "enum": [
              "microphone",
              "camera",
              "closedcaptions",
              "desktop",
              "fullscreen",
              "fodeviceselection",
              "hangup",
              "profile",
              "chat",
              "recording",
              "livestreaming",
              "etherpad",
              "sharedvideo",
              "settings",
              "raisehand",
              "videoquality",
              "filmstrip",
              "invite",
              "feedback",
              "stats",
              "shortcuts",
              "tileview",
              "videobackgroundblur",
              "download",
              "help",
              "mute-everyone",
              "security"
            ]
          }
        },
        "SHOW_WATERMARK": {
          "type": "boolean",
          "description": "Whether to display the Jitsi watermark.",
          "default": false
        },
        "SHOW_JITSI_WATERMARK": {
          "type": "boolean",
          "description": "Whether to display Jitsi branded watermark",
          "default": false
        },
        "SHOW_BRAND_WATERMARK": {
          "type": "boolean",
          "description": "Whether to display custom brand watermark",
          "default": false
        },
        "BRAND_WATERMARK_LINK": {
          "type": "string",
          "description": "URL to which the custom brand watermark will point",
          "format": "URL"
        },
        "DEFAULT_LOCAL_DISPLAY_NAME": {
          "type": "string",
          "description": "Default display name for local participants",
          "example": "Me"
        },
        "DEFAULT_REMOTE_DISPLAY_NAME": {
          "type": "string",
          "description": "Default display name for remote participants",
          "example": "Fellow Jitster"
        },
        "disableDeepLinking": {
          "type": "boolean",
          "description": "Disable deep linking to specific rooms",
          "default": false
        },
        "disableAudioLevels": {
          "type": "boolean",
          "description": "Disable visual audio level indicators",
          "default": false
        },
        "disableRemoteMute": {
          "type": "boolean",
          "description": "Disable the option to remotely mute participants",
          "default": false
        },
        "hideConferenceSubject": {
          "type": "boolean",
          "description": "Whether to hide the subject/topic field.",
          "default": false
        },
        "hideConferenceTimer": {
          "type": "boolean",
          "description": "Whether to hide the meeting timer",
          "default": false
        },
        "OPTIMAL_BROWSERS": {
          "type": "array",
          "description": "List of browsers that are recommended",
          "default": ["chrome", "chromium", "firefox", "nwjs", "electron", "safari"],
          "items": {
            "type": "string",
            "enum": ["chrome", "chromium", "firefox", "nwjs", "electron", "safari", "edge"]
          }
        },
        "UNSUPPORTED_BROWSERS": {
          "type": "array",
          "description": "List of browsers that are not supported",
          "default": [],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "configOverwrite": {
      "type": "object",
      "description": "Configuration options that overwrite Jitsi Meet's default settings.",
      "properties": {
        "prejoinPageEnabled": {
          "type": "boolean",
          "description": "Enables or disables the pre-join page.",
          "default": false
        },
        "disableAP": {
          "type": "boolean",
          "description": "Disable Acoustic Echo Cancellation (AEC)",
          "default": false
        },
        "disableAEC": {
          "type": "boolean",
          "description": "Disable Automatic Echo Cancellation",
          "default": false
        },
        "disableNS": {
          "type": "boolean",
          "description": "Disable Noise Suppression",
          "default": false
        },
        "disableAGC": {
          "type": "boolean",
          "description": "Disable Automatic Gain Control",
          "default": false
        },
        "disableHPF": {
          "type": "boolean",
          "description": "Disable High Pass Filter",
          "default": false
        },
        "stereo": {
          "type": "boolean",
          "description": "Enable stereo audio",
          "default": false
        },
        "enableNoAudioDetection": {
          "type": "boolean",
          "description": "Enables No Audio Detection",
          "default": true
        },
        "enableNoisyMicDetection": {
          "type": "boolean",
          "description": "Enables Noisy Mic Detection",
          "default": true
        },
        "startAudioOnly": {
          "type": "boolean",
          "description": "Start the meeting with audio only.",
          "default": false
        },
        "startWithAudioMuted": {
          "type": "boolean",
          "description": "Start the meeting with audio muted.",
          "default": false
        },
        "startWithVideoMuted": {
          "type": "boolean",
          "description": "Start the meeting with video muted.",
          "default": false
        },
        "enableClosePage": {
          "type": "boolean",
          "description": "Enable a close page at the end of the meeting.",
          "default": false
        },
        "disableInviteFunctions": {
          "type": "boolean",
          "description": "Disable invitation functionalities",
          "default": false
        },
        "disableJoinLeaveSounds": {
          "type": "boolean",
          "description": "Disable playing sounds on user join/leave.",
          "default": false
        },
        "disableThirdPartyRequests": {
          "type": "boolean",
          "description": "Disable making requests to third-party servers",
          "default": false
        },
        "enableInsecureRoomNameWarning": {
          "type": "boolean",
          "description": "Enable warning for insecure room names",
          "default": false
        },
        "resolution": {
          "type": "integer",
          "description": "Default video resolution (height in pixels).",
          "default": 720,
          "enum": [180, 240, 360, 480, 720, 1080, 1440, 2160]
        },
        "constraints": {
          "type": "object",
          "description": "Video resolution constraints for different scenarios",
          "properties": {
            "video": {
              "type": "object",
              "properties": {
                "ideal": {
                  "type": "integer",
                  "description": "Ideal resolution",
                  "default": 720,
                  "enum": [180, 240, 360, 480, 720, 1080, 1440, 2160]
                },
                "max": {
                  "type": "integer",
                  "description": "Maximum resolution",
                  "default": 720,
                  "enum": [180, 240, 360, 480, 720, 1080, 1440, 2160]
                },
                "min": {
                  "type": "integer",
                  "description": "Minimum resolution",
                  "default": 180,
                  "enum": [180, 240, 360, 480, 720, 1080, 1440, 2160]
                }
              }
            }
          }
        },
        "disableSimulcast": {
          "type": "boolean",
          "description": "Disable simulcast to reduce bandwidth consumption",
          "default": false
        },
        "disableRtx": {
          "type": "boolean",
          "description": "Disable the RTX (retransmission) feature in video",
          "default": false
        },
        "enableOpusRed": {
          "type": "boolean",
          "description": "Enable RED (redundant encoding) for Opus audio codec",
          "default": false
        },
        "p2p": {
          "type": "object",
          "description": "Peer-to-peer connection settings",
          "properties": {
            "enabled": {
              "type": "boolean",
              "description": "Enable peer-to-peer connections",
              "default": true
            }
          }
        },
        "analytics": {
          "type": "object",
          "description": "Settings for usage analytics.",
          "properties": {
            "disabled": {
              "type": "boolean",
              "description": "Disable analytics globally",
              "default": false
            }
          }
        },
        "hosts": {
          "type": "object",
          "description": "Domain settings for moderators and authentication.",
          "properties": {
            "domain": {
              "type": "string",
              "description": "Domain for authentication and room management.",
              "example": "auth.example.com"
            },
            "muc": {
              "type": "string",
              "description": "Multi-User Chat (MUC) domain.",
              "example": "conference.example.com"
            }
          }
        },
        "externalConnectUrl": {
          "type": "string",
          "description": "URL for external authentication or user management services.",
          "format": "URL"
        },
        "recordingService": {
          "type": "object",
          "description": "Configuration for recording service integration",
          "properties": {
            "enabled": {
              "type": "boolean",
              "description": "Enable integration with recording service",
              "default": false
            }
          }
        },
        "liveStreamingEnabled": {
          "type": "boolean",
          "description": "Whether to enable live streaming.",
          "default": false
        },
        "fileRecordingsEnabled": {
          "type": "boolean",
          "description": "Whether to enable file-based recordings.",
          "default": false
        },
        "fileRecordingsServiceEnabled": {
          "type": "boolean",
          "description": "Whether to enable the file-based recording service",
          "default": false
        },
        "hiddenDomain": {
          "type": "string",
          "description": "A hidden domain used for specific purposes like shared document editing.",
          "example": "shared-doc.example.com"
        }
      }
    },
    "integration": {
      "type": "object",
      "description": "Configuration for integrations with other services.",
      "properties": {
        "calendar": {
          "type": "object",
          "description": "Settings for calendar integration",
          "properties": {
            "enabled": {
              "type": "boolean",
              "description": "Enable calendar integration",
              "default": false
            }
          }
        },
        "etherpad": {
          "type": "object",
          "description": "Settings for Etherpad integration (collaborative document editing)",
          "properties": {
            "enabled": {
              "type": "boolean",
              "description": "Enable Etherpad integration",
              "default": false
            },
            "baseUrl": {
              "type": "string",
              "description": "Base URL of the Etherpad instance",
              "format": "URL"
            }
          }
        }
      }
    }
  },
  "required": [
    "general"
  ]
}{
  "type": "object",
  "title": "Kickstarter Project",
  "description": "Schema for a Kickstarter project and related data.",
  "properties": {
    "project": {
      "type": "object",
      "description": "Core details of the Kickstarter project.",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique identifier for the project.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Name of the project.",
          "minLength": 1,
          "maxLength": 60
        },
        "blurb": {
          "type": "string",
          "description": "Short description of the project.",
          "minLength": 1,
          "maxLength": 135
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the project.",
          "minLength": 1
        },
        "category": {
          "type": "string",
          "description": "Main category of the project.",
          "enum": [
            "Art",
            "Comics",
            "Crafts",
            "Dance",
            "Design",
            "Fashion",
            "Film & Video",
            "Food",
            "Games",
            "Journalism",
            "Music",
            "Photography",
            "Publishing",
            "Technology",
            "Theater"
          ]
        },
        "subcategory": {
          "type": "string",
          "description": "Subcategory of the project (more specific).",
          "examples": [
            "Graphic Novels",
            "Webcomics",
            "Tabletop Games",
            "Video Games",
            "Documentary",
            "Narrative Film",
            "Indie Rock",
            "Pop",
            "Wearables",
            "Gadgets"
          ]
        },
        "location": {
          "type": "object",
          "description": "Location associated with the project (city, state/province, country).",
          "properties": {
            "city": {
              "type": "string"
            },
            "state": {
              "type": "string"
            },
            "country": {
              "type": "string",
              "description": "ISO 3166-1 alpha-2 country code (e.g., US, CA, GB).",
              "pattern": "^[A-Z]{2}$"
            }
          },
          "required": [
            "city",
            "country"
          ]
        },
        "creator": {
          "type": "object",
          "description": "Information about the project creator.",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique identifier of the creator.",
              "readOnly": true
            },
            "name": {
              "type": "string",
              "description": "Name of the creator (user or organization)."
            },
            "profile_url": {
              "type": "string",
              "format": "URL",
              "description": "URL to the creator's profile on Kickstarter"
            }
          },
          "required": [
            "id",
            "name"
          ]
        },
        "funding_goal": {
          "type": "number",
          "description": "The funding goal (amount) of the project.",
          "format": "float",
          "minimum": 1
        },
        "currency": {
          "type": "string",
          "description": "Currency code for the funding goal and pledges (e.g., USD, EUR, GBP).",
          "pattern": "^[A-Z]{3}$"
        },
        "pledged_amount": {
          "type": "number",
          "description": "The current amount of money pledged to the project.",
          "format": "float",
          "readOnly": true,
          "minimum": 0
        },
        "backers_count": {
          "type": "integer",
          "description": "The number of backers who have pledged to the project.",
          "readOnly": true,
          "minimum": 0
        },
        "deadline": {
          "type": "string",
          "format": "date-time",
          "description": "The deadline for reaching the funding goal."
        },
        "launched_at": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time the project was launched."
        },
        "state": {
          "type": "string",
          "description": "Current state of the project.",
          "enum": [
            "live",
            "successful",
            "failed",
            "canceled",
            "suspended"
          ],
          "readOnly": true
        },
        "photo": {
          "type": "object",
          "description": "Main project image.",
          "properties": {
            "full": {
              "type": "string",
              "format": "URL",
              "description": "URL to the full-sized image"
            },
            "med": {
              "type": "string",
              "format": "URL",
              "description": "URL to a medium-sized image"
            },
            "small": {
              "type": "string",
              "format": "URL",
              "description": "URL to a small-sized image"
            }
          },
          "required": ["full"]
        },
        "video": {
          "type": "object",
          "description": "Project video (if available).",
          "properties": {
            "url": {
              "type": "string",
              "format": "URL",
              "description": "URL to the video (e.g., on Vimeo or YouTube)."
            },
            "thumbnail": {
              "type": "string",
              "format": "URL",
              "description": "URL to the video thumbnail image"
            }
          },
          "required": ["url"]
        },
        "urls": {
          "type": "object",
          "description": "URLs associated with the project",
          "properties": {
            "web": {
              "type": "object",
              "properties": {
                "project": {
                  "type": "string",
                  "format": "URL",
                  "description": "URL to the project page on Kickstarter"
                },
                "rewards": {
                  "type": "string",
                  "format": "URL",
                  "description": "URL to the project's rewards page"
                }
              },
              "required": ["project"]
            }
          },
          "required": ["web"]
        }
      },
      "required": [
        "name",
        "blurb",
        "description",
        "category",
        "location",
        "creator",
        "funding_goal",
        "currency",
        "deadline",
        "launched_at",
        "photo",
        "urls"
      ]
    },
    "rewards": {
      "type": "array",
      "description": "List of rewards offered by the project.",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the reward.",
            "readOnly": true
          },
          "project_id": {
            "type": "integer",
            "description": "ID of the project this reward belongs to."
          },
          "description": {
            "type": "string",
            "description": "Description of the reward.",
            "minLength": 1
          },
          "amount": {
            "type": "number",
            "description": "Minimum pledge amount required to receive this reward.",
            "format": "float",
            "minimum": 1
          },
          "estimated_delivery": {
            "type": "string",
            "format": "date",
            "description": "Estimated delivery date for the reward (month and year)."
          },
          "limit": {
            "type": "integer",
            "description": "Maximum number of backers that can claim this reward (if limited).",
            "minimum": 1
          },
          "backers_count": {
            "type": "integer",
            "description": "Number of backers who have chosen this reward.",
            "readOnly": true,
            "minimum": 0
          },
          "shipping_type": {
            "type": "string",
            "description": "Type of shipping for the reward.",
            "enum": ["anywhere", "limited", "digital", "none"]
          },
          "shipping_destinations": {
            "type": "array",
            "description": "If shipping_type is 'limited', the allowed shipping destinations (ISO 3166-1 alpha-2 country codes).",
            "items": {
              "type": "string",
              "pattern": "^[A-Z]{2}$"
            }
          }
        },
        "required": [
          "project_id",
          "description",
          "amount"
        ]
      }
    },
    "updates": {
      "type": "array",
      "description": "List of updates posted by the project creator.",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the update.",
            "readOnly": true
          },
          "project_id": {
            "type": "integer",
            "description": "ID of the project this update belongs to."
          },
          "title": {
            "type": "string",
            "description": "Title of the update.",
            "minLength": 1,
            "maxLength": 255
          },
          "body": {
            "type": "string",
            "description": "Content of the update.",
            "minLength": 1
          },
          "author": {
            "type": "object",
            "description": "Author of the update (project creator).",
            "properties": {
              "id": {
                "type": "integer",
                "description": "User ID of the author.",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "description": "Name of the author."
              }
            },
            "required": [
              "id",
              "name"
            ]
          },
          "published_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the update was published."
          },
          "visible": {
            "type": "boolean",
            "description": "If true, the update is public, otherwise it's only visible to backers."
          }
        },
        "required": [
          "project_id",
          "title",
          "body",
          "author",
          "published_at"
        ]
      }
    },
    "comments": {
      "type": "array",
      "description": "List of comments on the project.",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the comment.",
            "readOnly": true
          },
          "project_id": {
            "type": "integer",
            "description": "ID of the project this comment belongs to."
          },
          "body": {
            "type": "string",
            "description": "Content of the comment.",
            "minLength": 1
          },
          "author": {
            "type": "object",
            "description": "Author of the comment.",
            "properties": {
              "id": {
                "type": "integer",
                "description": "User ID of the author.",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "description": "Name of the author."
              },
              "is_backer": {
                "type": "boolean",
                "description": "Whether the author is a backer of the project"
              }
            },
            "required": [
              "id",
              "name"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the comment was created."
          },
          "deleted": {
            "type": "boolean",
            "description": "If true, the comment has been deleted."
          }
        },
        "required": [
          "project_id",
          "body",
          "author",
          "created_at"
        ]
      }
    },
    "faqs": {
      "type": "array",
      "description": "List of frequently asked questions about the project.",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the FAQ.",
            "readOnly": true
          },
          "project_id": {
            "type": "integer",
            "description": "ID of the project this FAQ belongs to."
          },
          "question": {
            "type": "string",
            "description": "The FAQ question.",
            "minLength": 1
          },
          "answer": {
            "type": "string",
            "description": "The answer to the FAQ question.",
            "minLength": 1
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the FAQ was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the FAQ was last updated."
          }
        },
        "required": [
          "project_id",
          "question",
          "answer"
        ]
      }
    }
  },
  "required": [
    "project",
    "rewards"
  ]
}{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "LinkedIn",
  "description": "JSON Schema for a simplified LinkedIn data model",
  "type": "object",
  "properties": {
    "users": {
      "type": "array",
      "description": "List of LinkedIn users",
      "items": {
        "$ref": "#/definitions/user"
      }
    },
    "companies": {
      "type": "array",
      "description": "List of companies on LinkedIn",
      "items": {
        "$ref": "#/definitions/company"
      }
    },
    "jobs": {
      "type": "array",
      "description": "List of job postings",
      "items": {
        "$ref": "#/definitions/job"
      }
    },
    "posts": {
      "type": "array",
      "description": "List of user and company posts",
      "items": {
        "$ref": "#/definitions/post"
      }
    },
    "groups":{
      "type": "array",
      "description": "List of groups on LinkedIn",
      "items": {
        "$ref": "#/definitions/group"
      }
    }
  },
  "definitions": {
    "user": {
      "type": "object",
      "description": "A LinkedIn user profile",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the user"
        },
        "firstName": {
          "type": "string",
          "description": "User's first name"
        },
        "lastName": {
          "type": "string",
          "description": "User's last name"
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "User's email address"
        },
        "headline": {
          "type": "string",
          "description": "User's professional headline"
        },
        "summary": {
          "type": "string",
          "description": "A brief summary about the user"
        },
        "location": {
          "type": "string",
          "description": "User's location (e.g., city, country)"
        },
        "industry": {
          "type": "string",
          "description": "User's industry"
        },
        "profilePictureUrl": {
          "type": "string",
          "format": "URL",
          "description": "URL of the user's profile picture"
        },
        "connections": {
          "type": "array",
          "description": "List of user IDs that are connections",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "experience": {
          "type": "array",
          "description": "User's work experience",
          "items": {
            "$ref": "#/definitions/experience"
          }
        },
        "education": {
          "type": "array",
          "description": "User's education history",
          "items": {
            "$ref": "#/definitions/education"
          }
        },
        "skills": {
          "type": "array",
          "description": "List of user's skills",
          "items": {
            "type": "string"
          }
        },
        "recommendations": {
          "type": "array",
          "description": "Recommendations given to the user",
          "items": {
            "$ref": "#/definitions/recommendation"
          }
        },
        "groups": {
          "type": "array",
          "description": "List of groups a user is member of.",
          "items": {
            "type": "string",
            "description": "Id of the group",
            "format": "uuid"
          }
        }

      },
      "required": [
        "id",
        "firstName",
        "lastName",
        "email"
      ]
    },
    "company": {
      "type": "object",
      "description": "A company on LinkedIn",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the company"
        },
        "name": {
          "type": "string",
          "description": "Company name"
        },
        "industry": {
          "type": "string",
          "description": "Company's industry"
        },
        "description": {
          "type": "string",
          "description": "A brief description of the company"
        },
        "website": {
          "type": "string",
          "format": "URL",
          "description": "Company's website URL"
        },
        "logoUrl": {
          "type": "string",
          "format": "URL",
          "description": "URL of the company's logo"
        },
        "headquarters": {
          "type": "string",
          "description": "Location of the company's headquarters"
        },
        "companySize": {
          "type": "string",
          "description": "Company size (e.g., 1-10 employees, 51-200 employees)"
        },
        "specialties": {
          "type": "array",
          "description": "List of company's specialties",
          "items": {
            "type": "string"
          }
        },
        "followers": {
          "type": "array",
          "description": "List of user IDs that follow this company",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "job": {
      "type": "object",
      "description": "A job posting on LinkedIn",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the job posting"
        },
        "title": {
          "type": "string",
          "description": "Job title"
        },
        "companyId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the company posting the job"
        },
        "location": {
          "type": "string",
          "description": "Job location"
        },
        "description": {
          "type": "string",
          "description": "Job description"
        },
        "employmentType": {
          "type": "string",
          "enum": [
            "Full-time",
            "Part-time",
            "Contract",
            "Temporary",
            "Volunteer",
            "Internship",
            "Other"
          ],
          "description": "Type of employment"
        },
        "seniorityLevel": {
          "type": "string",
          "enum": [
            "Internship",
            "Entry level",
            "Associate",
            "Mid-Senior level",
            "Director",
            "Executive"
          ],
          "description": "Seniority level of the job"
        },
        "functions": {
          "type": "array",
          "description": "Job functions",
          "items": {
            "type": "string"
          }
        },
        "industries": {
          "type": "array",
          "description": "Industries related to the job",
          "items": {
            "type": "string"
          }
        },
        "postedDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the job was posted"
        },
        "applicants": {
          "type": "array",
          "description": "List of user IDs that have applied for this job",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "required": [
        "id",
        "title",
        "companyId",
        "description"
      ]
    },
    "post": {
      "type": "object",
      "description": "A post on LinkedIn",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the post"
        },
        "authorType": {
          "type": "string",
          "enum": [
            "user",
            "company"
          ],
          "description": "Type of author (user or company)"
        },
        "authorId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the user or company who created the post"
        },
        "content": {
          "type": "string",
          "description": "Content of the post"
        },
        "mediaUrl": {
          "type": "string",
          "format": "URL",
          "description": "URL of any media (image, video) associated with the post"
        },
        "visibility": {
          "type": "string",
          "enum": [
            "anyone",
            "connections"
          ],
          "description": "Visibility scope of the post"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the post was created"
        },
        "likes": {
          "type": "array",
          "description": "List of user IDs who liked the post",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "comments": {
          "type": "array",
          "description": "List of comments on the post",
          "items": {
            "$ref": "#/definitions/comment"
          }
        }
      },
      "required": [
        "id",
        "authorType",
        "authorId",
        "content",
        "createdAt"
      ]
    },
    "experience": {
      "type": "object",
      "description": "Work experience entry",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the experience entry"
        },
        "title": {
          "type": "string",
          "description": "Job title"
        },
        "companyId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the company"
        },
        "companyName": {
          "type": "string",
          "description": "Name of the company (can be used if company is not on LinkedIn)"
        },
        "location": {
          "type": "string",
          "description": "Location of the job"
        },
        "startDate": {
          "type": "string",
          "format": "date",
          "description": "Start date of the job"
        },
        "endDate": {
          "type": "string",
          "format": "date",
          "description": "End date of the job (null if currently working there)"
        },
        "description": {
          "type": "string",
          "description": "Description of the role"
        },
        "currentlyWorkingHere": {
          "type": "boolean",
          "description": "Whether the user is currently working in this role"
        }
      },
      "required": [
        "id",
        "title",
        "startDate",
        "currentlyWorkingHere"
      ]
    },
    "education": {
      "type": "object",
      "description": "Education history entry",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the education entry"
        },
        "school": {
          "type": "string",
          "description": "Name of the school"
        },
        "degree": {
          "type": "string",
          "description": "Degree earned"
        },
        "fieldOfStudy": {
          "type": "string",
          "description": "Field of study"
        },
        "startDate": {
          "type": "string",
          "format": "date",
          "description": "Start date of the education"
        },
        "endDate": {
          "type": "string",
          "format": "date",
          "description": "End date of the education (null if currently studying there)"
        },
        "grade": {
          "type": "string",
          "description": "Grade achieved"
        },
        "activities": {
          "type": "string",
          "description": "Activities and societies"
        },
        "description": {
          "type": "string",
          "description": "Description of the education"
        },
        "currentlyStudyingHere": {
          "type": "boolean",
          "description": "Whether the user is currently studying here"
        }
      },
      "required": [
        "id",
        "school",
        "startDate",
        "currentlyStudyingHere"
      ]
    },
    "recommendation": {
      "type": "object",
      "description": "A recommendation given to a user",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the recommendation"
        },
        "recommenderId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the user giving the recommendation"
        },
        "text": {
          "type": "string",
          "description": "Content of the recommendation"
        },
        "relationship": {
          "type": "string",
          "description": "Relationship between the recommender and the user being recommended"
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "Date when the recommendation was given"
        }
      },
      "required": [
        "id",
        "recommenderId",
        "text"
      ]
    },
    "comment": {
      "type": "object",
      "description": "A comment on a post",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the comment"
        },
        "authorId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the user who wrote the comment"
        },
        "content": {
          "type": "string",
          "description": "Content of the comment"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the comment was created"
        }
      },
      "required": [
        "id",
        "authorId",
        "content",
        "createdAt"
      ]
    },
    "group": {
      "type": "object",
      "description": "A group on LinkedIn",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier of the group"
        },
        "name": {
          "type": "string",
          "description": "Name of the group"
        },
        "description": {
          "type": "string",
          "description": "Description of the group"
        },
        "members": {
          "type": "array",
          "description": "List of user IDs that are members of the group",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "ownerId": {
          "type": "string",
          "format": "uuid",
          "description": "User ID of the group owner"
        },
        "rules": {
          "type": "string",
          "description": "Group rules"
        },
        "groupType": {
          "type": "string",
          "enum": [
            "open",
            "members-only"
          ],
          "description": "Type of the group"
        },
        "industry": {
          "type": "string",
          "description": "Industry associated with the group"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the group was created"
        },
        "logoUrl": {
          "type": "string",
          "format": "URL",
          "description": "URL of the group's logo"
        },
        "posts": {
          "type": "array",
          "description": "Posts within the group. This is a simplified representation and in a real implementation, it might be fetched separately.",
          "items": {
            "$ref": "#/definitions/post"
          }
        }
      },
      "required": [
        "id",
        "name",
        "members"
      ]
    }
  }
}{
  "type": "object",
  "title": "Lyft App Schema",
  "description": "JSON Schema representing the core data structures and interactions within the Lyft application.",
  "properties": {
    "user": {
      "type": "object",
      "title": "User Profile",
      "description": "Represents a user of the Lyft app (rider or driver).",
      "properties": {
        "user_id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the user."
        },
        "first_name": {
          "type": "string",
          "description": "User's first name."
        },
        "last_name": {
          "type": "string",
          "description": "User's last name."
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "User's email address."
        },
        "phone_number": {
          "type": "string",
          "description": "User's phone number."
        },
        "profile_picture_url": {
          "type": "string",
          "format": "URL",
          "description": "URL to the user's profile picture."
        },
        "user_type": {
          "type": "string",
          "enum": ["rider", "driver"],
          "description": "Indicates whether the user is a rider or a driver."
        },
        "rating": {
          "type": "number",
          "format": "float",
          "minimum": 0,
          "maximum": 5,
          "description": "Average rating of the user."
        },
        "payment_methods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/payment_method"
          },
          "description": "List of payment methods associated with the user."
        },
        "driver_details": {
          "type": "object",
          "description": "Details specific to drivers.",
          "properties": {
            "license_number": {
              "type": "string"
            },
            "vehicle_details": {
              "type": "object",
              "properties": {
                "make": {
                  "type": "string"
                },
                "model": {
                  "type": "string"
                },
                "year": {
                  "type": "integer"
                },
                "color": {
                  "type": "string"
                },
                "license_plate": {
                  "type": "string"
                }
              }
            }
          },
          "required": [
            "license_number",
            "vehicle_details"
          ]
        }
      },
      "required": [
        "user_id",
        "first_name",
        "last_name",
        "email",
        "phone_number",
        "user_type"
      ]
    },
    "ride": {
      "type": "object",
      "title": "Ride Details",
      "description": "Represents a ride request or an ongoing/completed ride.",
      "properties": {
        "ride_id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the ride."
        },
        "rider_id": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the rider requesting the ride."
        },
        "driver_id": {
          "type": ["string", "null"],
          "format": "uuid",
          "description": "ID of the driver assigned to the ride (null if not yet assigned)."
        },
        "pickup_location": {
          "$ref": "#/definitions/location",
          "description": "Pickup location for the ride."
        },
        "dropoff_location": {
          "$ref": "#/definitions/location",
          "description": "Dropoff location for the ride."
        },
        "ride_type": {
          "type": "string",
          "enum": [
            "Lyft",
            "Lyft XL",
            "Lux",
            "Lux Black",
            "Lux Black XL",
            "Shared"
          ],
          "description": "Type of Lyft ride requested."
        },
        "status": {
          "type": "string",
          "enum": [
            "requested",
            "accepted",
            "arrived",
            "in_progress",
            "completed",
            "canceled"
          ],
          "description": "Current status of the ride."
        },
        "estimated_fare": {
          "type": "number",
          "format": "float",
          "description": "Estimated fare for the ride."
        },
        "actual_fare": {
          "type": ["number", "null"],
          "format": "float",
          "description": "Actual fare for the ride (null until ride is completed)."
        },
        "distance": {
          "type": ["number", "null"],
          "format": "float",
          "description": "Distance of the ride in miles (null until ride is completed)."
        },
        "duration": {
          "type": ["integer", "null"],
          "description": "Duration of the ride in seconds (null until ride is completed)."
        },
        "requested_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the ride was requested."
        },
        "accepted_at": {
          "type": ["string", "null"],
          "format": "date-time",
          "description": "Timestamp when the ride was accepted by a driver."
        },
        "arrived_at": {
          "type": ["string", "null"],
          "format": "date-time",
          "description": "Timestamp when the driver arrived at the pickup location."
        },
        "started_at": {
          "type": ["string", "null"],
          "format": "date-time",
          "description": "Timestamp when the ride started."
        },
        "completed_at": {
          "type": ["string", "null"],
          "format": "date-time",
          "description": "Timestamp when the ride was completed."
        },
        "canceled_at": {
          "type": ["string", "null"],
          "format": "date-time",
          "description": "Timestamp when the ride was canceled."
        },
        "cancellation_reason": {
          "type": ["string", "null"],
          "description": "Reason for ride cancellation (if applicable)."
        }
      },
      "required": [
        "ride_id",
        "rider_id",
        "pickup_location",
        "dropoff_location",
        "ride_type",
        "status",
        "requested_at"
      ]
    },
    "location": {
      "type": "object",
      "title": "Location",
      "description": "Represents a geographical location.",
      "properties": {
        "latitude": {
          "type": "number",
          "format": "float",
          "minimum": -90,
          "maximum": 90,
          "description": "Latitude of the location."
        },
        "longitude": {
          "type": "number",
          "format": "float",
          "minimum": -180,
          "maximum": 180,
          "description": "Longitude of the location."
        },
        "address": {
          "type": "string",
          "description": "Human-readable address of the location (optional)."
        },
        "name": {
          "type": "string",
          "description": "Name/label of the location, e.g. 'Home', 'Work' (optional)."
        }
      },
      "required": [
        "latitude",
        "longitude"
      ]
    },
    "payment": {
      "type": "object",
      "title": "Payment",
      "description": "Represents a payment transaction.",
      "properties": {
        "payment_id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the payment."
        },
        "ride_id": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the ride associated with the payment."
        },
        "amount": {
          "type": "number",
          "format": "float",
          "description": "Amount of the payment."
        },
        "currency": {
          "type": "string",
          "description": "Currency of the payment (e.g., USD)."
        },
        "payment_method_id": {
          "type": "string",
          "description": "ID of the payment method used."
        },
        "status": {
          "type": "string",
          "enum": [
            "pending",
            "completed",
            "failed"
          ],
          "description": "Status of the payment."
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of the payment."
        }
      },
      "required": [
        "payment_id",
        "ride_id",
        "amount",
        "currency",
        "payment_method_id",
        "status",
        "timestamp"
      ]
    },
    "promotions": {
      "type": "object",
      "title": "Promotions",
      "description": "Details about available promotions and discounts",
      "properties": {
        "promo_code": {
          "type": "string",
          "description": "Unique code for the promotion"
        },
        "description": {
          "type": "string",
          "description": "Description of the promotion"
        },
        "discount_type": {
          "type": "string",
          "enum": ["percentage", "fixed_amount"],
          "description": "Type of discount offered"
        },
        "discount_value": {
          "type": "number",
          "description": "Value of the discount (percentage or fixed amount)"
        },
        "valid_from": {
          "type": "string",
          "format": "date-time",
          "description": "Start date and time of the promotion's validity"
        },
        "valid_until": {
          "type": "string",
          "format": "date-time",
          "description": "End date and time of the promotion's validity"
        },
        "usage_limit": {
          "type": ["integer", "null"],
          "description": "Maximum number of times the promotion can be used (null for unlimited)"
        },
        "minimum_fare": {
          "type": ["number", "null"],
          "description": "Minimum fare required to apply the promotion (null if no minimum)"
        }
      },
      "required": [
        "promo_code",
        "description",
        "discount_type",
        "discount_value"
      ]
    }
  },
  "definitions": {
    "payment_method": {
      "type": "object",
      "properties": {
        "payment_method_id": {
          "type": "string",
          "description": "Unique identifier for the payment method."
        },
        "type": {
          "type": "string",
          "enum": [
            "credit_card",
            "debit_card",
            "paypal",
            "apple_pay",
            "google_pay"
          ],
          "description": "Type of payment method."
        },
        "last_four": {
          "type": "string",
          "description": "Last four digits of the card (if applicable)."
        },
        "expiry_month": {
          "type": "integer",
          "minimum": 1,
          "maximum": 12,
          "description": "Expiry month of the card (if applicable)."
        },
        "expiry_year": {
          "type": "integer",
          "description": "Expiry year of the card (if applicable)."
        },
        "brand": {
          "type": "string",
          "description": "Card brand (e.g., Visa, Mastercard) (if applicable)."
        }
      },
      "required": [
        "payment_method_id",
        "type"
      ]
    }
  }
}{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Microsoft Teams",
  "description": "JSON Schema for a simplified representation of Microsoft Teams data structure.",
  "type": "object",
  "properties": {
    "teams": {
      "type": "array",
      "description": "List of Teams",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the Team",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name of the Team"
          },
          "description": {
            "type": "string",
            "description": "Description of the Team"
          },
          "isArchived": {
            "type": "boolean",
            "description": "Indicates if the Team is archived"
          },
          "members": {
            "type": "array",
            "description": "List of Team members",
            "items": {
              "$ref": "#/definitions/user"
            }
          },
          "owners": {
            "type": "array",
            "description": "List of Team owners",
            "items": {
              "$ref": "#/definitions/user"
            }
          },
          "channels": {
            "type": "array",
            "description": "List of channels within the Team",
            "items": {
              "$ref": "#/definitions/channel"
            }
          },
          "apps": {
            "type": "array",
            "description": "List of installed apps in the team",
            "items": {
              "$ref": "#/definitions/app"
            }
          },
          "settings": {
            "type": "object",
            "description": "Team-specific settings",
            "properties": {
              "guestSettings": {
                "$ref": "#/definitions/guestSettings"
              },
              "messagingSettings": {
                "$ref": "#/definitions/messagingSettings"
              },
              "funSettings": {
                "$ref": "#/definitions/funSettings"
              }
            }
          }
        },
        "required": [
          "id",
          "name"
        ]
      }
    },
    "users": {
      "type": "array",
      "description": "List of Users (can represent members across multiple teams)",
      "items": {
        "$ref": "#/definitions/user"
      }
    },
    "apps": {
      "type": "array",
      "description": "List of apps that can be installed in teams or used in chats",
      "items": {
        "$ref": "#/definitions/app"
      }
    }
  },
  "definitions": {
    "user": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user",
          "format": "uuid"
        },
        "displayName": {
          "type": "string",
          "description": "Display name of the user"
        },
        "userPrincipalName": {
          "type": "string",
          "description": "User Principal Name (UPN) - typically the user's email address",
          "format": "email"
        },
        "jobTitle": {
          "type": "string",
          "description": "Job title of the user"
        },
        "department": {
          "type": "string",
          "description": "Department of the user"
        }
      },
      "required": [
        "id",
        "displayName",
        "userPrincipalName"
      ]
    },
    "channel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the channel",
          "format": "uuid"
        },
        "name": {
          "type": "string",
          "description": "Name of the channel"
        },
        "description": {
          "type": "string",
          "description": "Description of the channel"
        },
        "isFavorite": {
          "type": "boolean",
          "description": "Indicates if the channel is marked as a favorite by the current user"
        },
        "email": {
          "type": "string",
          "description": "Email address associated with the channel",
          "format": "email"
        },
        "webUrl": {
          "type": "string",
          "description": "URL to access the channel in the web client",
          "format": "URL"
        },
        "membershipType": {
          "type": "string",
          "description": "Type of channel membership (e.g., 'standard', 'private', 'shared')",
          "enum": ["standard", "private", "shared"]
        },
        "messages": {
          "type": "array",
          "description": "List of messages in the channel",
          "items": {
            "$ref": "#/definitions/message"
          }
        },
        "tabs": {
          "type": "array",
          "description": "List of tabs configured in the channel",
          "items": {
            "$ref": "#/definitions/tab"
          }
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "message": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the message",
          "format": "uuid"
        },
        "replyToId": {
          "type": "string",
          "description": "ID of the message this message is a reply to (if applicable)",
          "format": "uuid"
        },
        "from": {
          "type": "object",
          "description": "Sender of the message",
          "properties": {
            "user": {
              "$ref": "#/definitions/user"
            },
            "application": {
              "$ref": "#/definitions/application"
            }
          }
        },
        "body": {
          "type": "object",
          "description": "Content of the message",
          "properties": {
            "contentType": {
              "type": "string",
              "description": "Type of message content (e.g., 'text', 'html')",
              "enum": ["text", "html"]
            },
            "content": {
              "type": "string",
              "description": "The actual message content"
            }
          },
          "required": [
            "contentType",
            "content"
          ]
        },
        "createdDateTime": {
          "type": "string",
          "description": "Timestamp when the message was created",
          "format": "date-time"
        },
        "lastModifiedDateTime": {
          "type": "string",
          "description": "Timestamp when the message was last modified",
          "format": "date-time"
        },
        "attachments": {
          "type": "array",
          "description": "List of attachments in the message",
          "items": {
            "$ref": "#/definitions/attachment"
          }
        },
        "mentions": {
          "type": "array",
          "description": "List of mentions in the message",
          "items": {
            "$ref": "#/definitions/mention"
          }
        },
        "reactions": {
          "type": "array",
          "description": "List of reactions to the message",
          "items": {
            "$ref": "#/definitions/reaction"
          }
        }
      },
      "required": [
        "id",
        "from",
        "body",
        "createdDateTime"
      ]
    },
    "attachment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the attachment",
          "format": "uuid"
        },
        "contentType": {
          "type": "string",
          "description": "MIME type of the attachment"
        },
        "contentUrl": {
          "type": "string",
          "description": "URL to the attachment content",
          "format": "URL"
        },
        "content": {
          "type": "string",
          "description": "Content of the attachment (if not represented by a URL)"
        },
        "name": {
          "type": "string",
          "description": "Name of the attachment"
        },
        "thumbnailUrl": {
          "type": "string",
          "description": "URL to a thumbnail of the attachment (if applicable)",
          "format": "URL"
        }
      },
      "required": [
        "id"
      ]
    },
    "mention": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Index of the mention within the message content"
        },
        "mentionText": {
          "type": "string",
          "description": "Text representation of the mention in the message content"
        },
        "mentioned": {
          "type": "object",
          "description": "The entity mentioned",
          "properties": {
            "user": {
              "$ref": "#/definitions/user"
            },
            "conversation": {
              "type": "object",
              "description": "Represents the conversation where the mention occurred",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "displayName": {
                  "type": "string"
                }
              }
            },
            "application": {
              "$ref": "#/definitions/application"
            }
          }
        }
      },
      "required": [
        "id",
        "mentioned"
      ]
    },
    "reaction": {
      "type": "object",
      "properties": {
        "reactionType": {
          "type": "string",
          "description": "Type of reaction (e.g., 'like', 'heart', 'laugh', 'surprised', 'sad', 'angry')",
          "enum": ["like", "heart", "laugh", "surprised", "sad", "angry"]
        },
        "createdDateTime": {
          "type": "string",
          "description": "Timestamp when the reaction was created",
          "format": "date-time"
        },
        "user": {
          "$ref": "#/definitions/user"
        }
      },
      "required": [
        "reactionType",
        "createdDateTime",
        "user"
      ]
    },
    "tab": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the tab",
          "format": "uuid"
        },
        "displayName": {
          "type": "string",
          "description": "Display name of the tab"
        },
        "webUrl": {
          "type": "string",
          "description": "URL to access the tab in the web client",
          "format": "URL"
        },
        "configuration": {
          "type": "object",
          "description": "Configuration settings for the tab"
        },
        "teamsAppId": {
          "type": "string",
          "description": "Id of the Teams app this tab is associated with"
        }
      },
      "required": [
        "id",
        "displayName",
        "teamsAppId"
      ]
    },
    "app": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the app",
          "format": "uuid"
        },
        "externalId": {
          "type": "string",
          "description": "External Id of the app"
        },
        "displayName": {
          "type": "string",
          "description": "Display name of the app"
        },
        "distributionMethod": {
          "type": "string",
          "description": "Method by which the app is distributed (e.g., 'store', 'sideloaded')",
          "enum": ["store", "organization", "sideloaded"]
        }
      },
      "required": [
        "id",
        "displayName",
        "distributionMethod"
      ]
    },
    "guestSettings": {
      "type": "object",
      "properties": {
        "allowCreateUpdateChannels": {
          "type": "boolean",
          "description": "Indicates if guests can create and update channels"
        },
        "allowDeleteChannels": {
          "type": "boolean",
          "description": "Indicates if guests can delete channels"
        }
      },
      "required": [
        "allowCreateUpdateChannels",
        "allowDeleteChannels"
      ]
    },
    "messagingSettings": {
      "type": "object",
      "properties": {
        "allowUserEditMessages": {
          "type": "boolean",
          "description": "Indicates if users can edit their messages"
        },
        "allowUserDeleteMessages": {
          "type": "boolean",
          "description": "Indicates if users can delete their messages"
        },
        "allowOwnerDeleteMessages": {
          "type": "boolean",
          "description": "Indicates if owners can delete any message"
        },
        "allowTeamMentions": {
          "type": "boolean",
          "description": "Indicates if team mentions (@team) are allowed"
        },
        "allowChannelMentions": {
          "type": "boolean",
          "description": "Indicates if channel mentions (@channel) are allowed"
        }
      },
      "required": [
        "allowUserEditMessages",
        "allowUserDeleteMessages",
        "allowOwnerDeleteMessages",
        "allowTeamMentions",
        "allowChannelMentions"
      ]
    },
    "funSettings": {
      "type": "object",
      "properties": {
        "allowGiphy": {
          "type": "boolean",
          "description": "Indicates if Giphy usage is allowed"
        },
        "giphyContentRating": {
          "type": "string",
          "description": "Content rating for Giphy (e.g., 'strict', 'moderate')",
          "enum": ["strict", "moderate"]
        },
        "allowStickersAndMemes": {
          "type": "boolean",
          "description": "Indicates if stickers and memes are allowed"
        },
        "allowCustomMemes": {
          "type": "boolean",
          "description": "Indicates if custom memes are allowed"
        }
      },
      "required": [
        "allowGiphy",
        "giphyContentRating",
        "allowStickersAndMemes",
        "allowCustomMemes"
      ]
    },
    "application": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "The unique identifier of the application."
        },
        "displayName": {
          "type": "string",
          "description": "The display name of the application."
        }
      },
      "required": [
        "id"
      ]
    }
  }
}{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "MySpace",
  "description": "JSON Schema for a simplified MySpace data model",
  "type": "object",
  "properties": {
    "users": {
      "type": "array",
      "description": "List of MySpace users",
      "items": {
        "$ref": "#/definitions/user"
      }
    },
    "groups": {
      "type": "array",
      "description": "List of MySpace groups",
      "items": {
        "$ref": "#/definitions/group"
      }
    },
    "forums": {
      "type": "array",
      "description": "List of MySpace forums",
      "items": {
        "$ref": "#/definitions/forum"
      }
    },
    "events": {
      "type": "array",
      "description": "List of MySpace events",
      "items": {
        "$ref": "#/definitions/event"
      }
    }
  },
  "definitions": {
    "user": {
      "type": "object",
      "description": "MySpace user profile",
      "properties": {
        "userId": {
          "type": "integer",
          "description": "Unique identifier for the user",
          "readOnly": true
        },
        "username": {
          "type": "string",
          "description": "User's chosen username",
          "minLength": 3,
          "maxLength": 20
        },
        "email": {
          "type": "string",
          "format": "email"
        },
        "password": {
          "type": "string",
          "description": "Hashed password for security (not stored in plain text)",
          "minLength": 8
        },
        "profile": {
          "type": "object",
          "description": "User's profile information",
          "properties": {
            "displayName": {
              "type": "string",
              "description": "Name displayed on the profile"
            },
            "headline": {
              "type": "string",
              "description": "Short tagline or status"
            },
            "aboutMe": {
              "type": "string",
              "description": "Longer description about the user"
            },
            "interests": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "music": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "movies": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "books": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "location": {
              "type": "string"
            },
            "profilePictureUrl": {
              "type": "string",
              "format": "URL",
              "description": "URL to the user's profile picture"
            },
            "customCss": {
              "type": "string",
              "description": "User-defined CSS for profile customization"
            },
            "top8": {
              "type": "array",
              "description": "User's Top 8 friends",
              "items": {
                "type": "integer",
                "description": "userId of a friend"
              },
              "maxItems": 8,
              "uniqueItems": true
            },
            "bulletins": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/bulletin"
              }
            }
          }
        },
        "friends": {
          "type": "array",
          "description": "List of user's friends (userIds)",
          "items": {
            "type": "integer",
            "description": "userId of a friend"
          },
          "uniqueItems": true
        },
        "friendRequests": {
          "type": "array",
          "description": "Pending friend requests",
          "items": {
            "type": "integer",
            "description": "userId of the user who sent the request"
          }
        },
        "comments": {
          "type": "array",
          "description": "Comments left on the users profile",
          "items": {
            "$ref": "#/definitions/comment"
          }
        },
        "groups": {
          "type": "array",
          "description": "Groups the user is a member of",
          "items": {
            "type": "integer",
            "description": "groupId of the group"
          }
        },
        "photos": {
          "type": "array",
          "description": "List of photos uploaded by the user",
          "items": {
            "$ref": "#/definitions/photo"
          }
        },
        "status": {
          "type": "string",
          "description": "User's current online status (e.g., Online, Offline, Away)",
          "enum": ["Online", "Offline", "Away", "Do Not Disturb"]
        },
        "lastLogin": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of the user's last login"
        }
      },
      "required": [
        "userId",
        "username",
        "email",
        "password"
      ]
    },
    "group": {
      "type": "object",
      "description": "MySpace group",
      "properties": {
        "groupId": {
          "type": "integer",
          "description": "Unique identifier for the group",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Name of the group"
        },
        "description": {
          "type": "string",
          "description": "Description of the group"
        },
        "category": {
          "type": "string",
          "description": "Category of the group (e.g., Music, Movies, Books)"
        },
        "creatorId": {
          "type": "integer",
          "description": "userId of the group creator"
        },
        "members": {
          "type": "array",
          "description": "List of group members (userIds)",
          "items": {
            "type": "integer"
          },
          "uniqueItems": true
        },
        "forum": {
          "$ref": "#/definitions/forum",
          "description": "The forum related to this group"
        }
      },
      "required": [
        "groupId",
        "name",
        "description",
        "creatorId",
        "members"
      ]
    },
    "forum": {
      "type": "object",
      "description": "MySpace forum",
      "properties": {
        "forumId": {
          "type": "integer",
          "description": "Unique identifier for the forum",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Name of the forum"
        },
        "description": {
          "type": "string",
          "description": "Description of the forum"
        },
        "threads": {
          "type": "array",
          "description": "List of threads in the forum",
          "items": {
            "$ref": "#/definitions/thread"
          }
        }
      },
      "required": [
        "forumId",
        "name",
        "description",
        "threads"
      ]
    },
    "thread": {
      "type": "object",
      "description": "Thread within a forum",
      "properties": {
        "threadId": {
          "type": "integer",
          "description": "Unique identifier for the thread",
          "readOnly": true
        },
        "title": {
          "type": "string",
          "description": "Title of the thread"
        },
        "creatorId": {
          "type": "integer",
          "description": "userId of the thread creator"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of thread creation"
        },
        "posts": {
          "type": "array",
          "description": "List of posts in the thread",
          "items": {
            "$ref": "#/definitions/post"
          }
        }
      },
      "required": [
        "threadId",
        "title",
        "creatorId",
        "createdAt",
        "posts"
      ]
    },
    "post": {
      "type": "object",
      "description": "Post within a thread",
      "properties": {
        "postId": {
          "type": "integer",
          "description": "Unique identifier for the post",
          "readOnly": true
        },
        "authorId": {
          "type": "integer",
          "description": "userId of the post author"
        },
        "content": {
          "type": "string",
          "description": "Content of the post"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of post creation"
        }
      },
      "required": [
        "postId",
        "authorId",
        "content",
        "createdAt"
      ]
    },
    "event": {
      "type": "object",
      "description": "MySpace event",
      "properties": {
        "eventId": {
          "type": "integer",
          "description": "Unique identifier for the event",
          "readOnly": true
        },
        "title": {
          "type": "string",
          "description": "Title of the event"
        },
        "description": {
          "type": "string",
          "description": "Description of the event"
        },
        "location": {
          "type": "string",
          "description": "Location of the event"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "Start date and time of the event"
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "End date and time of the event"
        },
        "creatorId": {
          "type": "integer",
          "description": "userId of the event creator"
        },
        "attendees": {
          "type": "array",
          "description": "List of users attending the event (userIds)",
          "items": {
            "type": "integer"
          },
          "uniqueItems": true
        }
      },
      "required": [
        "eventId",
        "title",
        "description",
        "location",
        "startDate",
        "endDate",
        "creatorId",
        "attendees"
      ]
    },
    "comment": {
      "type": "object",
      "description": "A comment on a user's profile",
      "properties": {
        "commentId": {
          "type": "integer",
          "description": "Unique identifier for the comment.",
          "readOnly": true
        },
        "authorId": {
          "type": "integer",
          "description": "User ID of the author of the comment"
        },
        "content": {
          "type": "string",
          "description": "The text content of the comment"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the comment was posted"
        }
      },
      "required": [
        "commentId",
        "authorId",
        "content",
        "createdAt"
      ]
    },
    "photo": {
      "type": "object",
      "description": "A photo object",
      "properties": {
        "photoId": {
          "type": "integer",
          "description": "Unique identifier of the photo",
          "readOnly": true
        },
        "url": {
          "type": "string",
          "format": "URL",
          "description": "URL of the photo"
        },
        "caption": {
          "type": "string",
          "description": "Caption or description of the photo"
        },
        "uploadedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the photo was uploaded"
        },
        "comments": {
          "type": "array",
          "description": "List of comments on the photo",
          "items": {
            "$ref": "#/definitions/comment"
          }
        }
      },
      "required": [
        "photoId",
        "url",
        "uploadedAt"
      ]
    },
    "bulletin": {
      "type": "object",
      "description": "Represents a bulletin posted by a user",
      "properties": {
        "bulletinId": {
          "type": "integer",
          "description": "Unique ID of the bulletin",
          "readOnly": true
        },
        "subject": {
          "type": "string",
          "description": "Subject of the bulletin"
        },
        "body": {
          "type": "string",
          "description": "Body content of the bulletin"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp indicating when the bulletin was created"
        },
        "authorId": {
          "type": "integer",
          "description": "ID of the user who created the bulletin"
        }
      },
      "required": [
        "bulletinId",
        "subject",
        "body",
        "createdAt",
        "authorId"
      ]
    }
  }
}{
  "type": "object",
  "title": "Netflix",
  "description": "JSON Schema for a simplified Netflix data model",
  "properties": {
    "users": {
      "type": "array",
      "description": "List of Netflix users",
      "items": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "description": "Unique identifier for the user",
            "example": 12345
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "description": "User's password (should be hashed in a real system)",
            "example": "hashedpassword"
          },
          "subscriptionPlan": {
            "type": "string",
            "description": "Type of subscription plan",
            "enum": [
              "Basic",
              "Standard",
              "Premium"
            ],
            "example": "Premium"
          },
          "profiles": {
            "type": "array",
            "description": "Profiles associated with the user account",
            "items": {
              "type": "object",
              "properties": {
                "profileId": {
                  "type": "integer",
                  "description": "Unique identifier for the profile",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "description": "Name of the profile",
                  "example": "John"
                },
                "isKids": {
                  "type": "boolean",
                  "description": "Indicates if the profile is a kids profile",
                  "example": false
                },
                "avatarUrl": {
                  "type": "string",
                  "format": "URL",
                  "description": "URL to the profile's avatar image"
                },
                "watchHistory": {
                  "type": "array",
                  "description": "List of titles watched by the profile",
                  "items": {
                    "type": "object",
                    "properties": {
                      "titleId": {
                        "type": "integer",
                        "description": "ID of the title watched",
                        "example": 987
                      },
                      "watchDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date and time when the title was watched"
                      },
                      "progress": {
                        "type": "number",
                        "format": "float",
                        "description": "Watch progress (0.0 - 1.0, where 1.0 is fully watched)",
                        "example": 0.75
                      }
                    },
                    "required": [
                      "titleId",
                      "watchDate"
                    ]
                  }
                },
                "myList": {
                  "type": "array",
                  "description": "List of titles added to 'My List'",
                  "items": {
                    "type": "integer",
                    "description": "ID of the title added to the list"
                  }
                }
              },
              "required": [
                "profileId",
                "name"
              ]
            },
            "minItems": 1,
            "maxItems": 5
          },
          "paymentDetails": {
            "type": "object",
            "description": "Payment information for the user"

          }
        },
        "required": [
          "userId",
          "email",
          "password",
          "subscriptionPlan",
          "profiles"
        ]
      }
    },
    "titles": {
      "type": "array",
      "description": "List of movies and TV shows available on Netflix",
      "items": {
        "type": "object",
        "properties": {
          "titleId": {
            "type": "integer",
            "description": "Unique identifier for the title",
            "example": 987
          },
          "title": {
            "type": "string",
            "description": "Name of the movie or TV show",
            "example": "Stranger Things"
          },
          "type": {
            "type": "string",
            "description": "Type of title (movie or series)",
            "enum": [
              "movie",
              "series"
            ],
            "example": "series"
          },
          "description": {
            "type": "string",
            "description": "Synopsis of the title",
            "example": "A group of kids..."
          },
          "releaseYear": {
            "type": "integer",
            "description": "Year the title was released",
            "example": 2016
          },
          "genres": {
            "type": "array",
            "description": "List of genres",
            "items": {
              "type": "string",
              "example": "Sci-Fi"
            },
            "minItems": 1
          },
          "cast": {
            "type": "array",
            "description": "List of main cast members",
            "items": {
              "type": "string",
              "example": "Winona Ryder"
            }
          },
          "director": {
            "type": "string",
            "description": "Director of the movie (null for series)",
            "example": null
          },
          "creators": {
            "type": "array",
            "description": "Creators of the series (null for movies)",
            "items": {
              "type": "string",
              "example": "The Duffer Brothers"
            }
          },
          "seasons": {
            "type": "array",
            "description": "List of seasons (only for series)",
            "items": {
              "type": "object",
              "properties": {
                "seasonNumber": {
                  "type": "integer",
                  "description": "Season number",
                  "example": 1
                },
                "episodes": {
                  "type": "array",
                  "description": "List of episodes in the season",
                  "items": {
                    "type": "object",
                    "properties": {
                      "episodeNumber": {
                        "type": "integer",
                        "description": "Episode number",
                        "example": 1
                      },
                      "title": {
                        "type": "string",
                        "description": "Title of the episode",
                        "example": "Chapter One: The Vanishing of Will Byers"
                      },
                      "synopsis": {
                        "type": "string",
                        "description": "Synopsis of the episode"
                      },
                      "duration": {
                        "type": "integer",
                        "description": "Duration of the episode in minutes",
                        "example": 50
                      }
                    },
                    "required": [
                      "episodeNumber",
                      "title",
                      "duration"
                    ]
                  }
                }
              },
              "required": [
                "seasonNumber",
                "episodes"
              ]
            }
          },
          "maturityRating": {
            "type": "string",
            "description": "Maturity rating of the title",
            "example": "TV-14"
          },
          "posterImageUrl": {
            "type": "string",
            "format": "URL",
            "description": "URL to the title's poster image"
          },
          "trailerUrl": {
            "type": "string",
            "format": "URL",
            "description": "URL to the title's trailer"
          },
          "averageRating": {
            "type": "number",
            "format": "float",
            "description": "Average rating from users (e.g., 4.5)",
            "minimum": 0,
            "maximum": 5
          }
        },
        "required": [
          "titleId",
          "title",
          "type",
          "description",
          "releaseYear",
          "genres",
          "maturityRating"
        ]
      }
    }
  },
  "required": [
    "users",
    "titles"
  ]
}{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Nostr Event",
  "description": "JSON Schema for a Nostr event, covering NIP-01, NIP-09, NIP-13, NIP-26, NIP-40, NIP-42, and NIP-57.",
  "type": "object",
  "required": [
    "id",
    "pubkey",
    "created_at",
    "kind",
    "tags",
    "content",
    "sig"
  ],
  "properties": {
    "id": {
      "type": "string",
      "description": "32-bytes lowercase hex-encoded sha256 of the serialized event data",
      "pattern": "^[a-f0-9]{64}$"
    },
    "pubkey": {
      "type": "string",
      "description": "32-bytes lowercase hex-encoded public key of the event creator",
      "pattern": "^[a-f0-9]{64}$"
    },
    "created_at": {
      "type": "integer",
      "description": "Unix timestamp (seconds)"
    },
    "kind": {
      "type": "integer",
      "description": "Event kind",
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        16,
        40,
        41,
        42,
        9734,
        9735,
        10002,
        30023
      ]
    },
    "tags": {
      "type": "array",
      "description": "Event tags",
      "items": {
        "type": "array",
        "description": "A tag",
        "minItems": 1,
        "items": {
          "type": "string"
        },
        "oneOf": [
          {
            "description": "Event tag (NIP-01)",
            "minItems": 2,
            "maxItems": 4,
            "prefixItems": [
              {
                "const": "e"
              },
              {
                "description": "Event ID",
                "pattern": "^[a-f0-9]{64}$"
              },
              {
                "description": "Recommended relay URL",
                "pattern": "^wss?://"
              },
              {
                "description": "Marker (NIP-33: root, reply, mention)",
                "enum": [
                  "root",
                  "reply",
                  "mention"
                ]
              }
            ]
          },
          {
            "description": "Pubkey tag (NIP-01)",
            "minItems": 2,
            "maxItems": 3,
            "prefixItems": [
              {
                "const": "p"
              },
              {
                "description": "Pubkey",
                "pattern": "^[a-f0-9]{64}$"
              },
              {
                "description": "Recommended relay URL",
                "pattern": "^wss?://"
              }
            ]
          },
          {
            "description": "Nonce tag (NIP-13)",
            "minItems": 2,
            "maxItems": 2,
            "prefixItems": [
              {
                "const": "nonce"
              },
              {
                "description": "Nonce string"
              },
              {
                "description": "Difficulty (number of leading zero bits)"
              }
            ]
          },
          {
            "description": "Subject tag (NIP-14)",
            "minItems": 2,
            "maxItems": 2,
            "prefixItems": [
              {
                "const": "subject"
              },
              {
                "description": "Subject for kind 1 notes"
              }
            ]
          },
          {
            "description": "Delegation tag (NIP-26)",
            "minItems": 4,
            "maxItems": 4,
            "prefixItems": [
              {
                "const": "delegation"
              },
              {
                "description": "Delegator pubkey",
                "pattern": "^[a-f0-9]{64}$"
              },
              {
                "description": "Conditions (e.g., kind=1&created_at>1672531200&created_at<1704067200)"
              },
              {
                "description": "Delegation signature"
              }
            ]
          },
          {
            "description": "Expiration tag (NIP-40)",
            "minItems": 2,
            "maxItems": 2,
            "prefixItems": [
              {
                "const": "expiration"
              },
              {
                "description": "Unix timestamp (seconds)"
              }
            ]
          },
          {
            "description": "d tag (NIP-33)",
            "minItems": 2,
            "maxItems": 2,
            "prefixItems": [
              {
                "const": "d"
              },
              {
                "description": "Unique identifier for parameterized replaceable events"
              }
            ]
          },
          {
            "description": "Lightning Zaps (NIP-57)",
            "minItems": 3,
            "maxItems": 3,
            "prefixItems": [
              {
                "enum": ["relays", "bolt11", "description"]
              },
              {
                "description": "array of relay URLs or a bolt11 invoice or description for the lightning zap request"
              },
              {
                "description": "The actual zap request event in JSON string format"
              }
            ]
          },
          {
            "description": "Generic tag",
            "minItems": 1
          }
        ]
      }
    },
    "content": {
      "type": "string",
      "description": "Event content. Interpretation depends on 'kind'"
    },
    "sig": {
      "type": "string",
      "description": "64-bytes lowercase hex of the signature of the sha256 hash of the serialized event data, which is the same as the 'id' field",
      "pattern": "^[a-f0-9]{128}$"
    }
  },
  "definitions": {
    "kind0": {
      "description": "Metadata (NIP-01)",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "User's profile name"
        },
        "about": {
          "type": "string",
          "description": "User's profile about text"
        },
        "picture": {
          "type": "string",
          "description": "User's profile picture URL",
          "format": "URL"
        },
        "nip05": {
          "type": "string",
          "description": "NIP-05 identifier"
        },
        "lud16": {
          "type": "string",
          "description": "Lightning Address"
        }
      },
      "additionalProperties": true
    },
    "kind3": {
      "description": "Contact List (NIP-02)",
      "type": "array",
      "items": {
        "type": "array",
        "minItems": 2,
        "maxItems": 3,
        "prefixItems": [
          {
            "const": "p"
          },
          {
            "description": "Pubkey",
            "pattern": "^[a-f0-9]{64}$"
          },
          {
            "description": "Petname",
            "type": "string"
          }
        ]
      }
    },
    "kind10002": {
      "description": "Relay List Metadata (NIP-65)",
      "type": "array",
      "items": {
        "type": "array",
        "minItems": 2,
        "maxItems": 3,
        "prefixItems": [
          {
            "const": "r"
          },
          {
            "description": "Relay URL",
            "pattern": "^wss?://"
          },
          {
            "description": "read/write",
            "enum": [
              "read",
              "write",
              ""
            ]
          }
        ]
      }
    }
  },
  "allOf": [
    {
      "if": {
        "properties": {
          "kind": {
            "const": 0
          }
        }
      },
      "then": {
        "properties": {
          "content": {
            "$ref": "#/definitions/kind0"
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": 3
          }
        }
      },
      "then": {
        "properties": {
          "tags": {
            "$ref": "#/definitions/kind3"
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": 10002
          }
        }
      },
      "then": {
        "properties": {
          "tags": {
            "$ref": "#/definitions/kind10002"
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "enum": [
              0,
              3,
              10002
            ]
          }
        }
      },
      "then": {
        "properties": {
          "content": {
            "type": "string",
            "description": "Content must be valid JSON for kinds 0, 3, and 10002."
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": 1
          }
        }
      },
      "then": {
        "properties": {
          "content": {
            "type": "string",
            "description": "Content can be any string for kind 1."
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": 9
          }
        }
      },
      "then": {
        "properties": {
          "tags": {
            "contains": {
              "minItems": 2,
              "maxItems": 2,
              "prefixItems": [
                {
                  "const": "e"
                },
                {
                  "description": "Event ID to be deleted",
                  "pattern": "^[a-f0-9]{64}$"
                }
              ]
            }
          }
        }
      }
    }
  ]
}{
  "type": "object",
  "title": "OfferUp App Schema",
  "description": "A JSON Schema representing the core data structures of the OfferUp app.",
  "properties": {
    "users": {
      "type": "array",
      "description": "List of registered users.",
      "items": {
        "$ref": "#/definitions/User"
      }
    },
    "items": {
      "type": "array",
      "description": "List of items for sale.",
      "items": {
        "$ref": "#/definitions/Item"
      }
    },
    "categories": {
      "type": "array",
      "description": "List of item categories.",
      "items": {
        "$ref": "#/definitions/Category"
      }
    },
    "messages": {
      "type": "array",
      "description": "List of messages exchanged between users.",
      "items": {
        "$ref": "#/definitions/Message"
      }
    },
    "transactions": {
      "type": "array",
      "description": "Records of completed transactions",
      "items": {
        "$ref": "#/definitions/Transaction"
      }
    }

  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the user."
        },
        "username": {
          "type": "string",
          "description": "User's display name."
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "User's email address."
        },
        "password": {
          "type": "string",
          "description": "User's password (hashed and salted in a real implementation)."
        },
        "phoneNumber": {
          "type": "string",
          "description": "User's phone number."
        },
        "location": {
          "$ref": "#/definitions/Location",
          "description": "User's location for local listings."
        },
        "profilePicture": {
          "type": "string",
          "format": "URL",
          "description": "URL to the user's profile picture."
        },
        "rating": {
          "type": "number",
          "description": "Average user rating (e.g., 4.5 out of 5)",
          "minimum": 0,
          "maximum": 5
        },
        "joinDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the user joined."
        },
        "isVerified": {
          "type": "boolean",
          "description": "Indicates whether the user's identity has been verified."
        }
      },
      "required": [
        "userId",
        "username",
        "email",
        "password"
      ]
    },
    "Item": {
      "type": "object",
      "properties": {
        "itemId": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the item."
        },
        "sellerId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the user selling the item."
        },
        "title": {
          "type": "string",
          "description": "Title or name of the item."
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the item."
        },
        "price": {
          "type": "number",
          "format": "float",
          "description": "Price of the item.",
          "minimum": 0
        },
        "condition": {
          "type": "string",
          "enum": [
            "New",
            "Like New",
            "Good",
            "Fair",
            "Poor"
          ],
          "description": "Condition of the item."
        },
        "categoryId": {
          "type": "string",
          "description": "ID of the category the item belongs to."
        },
        "photos": {
          "type": "array",
          "description": "List of URLs to photos of the item.",
          "items": {
            "type": "string",
            "format": "URL"
          }
        },
        "location": {
          "$ref": "#/definitions/Location",
          "description": "Location of the item."
        },
        "postDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the item was posted."
        },
        "status": {
          "type": "string",
          "enum": [
            "Available",
            "Sold",
            "Pending",
            "Removed"
          ],
          "description": "Current status of the item"
        },
        "shippingAvailable": {
          "type": "boolean",
          "description": "Indicates whether shipping is available for this item."
        },
        "localPickupOnly": {
          "type": "boolean",
          "description": "Indicates whether this item is only available for local pickup."
        }

      },
      "required": [
        "itemId",
        "sellerId",
        "title",
        "description",
        "price",
        "condition",
        "categoryId",
        "photos",
        "location",
        "postDate"
      ]
    },
    "Category": {
      "type": "object",
      "properties": {
        "categoryId": {
          "type": "string",
          "description": "Unique identifier for the category."
        },
        "name": {
          "type": "string",
          "description": "Name of the category (e.g., 'Electronics', 'Furniture')."
        },
        "parentCategoryId": {
          "type": ["string", "null"],
          "description": "ID of the parent category, if it's a subcategory. Null if it's a top-level category."
        }
      },
      "required": [
        "categoryId",
        "name"
      ]
    },
    "Location": {
      "type": "object",
      "properties": {
        "latitude": {
          "type": "number",
          "format": "float",
          "description": "Latitude of the location."
        },
        "longitude": {
          "type": "number",
          "format": "float",
          "description": "Longitude of the location."
        },
        "zipCode": {
          "type": "string",
          "description": "Postal or ZIP code of the location."
        },
        "city": {
          "type": "string",
          "description": "City name."
        },
        "state": {
          "type": "string",
          "description": "State or province name."
        }

      },
      "required": [
        "latitude",
        "longitude"
      ]
    },
    "Message": {
      "type": "object",
      "properties": {
        "messageId": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the message."
        },
        "senderId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the user who sent the message."
        },
        "receiverId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the user who received the message."
        },
        "itemId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the item related to the conversation."
        },
        "content": {
          "type": "string",
          "description": "Text content of the message."
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the message was sent."
        },
        "isRead": {
          "type": "boolean",
          "description": "Indicates whether the message has been read by the receiver."
        }
      },
      "required": [
        "messageId",
        "senderId",
        "receiverId",
        "itemId",
        "content",
        "timestamp"
      ]
    },
    "Transaction": {
      "type": "object",
      "properties": {
        "transactionId": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the transaction."
        },
        "buyerId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the user who bought the item."
        },
        "sellerId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the user who sold the item."
        },
        "itemId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the item that was sold."
        },
        "transactionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the transaction took place."
        },
        "finalPrice": {
          "type": "number",
          "format": "float",
          "description": "Final agreed-upon price of the item.",
          "minimum": 0
        },
        "paymentMethod": {
          "type": "string",
          "description": "Method of payment used (e.g., 'Cash', 'OfferUp Payments')."
        },
        "shippingInfo": {
          "type": "object",
          "description": "Details about shipping if applicable.",
          "properties": {
            "trackingNumber": {
              "type": "string",
              "description": "Tracking number of the shipment"
            },
            "carrier": {
              "type": "string",
              "description": "Name of the shipping carrier"
            },
            "shippingCost": {
              "type": "number",
              "format": "float",
              "description": "Cost of shipping",
              "minimum": 0
            }
          }
        }
      },
      "required": [
        "transactionId",
        "buyerId",
        "sellerId",
        "itemId",
        "transactionDate",
        "finalPrice"
      ]
    }
  }
}{
  "users": [
    {
      "id": 1,
      "username": "awesomecreator",
      "email": "creator@example.com",
      "full_name": "Awesome Creator",
      "is_creator": true,
      "created_at": "2023-01-15T10:00:00Z"
    },
    {
      "id": 2,
      "username": "loyalpatron",
      "email": "patron@example.com",
      "full_name": "Loyal Patron",
      "is_creator": false,
      "created_at": "2023-02-20T14:30:00Z"
    }
  ],
  "creators": [
    {
      "user_id": 1,
      "campaign_id": 1
    }
  ],
  "campaigns": [
    {
      "id": 1,
      "creator_id": 1,
      "title": "Support My Art",
      "description": "Help me create amazing art!",
      "funding_goal": 1000.00,
      "current_funding": 250.00,
      "created_at": "2023-03-01T09:00:00Z"
    }
  ],
  // ... (tiers, pledges, posts, etc.)
}{
  "type": "object",
  "title": "PayPal App",
  "description": "JSON Schema for a simplified PayPal application",
  "properties": {
    "users": {
      "type": "array",
      "description": "List of registered users",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique user identifier (UUID)"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "password": {
            "type": "string",
            "description": "User's password (should be hashed in a real system)"
          },
          "firstName": {
            "type": "string",
            "description": "User's first name"
          },
          "lastName": {
            "type": "string",
            "description": "User's last name"
          },
          "balance": {
            "type": "number",
            "format": "float",
            "description": "User's account balance",
            "minimum": 0
          },
          "verified": {
            "type": "boolean",
            "description": "Indicates if the user's account is verified"
          },
          "addresses": {
            "type": "array",
            "description": "List of user's addresses",
            "items": {
              "type": "object",
              "properties": {
                "street": {
                  "type": "string",
                  "description": "Street address"
                },
                "city": {
                  "type": "string",
                  "description": "City"
                },
                "state": {
                  "type": "string",
                  "description": "State/Province"
                },
                "zipCode": {
                  "type": "string",
                  "description": "Zip/Postal code"
                },
                "country": {
                  "type": "string",
                  "description": "Country code (e.g., US, CA)"
                }
              },
              "required": [
                "street",
                "city",
                "zipCode",
                "country"
              ]
            }
          },
          "paymentMethods": {
            "type": "array",
            "description": "List of user's linked payment methods",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "credit_card",
                    "bank_account",
                    "paypal_balance"
                  ],
                  "description": "Type of payment method"
                },
                "cardNumber": {
                  "type": "string",
                  "description": "Credit card number (masked in a real system)"
                },
                "expiryDate": {
                  "type": "string",
                  "format": "date",
                  "description": "Credit card expiry date (MM/YY format)"
                },
                "cvv": {
                  "type": "string",
                  "description": "Credit card security code (CVV)"
                },
                "bankAccountNumber": {
                  "type": "string",
                  "description": "Bank account number"
                },
                "routingNumber": {
                  "type": "string",
                  "description": "Bank routing number"
                }
              },
              "required": [
                "type"
              ],
              "oneOf": [
                {
                  "required": [
                    "cardNumber",
                    "expiryDate",
                    "cvv"
                  ]
                },
                {
                  "required": [
                    "bankAccountNumber",
                    "routingNumber"
                  ]
                },
                {
                  "properties": {
                    "type": {
                      "const": "paypal_balance"
                    }
                  },
                  "required": [
                    "type"
                  ]
                }
              ]
            }
          }
        },
        "required": [
          "id",
          "email",
          "password",
          "balance"
        ]
      }
    },
    "transactions": {
      "type": "array",
      "description": "List of transactions",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique transaction identifier (UUID)"
          },
          "senderId": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the sender"
          },
          "receiverId": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the receiver"
          },
          "amount": {
            "type": "number",
            "format": "float",
            "description": "Transaction amount",
            "minimum": 0
          },
          "currency": {
            "type": "string",
            "description": "Currency code (e.g., USD, EUR)",
            "default": "USD"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Transaction timestamp"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "completed",
              "failed",
              "refunded"
            ],
            "description": "Transaction status"
          },
          "description": {
            "type": "string",
            "description": "Optional transaction description"
          }
        },
        "required": [
          "id",
          "senderId",
          "receiverId",
          "amount",
          "currency",
          "timestamp",
          "status"
        ]
      }
    }
  },
  "required": [
    "users",
    "transactions"
  ]
}{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "PeerTube Instance Metadata",
  "description": "Schema for a PeerTube instance's metadata, including information about videos, users, channels, and other related entities.",
  "type": "object",
  "properties": {
    "instance": {
      "type": "object",
      "description": "General information about the PeerTube instance.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the PeerTube instance."
        },
        "shortDescription": {
          "type": "string",
          "description": "A short description of the instance."
        },
        "description": {
          "type": "string",
          "description": "A longer description of the instance."
        },
        "terms": {
          "type": "string",
          "description": "A URL to the terms of service of the instance."
        },
        "version": {
          "type": "string",
          "description": "The version of PeerTube the instance is running."
        },
        "software": {
          "type": "object",
          "description": "Software information",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of software - should always be peertube",
              "const": "peertube"
            },
            "version": {
              "type": "string",
              "description": "Version of peertube"
            }
          },
          "required": [
            "name",
            "version"
          ]
        },
        "isNSFW": {
          "type": "boolean",
          "description": "Whether the instance allows NSFW content."
        },
        "configuration": {
          "type": "object",
          "description": "Configuration settings of the instance.",
          "properties": {
            "videos": {
              "type": "object",
              "description": "Video-related configurations.",
              "properties": {
                "maxFileSize": {
                  "type": "integer",
                  "description": "Maximum file size for uploads (in bytes)."
                },
                "maxResolutions": {
                  "type": "object",
                  "description": "Maximum allowed video resolutions.",
                  "properties": {
                    "p144": {
                      "type": "boolean"
                    },
                    "p240": {
                      "type": "boolean"
                    },
                    "p360": {
                      "type": "boolean"
                    },
                    "p480": {
                      "type": "boolean"
                    },
                    "p720": {
                      "type": "boolean"
                    },
                    "p1080": {
                      "type": "boolean"
                    },
                    "p1440": {
                      "type": "boolean"
                    },
                    "p2160": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "signup": {
              "type": "object",
              "description": "Signup configuration",
              "properties": {
                "enabled": {
                  "type": "boolean"
                },
                "requiresEmailVerification": {
                  "type": "boolean"
                }
              }
            },
            "user": {
              "type": "object",
              "description": "User related configuration",
              "properties": {
                "videoQuota": {
                  "type": "integer",
                  "description": "Quota limit for users",
                  "format": "int64"
                },
                "videoQuotaDaily": {
                  "type": "integer",
                  "description": "Daily quota limit for users",
                  "format": "int64"
                }
              }
            },
            "search": {
              "type": "object",
              "description": "Search related configurations",
              "properties": {
                "isIndexesEnabled": {
                  "type": "boolean"
                },
                "remoteUri": {
                  "type": "string",
                  "format": "url"
                }
              }
            }
          }
        },
        "stats": {
          "type": "object",
          "description": "Statistics about the instance.",
          "properties": {
            "totalVideos": {
              "type": "integer",
              "description": "The total number of videos on the instance."
            },
            "totalVideoViews": {
              "type": "integer",
              "description": "The total number of video views on the instance."
            },
            "totalUsers": {
              "type": "integer",
              "description": "The total number of users on the instance."
            }
          }
        }
      },
      "required": [
        "name",
        "version",
        "software"
      ]
    },
    "videos": {
      "type": "array",
      "description": "A list of videos on the instance.",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier of the video."
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The UUID of the video."
          },
          "shortUUID": {
            "type": "string",
            "description": "A shorter version of the UUID",
            "maxLength": 8
          },
          "url": {
            "type": "string",
            "format": "url",
            "description": "The URL of the video on the instance."
          },
          "name": {
            "type": "string",
            "description": "The title of the video."
          },
          "category": {
            "type": "object",
            "description": "Video category",
            "properties": {
              "id": {
                "type": "integer"
              },
              "label": {
                "type": "string"
              }
            }
          },
          "licence": {
            "type": "object",
            "description": "Video licence",
            "properties": {
              "id": {
                "type": "integer"
              },
              "label": {
                "type": "string"
              }
            }
          },
          "language": {
            "type": "object",
            "description": "Video language",
            "properties": {
              "id": {
                "type": "string"
              },
              "label": {
                "type": "string"
              }
            }
          },
          "description": {
            "type": "string",
            "description": "The description of the video."
          },
          "duration": {
            "type": "integer",
            "description": "The duration of the video in seconds."
          },
          "isLive": {
            "type": "boolean"
          },
          "isLocal": {
            "type": "boolean",
            "description": "Whether the video is hosted locally on the instance."
          },
          "publishedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time the video was published."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date of last update"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          },
          "views": {
            "type": "integer",
            "description": "The number of views the video has received."
          },
          "likes": {
            "type": "integer",
            "description": "The number of likes the video has received"
          },
          "dislikes": {
            "type": "integer",
            "description": "The number of dislikes the video has received"
          },
          "thumbnailPath": {
            "type": "string",
            "description": "The path to the video's thumbnail image."
          },
          "previewPath": {
            "type": "string",
            "description": "Path to video preview"
          },
          "embedPath": {
            "type": "string",
            "description": "Path to embed the video"
          },
          "isNSFW": {
            "type": "boolean",
            "description": "Whether the video is marked as NSFW."
          },
          "isPrivate": {
            "type": "boolean",
            "description": "Whether the video is private"
          },
          "tags": {
            "type": "array",
            "description": "Video tags",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "tag": {
                  "type": "string"
                }
              },
              "required": [
                "id",
                "tag"
              ]
            }
          },
          "channel": {
            "type": "object",
            "description": "The channel that the video belongs to.",
            "properties": {
              "id": {
                "type": "integer",
                "description": "The unique identifier of the channel."
              },
              "url": {
                "type": "string",
                "format": "url",
                "description": "The URL of the channel."
              },
              "name": {
                "type": "string",
                "description": "The name of the channel."
              },
              "description": {
                "type": "string",
                "description": "Channel description"
              },
              "support": {
                "type": "string",
                "description": "Channel support text"
              },
              "avatar": {
                "$ref": "#/definitions/avatar"
              },
              "ownerAccount": {
                "type": "object",
                "description": "Channel owner information",
                "properties": {
                  "id": {
                    "type": "integer"
                  },
                  "url": {
                    "type": "string",
                    "format": "url"
                  },
                  "name": {
                    "type": "string"
                  },
                  "host": {
                    "type": "string"
                  },
                  "avatars": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/avatar"
                    }
                  },
                  "avatar": {
                    "$ref": "#/definitions/avatar"
                  },
                  "banner": {
                    "$ref": "#/definitions/avatar"
                  }
                },
                "required": [
                  "id",
                  "url",
                  "name",
                  "host"
                ]
              }
            },
            "required": [
              "id",
              "url",
              "name",
              "ownerAccount"
            ]
          },
          "files": {
            "type": "array",
            "description": "Files associated with the video.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "File id"
                },
                "filename": {
                  "type": "string",
                  "description": "The filename of the video file."
                },
                "fileUrl": {
                  "type": "string",
                  "format": "url",
                  "description": "URL of the file"
                },
                "magnetUri": {
                  "type": "string",
                  "description": "Magnet URI for the file"
                },
                "metadata": {
                  "type": "object",
                  "description": "Metadata information",
                  "properties": {
                    "fps": {
                      "type": "integer"
                    },
                    "resolution": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "label": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "size": {
                  "type": "integer",
                  "format": "int64"
                },
                "torrentUrl": {
                  "type": "string",
                  "format": "url"
                }
              },
              "required": [
                "id",
                "filename",
                "fileUrl"
              ]
            }
          },
          "streamingPlaylists": {
            "type": "array",
            "description": "Streaming playlists (HLS for example)",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "integer"
                },
                "playlistUrl": {
                  "type": "string",
                  "format": "url"
                },
                "files": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "fileUrl": {
                        "type": "string",
                        "format": "url"
                      },
                      "resolution": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer"
                          },
                          "label": {
                            "type": "string"
                          }
                        }
                      },
                      "size": {
                        "type": "integer",
                        "format": "int64"
                      }
                    },
                    "required": [
                      "id",
                      "fileUrl",
                      "resolution"
                    ]
                  }
                },
                "segmentsSha256Url": {
                  "type": "string",
                  "format": "url"
                }
              },
              "required": [
                "id",
                "type",
                "playlistUrl"
              ]
            }
          },
          "account": {
            "type": "object",
            "description": "Video uploader information",
            "properties": {
              "id": {
                "type": "integer"
              },
              "url": {
                "type": "string",
                "format": "url"
              },
              "name": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "followingCount": {
                "type": "integer"
              },
              "followersCount": {
                "type": "integer"
              },
              "avatars": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/avatar"
                }
              },
              "avatar": {
                "$ref": "#/definitions/avatar"
              }
            },
            "required": [
              "id",
              "url",
              "name",
              "host"
            ]
          },
          "blacklisted": {
            "type": "boolean",
            "description": "Whether the video is blacklisted"
          },
          "blacklistedReason": {
            "type": "string",
            "description": "Reason for blacklisting"
          },
          "waitTranscoding": {
            "type": "boolean"
          },
          "state": {
            "type": "object",
            "description": "Video state",
            "properties": {
              "id": {
                "type": "integer"
              },
              "label": {
                "type": "string"
              }
            }
          },
          "trackerUrls": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "url"
            }
          },
          "commentsEnabled": {
            "type": "boolean"
          },
          "downloadEnabled": {
            "type": "boolean"
          },
          "support": {
            "type": "string"
          },
          "originallyPublishedAt": {
            "type": "string",
            "format": "date-time"
          },
          "privacy": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "enum": [
                  1,
                  2,
                  3,
                  4
                ]
              },
              "label": {
                "type": "string",
                "enum": [
                  "Public",
                  "Unlisted",
                  "Private",
                  "Internal"
                ]
              }
            }
          }
        },
        "required": [
          "id",
          "uuid",
          "url",
          "name",
          "isLocal",
          "channel",
          "account"
        ]
      }
    },
    "users": {
      "type": "array",
      "description": "A list of users on the instance.",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier of the user."
          },
          "name": {
            "type": "string",
            "description": "The username of the user."
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the user"
          },
          "url": {
            "type": "string",
            "format": "url"
          },
          "host": {
            "type": "string"
          },
          "avatar": {
            "$ref": "#/definitions/avatar"
          },
          "banner": {
            "$ref": "#/definitions/avatar"
          },
          "description": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "followersCount": {
            "type": "integer"
          },
          "followingCount": {
            "type": "integer"
          },
          "videoQuota": {
            "type": "integer",
            "format": "int64"
          },
          "videoQuotaDaily": {
            "type": "integer",
            "format": "int64"
          },
          "role": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "label": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "id",
          "name",
          "url",
          "host"
        ]
      }
    },
    "channels": {
      "type": "array",
      "description": "A list of channels on the instance.",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier of the channel."
          },
          "name": {
            "type": "string",
            "description": "The name of the channel."
          },
          "url": {
            "type": "string",
            "format": "url",
            "description": "The URL of the channel."
          },
          "description": {
            "type": "string",
            "description": "The description of the channel."
          },
          "support": {
            "type": "string"
          },
          "isLocal": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ownerAccount": {
            "type": "object",
            "description": "Channel owner information",
            "properties": {
              "id": {
                "type": "integer"
              },
              "url": {
                "type": "string",
                "format": "url"
              },
              "name": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "avatars": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/avatar"
                }
              },
              "avatar": {
                "$ref": "#/definitions/avatar"
              }
            },
            "required": [
              "id",
              "url",
              "name",
              "host"
            ]
          },
          "avatar": {
            "$ref": "#/definitions/avatar"
          },
          "banner": {
            "$ref": "#/definitions/avatar"
          },
          "followersCount": {
            "type": "integer"
          },
          "followingCount": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "name",
          "url",
          "isLocal",
          "ownerAccount"
        ]
      }
    },
    "videoPlaylists": {
      "type": "array",
      "description": "Video playlists",
      "items": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "thumbnailPath": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "privacy": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "enum": [
                  1,
                  2,
                  3,
                  4
                ]
              },
              "label": {
                "type": "string",
                "enum": [
                  "Public",
                  "Unlisted",
                  "Private",
                  "Internal"
                ]
              }
            }
          },
          "ownerAccount": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "url": {
                "type": "string",
                "format": "url"
              },
              "avatar": {
                "$ref": "#/definitions/avatar"
              }
            },
            "required": [
              "id",
              "name",
              "host",
              "url"
            ]
          },
          "videoChannel": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "url": {
                "type": "string",
                "format": "url"
              },
              "avatar": {
                "$ref": "#/definitions/avatar"
              }
            },
            "required": [
              "id",
              "name",
              "url"
            ]
          },
          "isLocal": {
            "type": "boolean"
          },
          "type": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "label": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "uuid",
          "name",
          "isLocal"
        ]
      }
    },
    "videoComments": {
      "type": "array",
      "description": "Video comments",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "url": {
            "type": "string",
            "format": "url"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "account": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "url": {
                "type": "string",
                "format": "url"
              },
              "avatar": {
                "$ref": "#/definitions/avatar"
              }
            },
            "required": [
              "id",
              "name",
              "host",
              "url"
            ]
          },
          "video": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "uuid": {
                "type": "string",
                "format": "uuid"
              },
              "shortUUID": {
                "type": "string",
                "maxLength": 8
              },
              "url": {
                "type": "string",
                "format": "url"
              }
            },
            "required": [
              "id",
              "uuid",
              "url"
            ]
          },
          "totalReplies": {
            "type": "integer"
          },
          "text": {
            "type": "string"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "likes": {
            "type": "integer"
          },
          "dislikes": {
            "type": "integer"
          },
          "isApproved": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "url",
          "account",
          "video"
        ]
      }
    },
    "plugins": {
      "type": "array",
      "description": "A list of plugins installed on the instance.",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the plugin."
          },
          "version": {
            "type": "string",
            "description": "The version of the plugin."
          },
          "homepage": {
            "type": "string",
            "format": "url",
            "description": "URL to plugin homepage"
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "version",
          "enabled"
        ]
      }
    },
    "themes": {
      "type": "array",
      "description": "A list of themes installed on the instance.",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the theme."
          },
          "version": {
            "type": "string",
            "description": "The version of the theme."
          },
          "homepage": {
            "type": "string",
            "format": "url"
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "version",
          "enabled"
        ]
      }
    },
    "videoImports": {
      "type": "array",
      "description": "Video imports",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "state": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "label": {
                "type": "string"
              }
            }
          },
          "video": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "uuid": {
                "type": "string",
                "format": "uuid"
              },
              "shortUUID": {
                "type": "string",
                "maxLength": 8
              },
              "url": {
                "type": "string",
                "format": "url"
              },
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            }
          },
          "targetUrl": {
            "type": "string",
            "format": "url"
          },
          "error": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "finishedAt": {
            "type": "string",
            "format": "date-time"
          },
          "progress": {
            "type": "integer"
          },
          "failures": {
            "type": "integer"
          },
          "videoChannel": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "url": {
                "type": "string",
                "format": "url"
              },
              "avatar": {
                "$ref": "#/definitions/avatar"
              }
            },
            "required": [
              "id",
              "name",
              "url"
            ]
          },
          "magnetUri": {
            "type": "string"
          },
          "torrentName": {
            "type": "string"
          },
          "videoId": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "state"
        ]
      }
    },
    "videoRedundancies": {
      "type": "array",
      "description": "Video redundancies",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "video": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "uuid": {
                "type": "string",
                "format": "uuid"
              },
              "shortUUID": {
                "type": "string",
                "maxLength": 8
              },
              "url": {
                "type": "string",
                "format": "url"
              },
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            }
          },
          "type": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "url": {
            "type": "string",
            "format": "url"
          },
          "videoId": {
            "type": "integer"
          },
          "fileUrl": {
            "type": "string",
            "format": "url"
          }
        },
        "required": [
          "id",
          "video",
          "type",
          "createdAt"
        ]
      }
    }
  },
  "required": [
    "instance"
  ],
  "definitions": {
    "avatar": {
      "type": "object",
      "description": "Avatar information",
      "properties": {
        "id": {
          "type": "integer"
        },
        "filename": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "path": {
          "type": "string"
        },
        "url": {
          "type": "string",
          "format": "url"
        }
      },
      "required": [
        "id",
        "filename",
        "path",
        "url"
      ]
    }
  }
}{
  "type": "object",
  "title": "Pinterest App Schema",
  "description": "JSON Schema for a simplified representation of the Pinterest application data model.",
  "properties": {
    "users": {
      "type": "array",
      "description": "List of users in the Pinterest app.",
      "items": {
        "$ref": "#/definitions/user"
      }
    },
    "boards": {
      "type": "array",
      "description": "List of boards created by users.",
      "items": {
        "$ref": "#/definitions/board"
      }
    },
    "pins": {
      "type": "array",
      "description": "List of pins (images/videos with associated data).",
      "items": {
        "$ref": "#/definitions/pin"
      }
    },
    "interests": {
      "type": "array",
      "description": "List of predefined interests/topics that users can follow",
      "items": {
        "type": "string",
        "description": "Interest or topic name"
      }
    }
  },
  "definitions": {
    "user": {
      "type": "object",
      "description": "Represents a Pinterest user.",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the user."
        },
        "username": {
          "type": "string",
          "description": "User's unique username."
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "User's email address."
        },
        "first_name": {
          "type": "string",
          "description": "User's first name."
        },
        "last_name": {
          "type": "string",
          "description": "User's last name."
        },
        "bio": {
          "type": "string",
          "description": "User's profile description."
        },
        "profile_image_url": {
          "type": "string",
          "format": "URL",
          "description": "URL of the user's profile image."
        },
        "website": {
          "type": "string",
          "format": "URL",
          "description": "User's external website URL."
        },
        "followers": {
          "type": "array",
          "description": "List of users who follow this user",
          "items": {
            "type": "string",
            "format": "uuid",
            "description": "User ID of a follower"
          }
        },
        "following": {
          "type": "array",
          "description": "List of users that this user follows.",
          "items": {
            "type": "string",
            "format": "uuid",
            "description": "User ID of a user being followed"
          }
        },
        "interests": {
          "type": "array",
          "description": "List of interest IDs followed by the user.",
          "items": {
            "type": "string",
            "description": "Interest ID."
          }
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp indicating when the user account was created."
        }
      },
      "required": [
        "id",
        "username",
        "email"
      ]
    },
    "board": {
      "type": "object",
      "description": "Represents a Pinterest board.",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the board."
        },
        "name": {
          "type": "string",
          "description": "Name of the board."
        },
        "description": {
          "type": "string",
          "description": "Description of the board."
        },
        "owner_id": {
          "type": "string",
          "format": "uuid",
          "description": "User ID of the board's creator."
        },
        "is_secret": {
          "type": "boolean",
          "description": "Indicates whether the board is secret (private) or not."
        },
        "cover_image_url": {
          "type": "string",
          "format": "URL",
          "description": "URL of the board's cover image (optional)."
        },
        "pin_ids": {
          "type": "array",
          "description": "List of pin IDs that belong to this board.",
          "items": {
            "type": "string",
            "format": "uuid",
            "description": "Pin ID."
          }
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp indicating when the board was created."
        }
      },
      "required": [
        "id",
        "name",
        "owner_id"
      ]
    },
    "pin": {
      "type": "object",
      "description": "Represents a Pinterest pin.",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the pin."
        },
        "title": {
          "type": "string",
          "description": "Title of the pin."
        },
        "description": {
          "type": "string",
          "description": "Description of the pin."
        },
        "image_url": {
          "type": "string",
          "format": "URL",
          "description": "URL of the pin's image."
        },
        "link": {
          "type": "string",
          "format": "URL",
          "description": "URL of the website the pin links to (optional)."
        },
        "creator_id": {
          "type": "string",
          "format": "uuid",
          "description": "User ID of the pin's creator."
        },
        "board_id": {
          "type": "string",
          "format": "uuid",
          "description": "Board ID the pin is saved to (optional, initially can be null)."
        },
        "saves": {
          "type": "array",
          "description": "List of user IDs who have saved this pin.",
          "items": {
            "type": "string",
            "format": "uuid",
            "description": "User ID who saved the pin"
          }
        },
        "comments": {
          "type": "array",
          "description": "Comments on the pin.",
          "items": {
            "type": "object",
            "properties": {
              "user_id": {
                "type": "string",
                "format": "uuid",
                "description": "User ID of the commenter"
              },
              "text": {
                "type": "string",
                "description": "Comment text"
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Comment creation timestamp"
              }
            },
            "required": ["user_id", "text", "created_at"]
          }
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp indicating when the pin was created."
        },
        "tags": {
          "type": "array",
          "description": "Tags associated with the pin",
          "items": {
            "type": "string",
            "description": "Tag name"
          }
        }
      },
      "required": [
        "id",
        "image_url",
        "creator_id"
      ]
    }
  }
}{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Pokemon Go App Data",
  "description": "JSON Schema for the data used in the Pokemon Go mobile app.",
  "type": "object",
  "properties": {
    "player": {
      "type": "object",
      "description": "Information about the player.",
      "properties": {
        "trainer_id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the player."
        },
        "trainer_name": {
          "type": "string",
          "description": "Player's in-game name."
        },
        "team": {
          "type": "string",
          "enum": ["Mystic", "Valor", "Instinct", "None"],
          "description": "Team the player belongs to."
        },
        "level": {
          "type": "integer",
          "minimum": 1,
          "maximum": 50,
          "description": "Player's current level."
        },
        "experience": {
          "type": "integer",
          "description": "Player's current experience points."
        },
        "stardust": {
          "type": "integer",
          "description": "Amount of stardust the player has."
        },
        "coins": {
          "type": "integer",
          "description": "Amount of Pokecoins the player has."
        },
        "inventory": {
          "type": "array",
          "description": "Items in the player's inventory.",
          "items": {
            "type": "object",
            "properties": {
              "item_id": {
                "type": "string",
                "description": "Unique identifier for the item."
              },
              "quantity": {
                "type": "integer",
                "minimum": 0,
                "description": "Number of this item in the inventory."
              }
            },
            "required": ["item_id", "quantity"]
          }
        },
        "pokedex": {
          "type": "array",
          "description": "Pokemon species the player has seen and caught.",
          "items": {
            "type": "object",
            "properties": {
              "pokemon_id": {
                "type": "integer",
                "description": "Pokedex number of the Pokemon."
              },
              "seen": {
                "type": "boolean",
                "description": "Whether the player has seen this Pokemon."
              },
              "caught": {
                "type": "boolean",
                "description": "Whether the player has caught this Pokemon."
              }
            },
            "required": ["pokemon_id", "seen", "caught"]
          }
        },
        "pokemon_storage": {
          "type": "array",
          "description": "Pokemon currently in the player's storage.",
          "items": {
            "$ref": "#/definitions/pokemon"
          }
        },
        "friends": {
          "type": "array",
          "description": "List of the player's friends.",
          "items": {
            "type": "object",
            "properties": {
              "trainer_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier of the friend."
              },
              "trainer_name": {
                "type": "string",
                "description": "Friend's in-game name."
              },
              "friendship_level": {
                "type": "integer",
                "enum": [0, 1, 2, 3, 4],
                "description": "Current friendship level."
              }
            },
            "required": ["trainer_id", "trainer_name", "friendship_level"]
          }
        },
        "badges": {
          "type": "array",
          "description": "Badges earned by the player.",
          "items": {
            "type": "object",
            "properties": {
              "badge_id": {
                "type": "string",
                "description": "Unique identifier for the badge."
              },
              "level": {
                "type": "integer",
                "minimum": 0,
                "description": "Current level of the badge (e.g., Bronze, Silver, Gold)."
              }
            },
            "required": ["badge_id", "level"]
          }
        },
        "settings": {
          "type": "object",
          "description": "Player's in-game settings.",
          "properties": {
            "music": {
              "type": "boolean",
              "description": "Whether music is enabled."
            },
            "sfx": {
              "type": "boolean",
              "description": "Whether sound effects are enabled."
            },
            "vibration": {
              "type": "boolean",
              "description": "Whether vibration is enabled."
            },
            "battery_saver": {
              "type": "boolean",
              "description": "Whether battery saver mode is enabled."
            }
          },
          "required": ["music", "sfx", "vibration", "battery_saver"]
        }
      },
      "required": [
        "trainer_id",
        "trainer_name",
        "team",
        "level",
        "experience",
        "stardust",
        "coins",
        "inventory",
        "pokedex",
        "pokemon_storage",
        "friends",
        "badges"
      ]
    },
    "map_objects": {
      "type": "array",
      "description": "Objects on the game map.",
      "items": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["pokestop", "gym", "spawn_point"],
            "description": "Type of the map object."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the map object."
          },
          "latitude": {
            "type": "number",
            "format": "float",
            "minimum": -90,
            "maximum": 90,
            "description": "Latitude of the map object."
          },
          "longitude": {
            "type": "number",
            "format": "float",
            "minimum": -180,
            "maximum": 180,
            "description": "Longitude of the map object."
          },
          "name": {
            "type": "string",
            "description": "Name of the Pokestop or Gym (if applicable)."
          },
          "image_url": {
            "type": "string",
            "format": "URL",
            "description": "URL of the image associated with the Pokestop or Gym (if applicable)."
          },
          "team": {
            "type": "string",
            "enum": ["Mystic", "Valor", "Instinct", "None"],
            "description": "Team controlling the Gym (if applicable)."
          },
          "gym_details": {
            "type": "object",
            "description": "Details about the Gym, if the object is a Gym.",
            "properties": {
              "pokemon": {
                "type": "array",
                "description": "Pokemon defending the Gym.",
                "items": {
                  "$ref": "#/definitions/pokemon"
                }
              },
              "raid": {
                "type": "object",
                "description": "Raid details, if a Raid is active.",
                "properties": {
                  "raid_boss": {
                    "$ref": "#/definitions/pokemon",
                    "description": "The Pokemon that is the Raid Boss."
                  },
                  "level": {
                    "type": "integer",
                    "description": "Level of the Raid."
                  },
                  "start_time": {
                    "type": "integer",
                    "format": "unix-timestamp",
                    "description": "Start time of the Raid."
                  },
                  "end_time": {
                    "type": "integer",
                    "format": "unix-timestamp",
                    "description": "End time of the Raid."
                  }
                },
                "required": ["raid_boss", "level", "start_time", "end_time"]
              }
            },
            "required": ["pokemon"]
          },
          "nearby_pokemon": {
            "type": "array",
            "description": "Pokemon that are nearby a pokestop.",
            "items": {
              "$ref": "#/definitions/pokemon"
            }
          }
        },
        "required": ["type", "id", "latitude", "longitude"]
      }
    },
    "pokemon_data": {
      "type": "array",
      "description": "Static data about all Pokemon species.",
      "items": {
        "type": "object",
        "properties": {
          "pokemon_id": {
            "type": "integer",
            "description": "Pokedex number of the Pokemon."
          },
          "name": {
            "type": "string",
            "description": "Name of the Pokemon."
          },
          "types": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Normal", "Fire", "Water", "Electric", "Grass", "Ice",
                "Fighting", "Poison", "Ground", "Flying", "Psychic", "Bug",
                "Rock", "Ghost", "Dragon", "Dark", "Steel", "Fairy"
              ],
              "description": "Type of the Pokemon."
            },
            "minItems": 1,
            "maxItems": 2
          },
          "base_stats": {
            "type": "object",
            "properties": {
              "hp": {
                "type": "integer",
                "description": "Base HP stat."
              },
              "attack": {
                "type": "integer",
                "description": "Base Attack stat."
              },
              "defense": {
                "type": "integer",
                "description": "Base Defense stat."
              },
              "special_attack": {
                "type": "integer",
                "description": "Base Special Attack stat."
              },
              "special_defense": {
                "type": "integer",
                "description": "Base Special Defense stat."
              },
              "speed": {
                "type": "integer",
                "description": "Base Speed stat."
              }
            },
            "required": [
              "hp",
              "attack",
              "defense",
              "special_attack",
              "special_defense",
              "speed"
            ]
          },
          "height": {
            "type": "number",
            "format": "float",
            "description": "Average height of the Pokemon in meters."
          },
          "weight": {
            "type": "number",
            "format": "float",
            "description": "Average weight of the Pokemon in kilograms."
          },
          "description": {
            "type": "string",
            "description": "Pokedex description of the Pokemon."
          },
          "evolutions": {
            "type": "array",
            "description": "IDs of Pokemon this Pokemon can evolve into.",
            "items": {
              "type": "integer"
            }
          },
          "moves": {
            "type": "object",
            "properties": {
              "quick": {
                "type": "array",
                "description": "List of quick moves the Pokemon can learn.",
                "items": {
                  "$ref": "#/definitions/move"
                }
              },
              "charged": {
                "type": "array",
                "description": "List of charged moves the Pokemon can learn.",
                "items": {
                  "$ref": "#/definitions/move"
                }
              }
            },
            "required": ["quick", "charged"]
          },
          "rarity": {
            "type": "string",
            "enum": ["Common", "Uncommon", "Rare", "Mythic", "Legendary"],
            "description": "Rarity classification of the Pokemon."
          },
          "capture_rate": {
            "type": "number",
            "format": "float",
            "description": "Base capture rate of the Pokemon."
          },
          "flee_rate": {
            "type": "number",
            "format": "float",
            "description": "Base flee rate of the Pokemon."
          }
        },
        "required": [
          "pokemon_id",
          "name",
          "types",
          "base_stats",
          "height",
          "weight",
          "description"
        ]
      }
    },
    "item_data": {
      "type": "array",
      "description": "Static data about all items.",
      "items": {
        "type": "object",
        "properties": {
          "item_id": {
            "type": "string",
            "description": "Unique identifier for the item."
          },
          "name": {
            "type": "string",
            "description": "Name of the item."
          },
          "description": {
            "type": "string",
            "description": "Description of the item."
          },
          "type": {
            "type": "string",
            "enum": [
              "Pokeball",
              "Potion",
              "Revive",
              "Berry",
              "Incense",
              "Lure Module",
              "Incubator",
              "Special Item",
              "Raid Pass",
              "Camera",
              "Gift"
            ],
            "description": "Category of the item."
          },
          "image_url": {
            "type": "string",
            "format": "URL",
            "description": "URL of the image associated with the item."
          }
        },
        "required": ["item_id", "name", "description", "type"]
      }
    },
    "news_feed": {
      "type": "array",
      "description": "In-game news and announcements.",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the news item."
          },
          "title": {
            "type": "string",
            "description": "Title of the news item."
          },
          "content": {
            "type": "string",
            "description": "Content of the news item."
          },
          "image_url": {
            "type": "string",
            "format": "URL",
            "description": "URL of the image associated with the news item."
          },
          "timestamp": {
            "type": "integer",
            "format": "unix-timestamp",
            "description": "Timestamp of when the news item was published."
          }
        },
        "required": ["id", "title", "content", "timestamp"]
      }
    },
    "events": {
      "type": "array",
      "description": "In-game events.",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the event."
          },
          "name": {
            "type": "string",
            "description": "Name of the event."
          },
          "description": {
            "type": "string",
            "description": "Description of the event."
          },
          "start_time": {
            "type": "integer",
            "format": "unix-timestamp",
            "description": "Start time of the event."
          },
          "end_time": {
            "type": "integer",
            "format": "unix-timestamp",
            "description": "End time of the event."
          },
          "bonuses": {
            "type": "array",
            "description": "Bonuses active during the event.",
            "items": {
              "type": "string"
            }
          },
          "featured_pokemon": {
            "type": "array",
            "description": "Pokemon with increased spawn rates during the event.",
            "items": {
              "type": "integer"
            }
          }
        },
        "required": ["id", "name", "description", "start_time", "end_time"]
      }
    },
    "research_tasks": {
      "type": "array",
      "description": "Field and Special Research Tasks",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the research task."
          },
          "type": {
            "type": "string",
            "enum": ["field", "special"],
            "description": "Type of research task."
          },
          "objective": {
            "type": "string",
            "description": "Description of the research objective."
          },
          "reward": {
            "type": "object",
            "description": "Reward for completing the research task.",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["item", "pokemon_encounter", "stardust", "xp"],
                "description": "Type of reward."
              },
              "item_id": {
                "type": "string",
                "description": "ID of the item reward (if applicable)."
              },
              "quantity": {
                "type": "integer",
                "description": "Quantity of the item or resource reward (if applicable)."
              },
              "pokemon_id": {
                "type": "integer",
                "description": "ID of the Pokemon reward (if applicable)."
              }
            }
          },
          "quest_id": {
            "type": "string",
            "description": "ID of the quest this task belongs to (if applicable)."
          }
        },
        "required": ["id", "type", "objective", "reward"]
      }
    },
    "weather": {
      "type": "object",
      "description": "Current in-game weather information.",
      "properties": {
        "condition": {
          "type": "string",
          "enum": ["Clear", "Partly Cloudy", "Cloudy", "Rainy", "Windy", "Snowy", "Foggy"],
          "description": "Current weather condition."
        },
        "boosted_types": {
          "type": "array",
          "description": "Pokemon types that are boosted by the current weather.",
          "items": {
            "type": "string",
            "enum": [
              "Normal", "Fire", "Water", "Electric", "Grass", "Ice",
              "Fighting", "Poison", "Ground", "Flying", "Psychic", "Bug",
              "Rock", "Ghost", "Dragon", "Dark", "Steel", "Fairy"
            ]
          }
        },
        "updated_at": {
          "type": "integer",
          "format": "unix-timestamp",
          "description": "Timestamp of the last weather update."
        }
      },
      "required": ["condition", "boosted_types", "updated_at"]
    }
  },
  "required": [
    "player",
    "map_objects",
    "pokemon_data",
    "item_data",
    "news_feed"
  ],
  "definitions": {
    "pokemon": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for this specific Pokemon instance."
        },
        "pokemon_id": {
          "type": "integer",
          "description": "Pokedex number of the Pokemon."
        },
        "nickname": {
          "type": "string",
          "description": "Nickname given to the Pokemon by the player (if any)."
        },
        "cp": {
          "type": "integer",
          "description": "Combat Power of the Pokemon."
        },
        "hp": {
          "type": "integer",
          "description": "Current HP of the Pokemon."
        },
        "max_hp": {
          "type": "integer",
          "description": "Maximum HP of the Pokemon."
        },
        "iv_attack": {
          "type": "integer",
          "minimum": 0,
          "maximum": 15,
          "description": "Attack individual value (IV)."
        },
        "iv_defense": {
          "type": "integer",
          "minimum": 0,
          "maximum": 15,
          "description": "Defense individual value (IV)."
        },
        "iv_stamina": {
          "type": "integer",
          "minimum": 0,
          "maximum": 15,
          "description": "Stamina individual value (IV)."
        },
        "move_1": {
          "type": "string",
          "description": "ID of the Pokemon's first move (quick move)."
        },
        "move_2": {
          "type": "string",
          "description": "ID of the Pokemon's second move (charged move)."
        },
        "height": {
          "type": "number",
          "format": "float",
          "description": "Height of the Pokemon in meters."
        },
        "weight": {
          "type": "number",
          "format": "float",
          "description": "Weight of the Pokemon in kilograms."
        },
        "gender": {
          "type": "string",
          "enum": ["Male", "Female", "Genderless"],
          "description": "Gender of the Pokemon."
        },
        "is_shiny": {
          "type": "boolean",
          "description": "Whether the Pokemon is shiny."
        },
        "form": {
          "type": "string",
          "description": "Specific form of the Pokemon (e.g., Alolan, Galarian)."
        },
        "date_caught": {
          "type": "integer",
          "format": "unix-timestamp",
          "description": "Timestamp of when the Pokemon was caught."
        }
      },
      "required": [
        "id",
        "pokemon_id",
        "cp",
        "hp",
        "max_hp",
        "iv_attack",
        "iv_defense",
        "iv_stamina",
        "move_1",
        "move_2"
      ]
    },
    "move": {
      "type": "object",
      "properties": {
        "move_id": {
          "type": "string",
          "description": "Unique identifier for the move."
        },
        "name": {
          "type": "string",
          "description": "Name of the move."
        },
        "type": {
          "type": "string",
          "enum": [
            "Normal", "Fire", "Water", "Electric", "Grass", "Ice",
            "Fighting", "Poison", "Ground", "Flying", "Psychic", "Bug",
            "Rock", "Ghost", "Dragon", "Dark", "Steel", "Fairy"
          ],
          "description": "Type of the move."
        },
        "power": {
          "type": "integer",
          "description": "Power of the move."
        },
        "energy_delta": {
          "type": "integer",
          "description": "Energy gained or consumed by the move."
        },
        "duration": {
          "type": "integer",
          "description": "Duration of the move in milliseconds."
        },
        "damage_window_start": {
          "type": "integer",
          "description": "Start of the damage window in milliseconds."
        },
        "damage_window_end": {
          "type": "integer",
          "description": "End of the damage window in milliseconds."
        }
      },
      "required": ["move_id", "name", "type", "power", "energy_delta"]
    }
  }
}{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Reddit App Schema",
  "description": "JSON Schema for a simplified Reddit-like application",
  "type": "object",
  "properties": {
    "users": {
      "type": "array",
      "description": "List of users",
      "items": {
        "$ref": "#/definitions/user"
      }
    },
    "subreddits": {
      "type": "array",
      "description": "List of subreddits",
      "items": {
        "$ref": "#/definitions/subreddit"
      }
    },
    "posts": {
      "type": "array",
      "description": "List of posts",
      "items": {
        "$ref": "#/definitions/post"
      }
    },
    "comments": {
      "type": "array",
      "description": "List of comments",
      "items": {
        "$ref": "#/definitions/comment"
      }
    }
  },
  "definitions": {
    "user": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique identifier for the user",
          "readOnly": true
        },
        "username": {
          "type": "string",
          "description": "User's username",
          "minLength": 3,
          "maxLength": 20
        },
        "email": {
          "type": "string",
          "description": "User's email address",
          "format": "email"
        },
        "password": {
          "type": "string",
          "description": "User's password (hashed)",
          "minLength": 8,
          "writeOnly": true
        },
        "created_at": {
          "type": "string",
          "description": "Date and time the user was created",
          "format": "date-time",
          "readOnly": true
        },
        "karma": {
          "type": "integer",
          "description": "User's total karma points",
          "default": 0,
          "readOnly": true
        }
      },
      "required": [
        "username",
        "email",
        "password"
      ]
    },
    "subreddit": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique identifier for the subreddit",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Name of the subreddit (e.g., 'pics', 'funny')",
          "pattern": "^[a-zA-Z0-9_]+$",
          "minLength": 3,
          "maxLength": 21
        },
        "description": {
          "type": "string",
          "description": "Description of the subreddit",
          "maxLength": 500
        },
        "created_by": {
          "type": "integer",
          "description": "ID of the user who created the subreddit",
          "$ref": "#/definitions/user/properties/id"
        },
        "created_at": {
          "type": "string",
          "description": "Date and time the subreddit was created",
          "format": "date-time",
          "readOnly": true
        },
        "subscribers": {
          "type": "integer",
          "description": "Number of subscribers to the subreddit",
          "default": 0,
          "readOnly": true
        }
      },
      "required": [
        "name",
        "description",
        "created_by"
      ]
    },
    "post": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique identifier for the post",
          "readOnly": true
        },
        "title": {
          "type": "string",
          "description": "Title of the post",
          "maxLength": 300
        },
        "content": {
          "type": "string",
          "description": "Content of the post (text or URL)",
          "oneOf": [
            {"format": "url"},
            {"maxLength": 10000}
          ]
        },
        "author": {
          "type": "integer",
          "description": "ID of the user who created the post",
          "$ref": "#/definitions/user/properties/id"
        },
        "subreddit_id": {
          "type": "integer",
          "description": "ID of the subreddit the post belongs to",
          "$ref": "#/definitions/subreddit/properties/id"
        },
        "created_at": {
          "type": "string",
          "description": "Date and time the post was created",
          "format": "date-time",
          "readOnly": true
        },
        "upvotes": {
          "type": "integer",
          "description": "Number of upvotes",
          "default": 0,
          "readOnly": true
        },
        "downvotes": {
          "type": "integer",
          "description": "Number of downvotes",
          "default": 0,
          "readOnly": true
        },
        "vote_score": {
          "type": "integer",
          "description": "Calculated score (upvotes - downvotes)",
          "readOnly": true
        }
      },
      "required": [
        "title",
        "content",
        "author",
        "subreddit_id"
      ]
    },
    "comment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique identifier for the comment",
          "readOnly": true
        },
        "content": {
          "type": "string",
          "description": "Content of the comment",
          "maxLength": 10000
        },
        "author": {
          "type": "integer",
          "description": "ID of the user who wrote the comment",
          "$ref": "#/definitions/user/properties/id"
        },
        "post_id": {
          "type": "integer",
          "description": "ID of the post the comment belongs to",
          "$ref": "#/definitions/post/properties/id"
        },
        "parent_comment_id": {
          "type": ["integer", "null"],
          "description": "ID of the parent comment (if this is a reply)",
          "default": null,
          "$ref": "#/definitions/comment/properties/id"
        },
        "created_at": {
          "type": "string",
          "description": "Date and time the comment was created",
          "format": "date-time",
          "readOnly": true
        },
        "upvotes": {
          "type": "integer",
          "description": "Number of upvotes",
          "default": 0,
          "readOnly": true
        },
        "downvotes": {
          "type": "integer",
          "description": "Number of downvotes",
          "default": 0,
          "readOnly": true
        },
        "vote_score": {
          "type": "integer",
          "description": "Calculated score (upvotes - downvotes)",
          "readOnly": true
        }
      },
      "required": [
        "content",
        "author",
        "post_id"
      ]
    }
  }
}{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Robinhood API Schema",
  "description": "A JSON Schema representing a simplified model of key Robinhood API entities and their relationships.",
  "type": "object",
  "properties": {
    "user": {
      "type": "object",
      "description": "Represents a Robinhood user account.",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the user."
        },
        "username": {
          "type": "string",
          "description": "User's login username."
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "User's email address."
        },
        "first_name": {
          "type": "string",
          "description": "User's first name."
        },
        "last_name": {
          "type": "string",
          "description": "User's last name."
        },
        "account_number": {
          "type": "string",
          "description": "User's Robinhood account number."
        },
        "buying_power": {
          "type": "number",
          "format": "float",
          "description": "Amount of money available for trading."
        },
        "cash": {
          "type": "number",
          "format": "float",
          "description": "Amount of cash in the account"
        },
        "portfolio_cash":{
          "type": "number",
          "format": "float",
          "description": "The user's total portfolio cash"
        },
        "portfolio_value": {
          "type": "number",
          "format": "float",
          "description": "The total value of the user's portfolio"
        },
        "portfolio": {
          "type": "object",
          "description": "User's portfolio details.",
          "$ref": "#/properties/portfolio"
        },
        "orders": {
          "type": "array",
          "description": "List of orders placed by the user.",
          "items": {
            "$ref": "#/properties/order"
          }
        },
        "positions": {
          "type": "array",
          "description": "List of positions held by the user.",
          "items": {
            "$ref": "#/properties/position"
          }
        }
      },
      "required": [
        "id",
        "username",
        "email",
        "account_number"
      ]
    },
    "portfolio":{
      "type": "object",
      "description": "Represents the state of a user's portfolio",
      "properties": {
        "equity": {
          "type": "number",
          "format": "float",
          "description": "Equity"
        },
        "extended_hours_equity": {
          "type": "number",
          "format": "float",
          "description": "Extended hours equity"
        },
        "market_value": {
          "type": "number",
          "format": "float",
          "description": "Market value"
        },
        "extended_hours_market_value": {
          "type": "number",
          "format": "float",
          "description": "Extended hours market value"
        },
        "start_date": {
          "type": "string",
          "format": "date",
          "description": "The date that this portfolio's history begins"
        },
        "adjusted_equity_previous_close": {
          "type": "number",
          "format": "float",
          "description": "Adjusted equity previous close"
        },
        "previous_close": {
          "type": "number",
          "format": "float",
          "description": "Previous close"
        }
      }
    },
    "instrument": {
      "type": "object",
      "description": "Represents a financial instrument (e.g., stock, option).",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the instrument."
        },
        "url": {
          "type": "string",
          "format": "url",
          "description": "URL of the instrument on Robinhood."
        },
        "symbol": {
          "type": "string",
          "description": "Ticker symbol of the instrument (e.g., AAPL)."
        },
        "name": {
          "type": "string",
          "description": "Full name of the instrument (e.g., Apple Inc.)."
        },
        "simple_name": {
          "type": "string",
          "description": "Simple name"
        },
        "type": {
          "type": "string",
          "enum": [
            "stock",
            "option",
            "etf",
            "crypto",
            "adr"
          ],
          "description": "Type of the instrument."
        },
        "tradeable": {
          "type": "boolean",
          "description": "Whether the instrument is currently tradeable."
        },
        "fundamentals": {
          "type": "object",
          "description": "Fundamental data about the instrument",
          "$ref": "#/properties/fundamentals"
        },
        "quote": {
          "type": "object",
          "description": "Current quote data for the instrument.",
          "$ref": "#/properties/quote"
        }
      },
      "required": [
        "id",
        "symbol",
        "name",
        "type"
      ]
    },
    "fundamentals": {
      "type": "object",
      "description": "Holds fundamental data associated with a stock",
      "properties": {
        "open": {
          "type": "number",
          "format": "float",
          "description": "The opening price of the stock for the current day"
        },
        "high": {
          "type": "number",
          "format": "float",
          "description": "The highest price of the stock for the current day"
        },
        "low": {
          "type": "number",
          "format": "float",
          "description": "The lowest price of the stock for the current day"
        },
        "volume": {
          "type": "number",
          "format": "float",
          "description": "The volume of the stock"
        },
        "average_volume": {
          "type": "number",
          "format": "float",
          "description": "Average volume of the stock"
        },
        "high_52_weeks": {
          "type": "number",
          "format": "float",
          "description": "Highest price of the stock in the last 52 weeks"
        },
        "low_52_weeks": {
          "type": "number",
          "format": "float",
          "description": "Lowest price of the stock in the last 52 weeks"
        },
        "market_cap": {
          "type": "number",
          "format": "float",
          "description": "Market capitalization of the stock"
        },
        "dividend_yield": {
          "type": "number",
          "format": "float",
          "description": "The dividend yield of the stock"
        },
        "pe_ratio": {
          "type": "number",
          "format": "float",
          "description": "The price to earnings ratio of the stock"
        },
        "description": {
          "type": "string",
          "description": "A description of the stock and the issuing company"
        },
        "instrument": {
          "type": "string",
          "description": "A url pointing to the instrument associated with these fundamentals"
        }
      }
    },
    "quote": {
      "type": "object",
      "description": "Represents current market data for an instrument.",
      "properties": {
        "ask_price": {
          "type": "number",
          "format": "float",
          "description": "Current ask price."
        },
        "ask_size": {
          "type": "integer",
          "description": "Number of shares at the ask price."
        },
        "bid_price": {
          "type": "number",
          "format": "float",
          "description": "Current bid price."
        },
        "bid_size": {
          "type": "integer",
          "description": "Number of shares at the bid price."
        },
        "last_trade_price": {
          "type": "number",
          "format": "float",
          "description": "Price of the last trade."
        },
        "last_extended_hours_trade_price": {
          "type": "number",
          "format": "float",
          "description": "Price of the last trade during extended hours."
        },
        "previous_close": {
          "type": "number",
          "format": "float",
          "description": "Previous closing price."
        },
        "adjusted_previous_close": {
          "type": "number",
          "format": "float",
          "description": "Adjusted previous closing price."
        },
        "symbol": {
          "type": "string",
          "description": "Ticker symbol of the instrument."
        },
        "trading_halted": {
          "type": "boolean",
          "description": "Whether trading is currently halted for this instrument."
        },
        "instrument": {
          "type": "string",
          "format": "url",
          "description": "URL of the related instrument."
        }
      },
      "required": [
        "symbol",
        "instrument"
      ]
    },
    "order": {
      "type": "object",
      "description": "Represents an order to buy or sell an instrument.",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the order."
        },
        "instrument": {
          "type": "object",
          "description": "The financial instrument associated with this order",
          "$ref": "#/properties/instrument"
        },
        "account": {
          "type": "string",
          "format": "url",
          "description": "The account that placed this order"
        },
        "type": {
          "type": "string",
          "enum": [
            "market",
            "limit"
          ],
          "description": "Type of order (market or limit)."
        },
        "side": {
          "type": "string",
          "enum": [
            "buy",
            "sell"
          ],
          "description": "Side of the order (buy or sell)."
        },
        "quantity": {
          "type": "number",
          "description": "Number of shares or contracts."
        },
        "state": {
          "type": "string",
          "enum": [
            "queued",
            "unconfirmed",
            "confirmed",
            "partially_filled",
            "filled",
            "rejected",
            "canceled",
            "failed"
          ],
          "description": "Current state of the order."
        },
        "price": {
          "type": "number",
          "format": "float",
          "description": "Order price (for limit orders)."
        },
        "average_price": {
          "type": "number",
          "format": "float",
          "description": "Average price at which the order was filled."
        },
        "time_in_force": {
          "type": "string",
          "enum": [
            "gfd",
            "gtc",
            "ioc",
            "opg"
          ],
          "description": "Specifies how long the order will remain in effect"
        },
        "trigger": {
          "type": "string",
          "enum": [
            "immediate",
            "stop"
          ],
          "description": "Specifies whether the order should be triggered immediately or based on a certain condition"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of when the order was created."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of when the order was last updated."
        }
      },
      "required": [
        "id",
        "instrument",
        "type",
        "side",
        "quantity",
        "state"
      ]
    },
    "position": {
      "type": "object",
      "description": "Represents a user's position in a specific instrument.",
      "properties": {
        "instrument": {
          "type": "string",
          "format": "url",
          "description": "URL of the instrument."
        },
        "account": {
          "type": "string",
          "format": "url",
          "description": "URL of the account holding the position"
        },
        "quantity": {
          "type": "number",
          "description": "Number of shares or contracts held."
        },
        "average_buy_price": {
          "type": "number",
          "format": "float",
          "description": "Average price at which the position was acquired."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "The time at which the position was created"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "The time at which the position was last updated"
        }
      },
      "required": [
        "instrument",
        "quantity",
        "average_buy_price"
      ]
    },
    "market": {
      "type": "object",
      "description": "Represents data about a specific market",
      "properties": {
        "todays_hours": {
          "type": "string",
          "format": "url",
          "description": "The URL of the market's hours for today"
        },
        "url": {
          "type": "string",
          "format": "url",
          "description": "The URL of the market"
        },
        "website": {
          "type": "string",
          "format": "url",
          "description": "The URL of the market's website"
        },
        "country": {
          "type": "string",
          "description": "The country that this market is in"
        },
        "city": {
          "type": "string",
          "description": "The city that this market is in"
        },
        "name": {
          "type": "string",
          "description": "The name of the market"
        },
        "mic": {
          "type": "string",
          "description": "The market identification code"
        },
        "acronym": {
          "type": "string",
          "description": "The market's acronym"
        }
      },
      "required": [
        "url", "country", "name", "mic"
      ]
    }
  },
  "definitions": {}
}{
  "event": {
    "name": "Royal Rumble 2023",
    "date": "2023-01-28",
    "location": "Alamodome, San Antonio, Texas",
    "matches": [
      {
        "type": "Singles",
        "participants": [
          {
            "name": "Roman Reigns",
            "brand": "SmackDown"
          },
          {
            "name": "Kevin Owens",
            "brand": "RAW"
          }
        ],
        "winner": [
          {
            "name": "Roman Reigns"
          }
        ],
        "championship": "Undisputed WWE Universal Championship"
      }
    ]
  },
  "rumbleMatch": {
    "type": "Men's",
    "participants": [
      {
        "entryNumber": 1,
        "wrestler": {
          "name": "Gunther",
          "brand": "SmackDown"
        },
        "eliminatedBy": [
          {
            "name": "Cody Rhodes"
          }
        ],
        "eliminationTime": "01:11:40",
        "eliminations": 5
      },
      {
        "entryNumber": 30,
        "wrestler": {
          "name": "Cody Rhodes",
          "brand": "RAW"
        },
        "eliminations": 4
      },
      {
        "entryNumber": 3,
        "wrestler": {
          "name": "Edge",
          "brand": "RAW"
        },
        "eliminatedBy": [
          {
            "name": "Finn Bálor"
          },
          {
            "name": "Damian Priest"
          }
        ],
        "eliminationTime": "00:29:26",
        "eliminations": 3
      }
    ],
    "winner": 30
  }
}{
  "type": "object",
  "title": "Rumble Studio",
  "description": "Schema for a podcast creation and hosting platform like Rumble Studio",
  "properties": {
    "users": {
      "type": "array",
      "description": "List of users",
      "items": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the user"
          },
          "username": {
            "type": "string",
            "description": "User's display name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "password": {
            "type": "string",
            "description": "Hashed password (not stored in plain text)",
            "writeOnly": true
          },
          "subscription": {
            "type": "object",
            "description": "Subscription details if the user has one",
            "properties": {
              "plan": {
                "type": "string",
                "enum": ["free", "starter", "pro", "enterprise"],
                "description": "Subscription plan name"
              },
              "status": {
                "type": "string",
                "enum": ["active", "canceled", "past_due"],
                "description": "Current status of the subscription"
              },
              "renewalDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date of the next subscription renewal"
              }
            },
            "required": ["plan", "status"]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of user registration"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of last user update"
          }
        },
        "required": [
          "userId",
          "username",
          "email",
          "password",
          "createdAt",
          "updatedAt"
        ]
      }
    },
    "podcasts": {
      "type": "array",
      "description": "List of podcasts",
      "items": {
        "type": "object",
        "properties": {
          "podcastId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the podcast"
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the user who owns the podcast"
          },
          "title": {
            "type": "string",
            "description": "Title of the podcast"
          },
          "description": {
            "type": "string",
            "description": "Description of the podcast"
          },
          "category": {
            "type": "string",
            "description": "Category of the podcast (e.g., Technology, Comedy)"
          },
          "artworkUrl": {
            "type": "string",
            "format": "URL",
            "description": "URL to the podcast's artwork image"
          },
          "rssFeedUrl": {
            "type": "string",
            "format": "URL",
            "description": "URL to the podcast's RSS feed (generated by the platform)"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of podcast creation"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of last podcast update"
          }
        },
        "required": [
          "podcastId",
          "userId",
          "title",
          "description",
          "category",
          "rssFeedUrl",
          "createdAt",
          "updatedAt"
        ]
      }
    },
    "episodes": {
      "type": "array",
      "description": "List of podcast episodes",
      "items": {
        "type": "object",
        "properties": {
          "episodeId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the episode"
          },
          "podcastId": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the podcast the episode belongs to"
          },
          "title": {
            "type": "string",
            "description": "Title of the episode"
          },
          "description": {
            "type": "string",
            "description": "Description of the episode"
          },
          "audioUrl": {
            "type": "string",
            "format": "URL",
            "description": "URL to the episode's audio file"
          },
          "duration": {
            "type": "integer",
            "description": "Duration of the episode in seconds"
          },
          "publicationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the episode was published"
          },
          "status": {
            "type": "string",
            "enum": ["draft", "published", "scheduled"],
            "description": "Status of the episode"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of episode creation"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of last episode update"
          },
          "interviewees": {
            "type": "array",
            "description": "List of interviewees for this episode if it's an interview style podcast",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the interviewee"
                },
                "email": {
                  "type": "string",
                  "format": "email",
                  "description": "Email address of the interviewee"
                },
                "bio": {
                  "type": "string",
                  "description": "A short bio of the interviewee",
                  "maxLength": 500
                },
                "audioUrl": {
                  "type": "string",
                  "format": "URL",
                  "description": "URL of the audio file that was submitted by this guest"
                }
              },
              "required": ["name"]
            }
          }
        },
        "required": [
          "episodeId",
          "podcastId",
          "title",
          "description",
          "audioUrl",
          "duration",
          "publicationDate",
          "createdAt",
          "updatedAt"
        ]
      }
    },
    "audioFiles": {
      "type": "array",
      "description": "Storage metadata for audio files",
      "items": {
        "type": "object",
        "properties": {
          "fileId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the audio file"
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the user who uploaded this file"
          },
          "filename": {
            "type": "string",
            "description": "Original filename"
          },
          "filepath": {
            "type": "string",
            "description": "Path to the file in cloud storage (e.g., S3 bucket)"
          },
          "filetype": {
            "type": "string",
            "description": "File MIME type (e.g., audio/mpeg)"
          },
          "filesize": {
            "type": "integer",
            "description": "File size in bytes"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of file upload"
          }
        },
        "required": [
          "fileId",
          "userId",
          "filename",
          "filepath",
          "filetype",
          "filesize",
          "createdAt"
        ]
      }
    },
    "plans": {
      "type": "array",
      "description": "Available subscription plans",
      "items": {
        "type": "object",
        "properties": {
          "planId": {
            "type": "string",
            "enum": ["free", "starter", "pro", "enterprise"],
            "description": "Unique identifier for the plan"
          },
          "name": {
            "type": "string",
            "description": "Name of the plan (e.g. Free, Starter, Pro, Enterprise)"
          },
          "price": {
            "type": "number",
            "format": "float",
            "description": "Monthly price of the plan in USD"
          },
          "maxPodcasts": {
            "type": "integer",
            "description": "Maximum number of podcasts allowed on this plan"
          },
          "maxEpisodesPerMonth": {
            "type": "integer",
            "description": "Maximum number of episodes allowed per month"
          },
          "maxStorage": {
            "type": "string",
            "description": "Maximum storage space allowed (e.g., '5GB', 'Unlimited')"
          },
          "features": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of features included in the plan"
          }
        },
        "required": ["planId", "name", "price", "maxPodcasts", "maxEpisodesPerMonth", "maxStorage", "features"]
      }
    }
  },
  "required": [
    "users",
    "podcasts",
    "episodes",
    "audioFiles"
  ]
}{
  "type": "object",
  "properties": {
    "name": {
      "type": "string",
      "description": "The name of your app.",
      "minLength": 3,
      "maxLength": 60,
      "example": "My Awesome App"
    },
    "api_client": {
      "type": "object",
      "description": "API client configuration.",
      "properties": {
        "api_key": {
          "type": "string",
          "description": "Your app's API key.",
          "example": "your_api_key"
        },
        "api_secret_key": {
          "type": "string",
          "description": "Your app's API secret key.",
          "example": "your_api_secret_key"
        },
        "scopes": {
          "type": "array",
          "description": "The access scopes your app needs.",
          "items": {
            "type": "string",
            "enum": [
              "read_all_orders",
              "read_assigned_fulfillment_orders",
              "read_checkouts",
              "read_content",
              "read_customers",
              "read_draft_orders",
              "read_fulfillments",
              "read_gift_cards",
              "read_inventory",
              "read_locales",
              "read_locations",
              "read_merchant_managed_fulfillment_orders",
              "read_orders",
              "read_price_rules",
              "read_products",
              "read_product_listings",
              "read_reports",
              "read_resource_feedbacks",
              "read_script_tags",
              "read_shipping",
              "read_shopify_payments_disputes",
              "read_shopify_payments_payouts",
              "read_themes",
              "read_translations",
              "write_assigned_fulfillment_orders",
              "write_checkouts",
              "write_content",
              "write_customers",
              "write_draft_orders",
              "write_fulfillments",
              "write_gift_cards",
              "write_inventory",
              "write_locales",
              "write_locations",
              "write_merchant_managed_fulfillment_orders",
              "write_orders",
              "write_price_rules",
              "write_products",
              "write_reports",
              "write_resource_feedbacks",
              "write_script_tags",
              "write_shipping",
              "write_themes",
              "write_translations",
              "unauthenticated_read_checkouts",
              "unauthenticated_read_content",
              "unauthenticated_read_customers",
              "unauthenticated_read_customer_tags",
              "unauthenticated_read_product_listings",
              "unauthenticated_read_product_tags",
              "unauthenticated_read_product_inventory",
              "unauthenticated_read_collection_listings",
              "unauthenticated_write_checkouts",
              "unauthenticated_write_customers"
            ]
          },
          "example": [
            "read_products",
            "write_orders"
          ]
        },
        "redirect_uris": {
          "type": "array",
          "description": "Allowed redirection URLs after installation.",
          "items": {
            "type": "string",
            "format": "uri"
          },
          "example": [
            "https://myapp.com/auth/shopify/callback"
          ]
        },
        "webhook_subscriptions": {
          "type": "array",
          "description": "Webhook subscriptions for your app.",
          "items": {
            "type": "object",
            "properties": {
              "topic": {
                "type": "string",
                "description": "The webhook topic.",
                "enum": [
                  "app/uninstalled",
                  "carts/create",
                  "carts/update",
                  "checkouts/create",
                  "checkouts/delete",
                  "checkouts/update",
                  "collections/create",
                  "collections/delete",
                  "collections/update",
                  "collection_listings/add",
                  "collection_listings/remove",
                  "collection_listings/update",
                  "customers/create",
                  "customers/delete",
                  "customers/disable",
                  "customers/enable",
                  "customers/update",
                  "customer_groups/create",
                  "customer_groups/delete",
                  "customer_groups/update",
                  "draft_orders/create",
                  "draft_orders/delete",
                  "draft_orders/update",
                  "fulfillments/create",
                  "fulfillments/update",
                  "fulfillment_events/create",
                  "fulfillment_events/delete",
                  "inventory_items/create",
                  "inventory_items/delete",
                  "inventory_items/update",
                  "inventory_levels/connect",
                  "inventory_levels/disconnect",
                  "inventory_levels/update",
                  "locales/create",
                  "locales/update",
                  "locations/create",
                  "locations/delete",
                  "locations/update",
                  "orders/cancelled",
                  "orders/create",
                  "orders/delete",
                  "orders/edited",
                  "orders/fulfilled",
                  "orders/paid",
                  "orders/partially_fulfilled",
                  "orders/updated",
                  "order_transactions/create",
                  "products/create",
                  "products/delete",
                  "products/update",
                  "product_listings/add",
                  "product_listings/remove",
                  "product_listings/update",
                  "refunds/create",
                  "shop/update",
                  "themes/create",
                  "themes/delete",
                  "themes/publish",
                  "themes/update"
                ]
              },
              "address": {
                "type": "string",
                "description": "The URL where the webhook payload will be sent.",
                "format": "uri",
                "example": "https://myapp.com/webhooks/orders/create"
              },
              "format": {
                "type": "string",
                "description": "The format of the webhook payload (default: json).",
                "enum": [
                  "json",
                  "xml"
                ],
                "default": "json"
              },
              "private_metafield_namespaces": {
                "type": "array",
                "description": "An optional list of namespaces for private metafields that should be included in the webhook payload.",
                "items":{
                  "type": "string"
                }
              },
              "metafield_namespaces": {
                "type": "array",
                "description": "An optional list of namespaces for public metafields that should be included in the webhook payload.",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "topic",
              "address"
            ]
          }
        },
        "embedded": {
          "type": "boolean",
          "description": "Whether the app is embedded in the Shopify admin.",
          "default": true
        },
        "proxy_url": {
          "type": "string",
          "description": "The application proxy URL if applicable.",
          "format": "uri",
          "example": "https://myapp.com/app_proxy"
        },
        "pos_embedded": {
          "type": "boolean",
          "description": "Whether the app is embedded in Shopify POS.",
          "default": false
        }
      },
      "required": [
        "scopes",
        "redirect_uris"
      ]
    },
    "app_preferences": {
      "type": "object",
      "description": "App preferences configuration.",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL where the app preferences are managed. Only used for embedded apps.",
          "format": "uri",
          "example": "https://myapp.com/app_preferences"
        }
      },
      "required": [
        "url"
      ]
    },
    "app_proxy": {
      "type": "object",
      "description": "Application proxy configuration",
      "properties": {
        "proxy_url": {
          "type": "string",
          "description": "The proxy URL to a page in your app. If omitted, app proxy will not be enabled.",
          "format": "uri",
          "example": "https://app.com/proxy"
        },
        "subpath_prefix": {
          "type": "string",
          "description": "The subpath prefix defined in your application proxy. Do not include leading or trailing slashes.",
          "example": "tools",
          "pattern": "^[a-z\\-]+$"
        },
        "subpath": {
          "type": "string",
          "description": "The subpath that the app proxy will forward requests to. Do not include leading or trailing slashes. This value cannot include the words: admin, apps, settings, or application.",
          "example": "my-app-name",
          "pattern": "^[a-z\\-]+$"
        }
      },
      "required": [
        "proxy_url",
        "subpath_prefix",
        "subpath"
      ]
    },
    "contact_email": {
      "type": "string",
      "description": "The contact email for your app.",
      "format": "email",
      "example": "support@myapp.com"
    },
    "app_setup": {
      "type": "object",
      "description": "App setup information.",
      "properties": {
        "getting_started": {
          "type": "string",
          "description": "A short description of what the app does and how to get started.",
          "maxLength": 500,
          "example": "This app helps you manage your inventory more efficiently. To get started, go to the 'Products' tab and enable the app for each product."
        },
        "banner_image": {
          "type": "string",
          "description": "URL to a banner image for your app (1600x900).",
          "format": "uri",
          "example": "https://myapp.com/assets/banner.jpg"
        },
        "icon_image": {
          "type": "string",
          "description": "URL to an icon image for your app (512x512).",
          "format": "uri",
          "example": "https://myapp.com/assets/icon.png"
        },
        "dev_store_preview_enabled": {
          "type": "boolean",
          "description": "Whether the app can be previewed on development stores before being installed.",
          "default": false
        },
        "privacy_policy_url": {
          "type": "string",
          "description": "The URL to your app's privacy policy.",
          "format": "uri",
          "example": "https://myapp.com/privacy"
        },
        "terms_and_conditions_url": {
          "type": "string",
          "description": "The URL to your app's terms and conditions.",
          "format": "uri",
          "example": "https://myapp.com/terms"
        },
        "app_credentials": {
          "type": "object",
          "description": "App credentials information.",
          "properties": {
            "title": {
              "type": "string",
              "description": "Title for the credentials section",
              "example": "Connect your external service"
            },
            "description": {
              "type": "string",
              "description": "Description of what credentials are required",
              "example": "Enter your API key and secret to connect your account."
            }
          },
          "required": [
            "title",
            "description"
          ]
        },
        "features": {
          "type": "array",
          "description": "A list of the key features of your app.",
          "items": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "description": "Title of the feature.",
                "example": "Inventory Synchronization"
              },
              "description": {
                "type": "string",
                "description": "Description of the feature.",
                "example": "Keep your inventory levels in sync across multiple channels."
              },
              "image": {
                "type": "string",
                "description": "URL to an image showcasing the feature (600x400).",
                "format": "uri",
                "example": "https://myapp.com/assets/feature1.jpg"
              }
            },
            "required": [
              "title",
              "description"
            ]
          }
        }
      },
      "required": [
        "privacy_policy_url"
      ]
    }
  },
  "required": [
    "name",
    "api_client",
    "contact_email",
    "app_setup"
  ]
}{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Signal App Data Model",
  "description": "A JSON Schema representing the core data structures of the Signal messaging app.",
  "type": "object",
  "properties": {
    "users": {
      "type": "array",
      "description": "Registered users in the system.",
      "items": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the user."
          },
          "phoneNumber": {
            "type": "string",
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "description": "E.164 formatted phone number."
          },
          "publicKey": {
            "type": "string",
            "description": "User's public encryption key."
          },
          "privateKey": {
            "type": "string",
            "description": "User's private encryption key (should be stored securely and locally on device)."
          },
          "profile": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "User's display name."
              },
              "avatar": {
                "type": "string",
                "format": "URL",
                "description": "URL to the user's profile picture."
              },
              "about": {
                "type": "string",
                "description": "A short bio or status message."
              }
            },
            "required": [
              "name"
            ]
          },
          "registrationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the user registered."
          },
          "lastActive": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the user was last active."
          },
          "contacts": {
            "type": "array",
            "description": "List of the user's contacts who are also on Signal.",
            "items": {
              "type": "string",
              "format": "uuid",
              "description": "userId of a contact."
            }
          }
        },
        "required": [
          "userId",
          "phoneNumber",
          "publicKey",
          "privateKey",
          "profile"
        ]
      }
    },
    "conversations": {
      "type": "array",
      "description": "List of conversations (individual and group chats).",
      "items": {
        "type": "object",
        "properties": {
          "conversationId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the conversation."
          },
          "type": {
            "type": "string",
            "enum": [
              "one-to-one",
              "group"
            ],
            "description": "Type of conversation."
          },
          "participants": {
            "type": "array",
            "description": "List of user IDs participating in the conversation.",
            "items": {
              "type": "string",
              "format": "uuid",
              "description": "userId of a participant."
            },
            "minItems": 2
          },
          "groupMetadata": {
            "type": "object",
            "description": "Metadata for group conversations.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the group."
              },
              "avatar": {
                "type": "string",
                "format": "URL",
                "description": "URL to the group's profile picture."
              },
              "admins": {
                "type": "array",
                "description": "List of user IDs who are admins of the group.",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "required": [
              "name",
              "admins"
            ],
            "if": {
              "properties": {
                "type": {
                  "const": "group"
                }
              }
            },
            "then": {
              "required": [
                "groupMetadata"
              ]
            }
          },
          "messages": {
            "type": "array",
            "description": "List of messages in the conversation.",
            "items": {
              "type": "object",
              "properties": {
                "messageId": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the message."
                },
                "senderId": {
                  "type": "string",
                  "format": "uuid",
                  "description": "userId of the message sender."
                },
                "timestamp": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date and time the message was sent."
                },
                "content": {
                  "type": "object",
                  "description": "Encrypted message content.",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "text",
                        "attachment",
                        "groupUpdate",
                        "call",
                        "disappearingMessageTimerUpdate",
                        "viewOnce"
                      ],
                      "description": "Type of message content."
                    },
                    "ciphertext": {
                      "type": "string",
                      "description": "Base64 encoded encrypted message data."
                    },
                    "attachmentMetadata": {
                      "type": "object",
                      "description": "Metadata for attachments, only present if type is 'attachment'.",
                      "properties": {
                        "filename": {
                          "type": "string"
                        },
                        "contentType": {
                          "type": "string"
                        },
                        "size": {
                          "type": "integer"
                        },
                        "key": {
                          "type": "string",
                          "description": "Encryption key for the attachment"
                        }
                      },
                      "required": ["filename", "contentType", "size", "key"],
                      "if": {
                        "properties": {
                          "type": {
                            "const": "attachment"
                          }
                        }
                      },
                      "then": {
                        "required": [
                          "attachmentMetadata"
                        ]
                      }
                    },
                    "groupUpdateMetadata": {
                      "type": "object",
                      "description": "Metadata for group updates, like adding a user.",
                      "properties": {
                        "updatedBy": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "addedMembers": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "format": "uuid"
                          }
                        },
                        "removedMembers": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "format": "uuid"
                          }
                        },
                        "changedName": {
                          "type": "string"
                        },
                        "changedAvatar": {
                          "type": "string",
                          "format": "URL"
                        }
                      },
                      "if": {
                        "properties": {
                          "type": {
                            "const": "groupUpdate"
                          }
                        }
                      },
                      "then": {
                        "required": [
                          "groupUpdateMetadata"
                        ]
                      }
                    },
                    "callMetadata": {
                      "type": "object",
                      "description": "Metadata for calls",
                      "properties": {
                        "callType": {
                          "type": "string",
                          "enum": ["audio", "video"]
                        },
                        "duration": {
                          "type": "integer",
                          "description": "Call duration in seconds"
                        }
                      },
                      "required": ["callType"],
                      "if": {
                        "properties": {
                          "type": {
                            "const": "call"
                          }
                        }
                      },
                      "then": {
                        "required": [
                          "callMetadata"
                        ]
                      }
                    },
                    "disappearingMessageTimerMetadata": {
                      "type": "object",
                      "description": "Metadata for disappearing message timer updates",
                      "properties": {
                        "duration": {
                          "type": "integer",
                          "description": "Disappearing message duration in seconds. 0 means disabled."
                        }
                      },
                      "required": ["duration"],
                      "if": {
                        "properties": {
                          "type": {
                            "const": "disappearingMessageTimerUpdate"
                          }
                        }
                      },
                      "then": {
                        "required": [
                          "disappearingMessageTimerMetadata"
                        ]
                      }
                    },
                    "viewOnceMetadata": {
                      "type": "object",
                      "description": "Metadata for view-once messages",
                      "properties": {
                        "viewed": {
                          "type": "boolean",
                          "description": "Indicates if the message has been viewed"
                        }
                      },
                      "required": ["viewed"],
                      "if": {
                        "properties": {
                          "type": {
                            "const": "viewOnce"
                          }
                        }
                      },
                      "then": {
                        "required": [
                          "viewOnceMetadata"
                        ]
                      }
                    }
                  },
                  "required": [
                    "type",
                    "ciphertext"
                  ]
                },
                "readReceipts": {
                  "type": "array",
                  "description": "List of read receipts for the message.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "readerId": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "timestamp": {
                        "type": "string",
                        "format": "date-time"
                      }
                    },
                    "required": ["readerId", "timestamp"]
                  }
                },
                "deliveryReceipts": {
                  "type": "array",
                  "description": "List of delivery receipts for the message.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "recipientId": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "timestamp": {
                        "type": "string",
                        "format": "date-time"
                      }
                    },
                    "required": ["recipientId", "timestamp"]
                  }
                },
                "reactions": {
                  "type": "array",
                  "description": "List of reactions to the message.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "reactorId": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "emoji": {
                        "type": "string"
                      },
                      "timestamp": {
                        "type": "string",
                        "format": "date-time"
                      }
                    },
                    "required": ["reactorId", "emoji", "timestamp"]
                  }
                },
                "isExpired": {
                  "type": "boolean",
                  "description": "Indicates if the message has expired (for disappearing messages)."
                },
                "isForwarded": {
                  "type": "boolean",
                  "description": "Indicates if the message was forwarded."
                }
              },
              "required": [
                "messageId",
                "senderId",
                "timestamp",
                "content"
              ]
            }
          }
        },
        "required": [
          "conversationId",
          "type",
          "participants",
          "messages"
        ]
      }
    },
    "blockedUsers": {
      "type": "array",
      "description": "List of blocked users.",
      "items": {
        "type": "string",
        "format": "uuid",
        "description": "userId of a blocked user."
      }
    },
    "settings": {
      "type": "object",
      "description": "User-specific settings.",
      "properties": {
        "notifications": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean"
            },
            "sound": {
              "type": "string",
              "description": "Path to the notification sound file."
            },
            "vibrate": {
              "type": "boolean"
            },
            "preview": {
              "type": "string",
              "enum": ["show", "name", "none"]
            }
          },
          "required": ["enabled", "preview"]
        },
        "privacy": {
          "type": "object",
          "properties": {
            "readReceipts": {
              "type": "boolean"
            },
            "typingIndicators": {
              "type": "boolean"
            },
            "lastSeen": {
              "type": "string",
              "enum": ["everyone", "contacts", "nobody"]
            },
            "profile": {
              "type": "string",
              "enum": ["everyone", "contacts"]
            }
          },
          "required": [
            "readReceipts",
            "typingIndicators",
            "lastSeen",
            "profile"
          ]
        },
        "security": {
          "type": "object",
          "properties": {
            "screenLock": {
              "type": "boolean"
            },
            "screenSecurity": {
              "type": "boolean",
              "description": "Prevent screenshots and screen recording."
            },
            "registrationLock": {
              "type": "boolean",
              "description": "Require a PIN to re-register the phone number."
            },
            "changeNumber": {
              "type": "object",
              "description": "Allows to change phone number associated with account"
            }
          },
          "required": [
            "screenLock",
            "screenSecurity",
            "registrationLock"
          ]
        },
        "storage": {
          "type": "object",
          "properties": {
            "mediaAutoDownload": {
              "type": "object",
              "properties": {
                "wifi": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": ["photos", "audio", "videos", "documents"]
                  }
                },
                "mobileData": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": ["photos", "audio", "videos", "documents"]
                  }
                },
                "roaming": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": ["photos", "audio", "videos", "documents"]
                  }
                }
              },
              "required": ["wifi", "mobileData", "roaming"]
            },
            "keepMessages": {
              "type": "string",
              "enum": ["forever", "1 year", "30 days", "6 months"],
              "description": "How long to keep messages on the device."
            }
          },
          "required": ["mediaAutoDownload", "keepMessages"]
        }
      },
      "required": [
        "notifications",
        "privacy",
        "security",
        "storage"
      ]
    }
  },
  "required": [
    "users",
    "conversations"
  ]
}{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Skype Application",
  "description": "JSON Schema for a simplified representation of the Skype application.",
  "type": "object",
  "properties": {
    "users": {
      "type": "array",
      "description": "List of users in the Skype network.",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the user."
          },
          "username": {
            "type": "string",
            "description": "User's Skype username.",
            "minLength": 6,
            "maxLength": 32,
            "pattern": "^[a-zA-Z][a-zA-Z0-9\\.,\\-_]{5,31}$"
          },
          "displayName": {
            "type": "string",
            "description": "User's display name (can be different from username).",
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address (used for account recovery, etc.)."
          },
          "phoneNumber": {
            "type": "string",
            "description": "User's phone number (optional).",
            "pattern": "^\\+[1-9]\\d{1,14}$"
          },
          "status": {
            "type": "string",
            "description": "User's current online status.",
            "enum": ["Online", "Away", "Do Not Disturb", "Invisible", "Offline"]
          },
          "profilePicture": {
            "type": "string",
            "format": "URL",
            "description": "URL to the user's profile picture (optional)."
          },
          "contacts": {
            "type": "array",
            "description": "List of user IDs representing the user's contacts.",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "blockedUsers": {
            "type": "array",
            "description": "List of user IDs that this user has blocked.",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        },
        "required": [
          "id",
          "username",
          "displayName",
          "email"
        ]
      }
    },
    "conversations": {
      "type": "array",
      "description": "List of conversations.",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the conversation."
          },
          "type": {
            "type": "string",
            "description": "Type of conversation (e.g., 'one-to-one', 'group').",
            "enum": ["one-to-one", "group"]
          },
          "participants": {
            "type": "array",
            "description": "List of user IDs participating in the conversation.",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "minItems": 2
          },
          "messages": {
            "type": "array",
            "description": "List of messages in the conversation.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the message."
                },
                "senderId": {
                  "type": "string",
                  "format": "uuid",
                  "description": "User ID of the message sender."
                },
                "timestamp": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Timestamp of when the message was sent."
                },
                "content": {
                  "type": "string",
                  "description": "Content of the message (text, media URL, etc.).",
                  "maxLength": 10000
                },
                "type": {
                  "type": "string",
                  "description": "The type of content in the message",
                  "enum": ["text", "image", "video", "audio", "file", "contact", "location"]
                },
                "readBy": {
                  "type": "array",
                  "description": "List of user IDs who have read the message.",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              },
              "required": [
                "id",
                "senderId",
                "timestamp",
                "content",
                "type"
              ]
            }
          },
          "lastActivity": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of the last activity in the conversation."
          }
        },
        "required": [
          "id",
          "type",
          "participants",
          "messages"
        ]
      }
    },
    "groups": {
      "type": "array",
      "description": "List of groups",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the group"
          },
          "name": {
            "type": "string",
            "description": "The name of the group",
            "maxLength": 255
          },
          "members": {
            "type": "array",
            "description": "List of user IDs that are members of this group",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "admins": {
            "type": "array",
            "description": "List of user IDs that are admins in this group",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        },
        "required": ["id", "name", "members", "admins"]
      }
    },
    "calls": {
      "type": "array",
      "description": "Log of calls made or received.",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the call."
          },
          "participants": {
            "type": "array",
            "description": "List of user IDs participating in the call.",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the call started."
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the call ended."
          },
          "type": {
            "type": "string",
            "description": "Type of call (e.g., 'audio', 'video').",
            "enum": ["audio", "video"]
          },
          "status": {
            "type": "string",
            "description": "Status of the call (e.g., 'missed', 'answered', 'declined').",
            "enum": ["missed", "answered", "declined", "outgoing", "incoming"]
          }
        },
        "required": [
          "id",
          "participants",
          "startTime",
          "type",
          "status"
        ]
      }
    }
  },
  "required": [
    "users",
    "conversations",
    "groups",
    "calls"
  ]
}{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Slack App",
  "description": "Schema for a Slack App configuration",
  "type": "object",
  "properties": {
    "app_id": {
      "type": "string",
      "description": "Unique identifier for the Slack app",
      "pattern": "^A[A-Z0-9]{8,}$"
    },
    "app_name": {
      "type": "string",
      "description": "Name of the Slack app",
      "minLength": 1,
      "maxLength": 80
    },
    "app_description": {
      "type": "string",
      "description": "A short description of what the app does",
      "maxLength": 190
    },
    "long_description": {
      "type": "string",
      "description": "A longer, more detailed description of the app's capabilities and features",
      "maxLength": 5000
    },
    "is_distributed": {
      "type": "boolean",
      "description": "Indicates if the app is distributed on the Slack App Directory"
    },
    "is_workflow_app": {
      "type": "boolean",
      "description": "Indicates if the app is a workflow app"
    },
    "is_hosted": {
      "type": "boolean",
      "description": "Indicates if the app is hosted on Slack's infrastructure"
    },
    "verification_token": {
      "type": "string",
      "description": "Token used to verify requests from Slack (deprecated in favor of Signing Secret)"
    },
    "signing_secret": {
      "type": "string",
      "description": "Secret used to verify requests from Slack"
    },
    "bot_user": {
      "type": "object",
      "description": "Configuration for the app's bot user",
      "properties": {
        "always_online": {
          "type": "boolean",
          "description": "Whether the bot user should always appear online"
        },
        "display_name": {
          "type": "string",
          "description": "Display name for the bot user (e.g., @mybot)",
          "minLength": 1,
          "maxLength": 80
        }
      },
      "required": [
        "display_name"
      ]
    },
    "oauth_config": {
      "type": "object",
      "description": "OAuth 2.0 configuration for the app",
      "properties": {
        "client_id": {
          "type": "string",
          "description": "OAuth Client ID",
          "pattern": "^\\d{12,}\\.\\d{12,}$"
        },
        "client_secret": {
          "type": "string",
          "description": "OAuth Client Secret"
        },
        "redirect_urls": {
          "type": "array",
          "description": "List of allowed redirect URLs for OAuth",
          "items": {
            "type": "string",
            "format": "uri"
          },
          "minItems": 1
        },
        "scopes": {
          "type": "array",
          "description": "List of OAuth scopes the app requires",
          "items": {
            "type": "string",
            "description": "A valid Slack OAuth scope",
            "enum": [
              "admin",
              "admin.apps:read",
              "admin.apps:write",
              "admin.conversations:read",
              "admin.conversations:write",
              "admin.invites:read",
              "admin.invites:write",
              "admin.teams:read",
              "admin.teams:write",
              "admin.users:read",
              "admin.users:write",
              "admin.usergroups:read",
              "admin.usergroups:write",
              "admin.workspaces:read",
              "admin.workspaces:write",
              "app_mentions:read",
              "auditlogs:read",
              "authorizations:read",
              "bookmarks:read",
              "bookmarks:write",
              "calls:read",
              "calls:write",
              "channels:history",
              "channels:join",
              "channels:manage",
              "channels:read",
              "channels:write",
              "chat:write",
              "chat:write:bot",
              "chat:write:user",
              "conversations:history",
              "conversations:write",
              "dnd:read",
              "dnd:write",
              "emoji:read",
              "files:read",
              "files:write",
              "files:write:user",
              "groups:history",
              "groups:read",
              "groups:write",
              "identity.basic",
              "identity.email",
              "identity.team",
              "identity.avatar",
              "im:history",
              "im:read",
              "im:write",
              "links:read",
              "links:write",
              "metadata.message:read",
              "mpim:history",
              "mpim:read",
              "mpim:write",
              "openid",
              "pins:read",
              "pins:write",
              "profile",
              "reactions:read",
              "reactions:write",
              "reminders:read",
              "reminders:write",
              "remote_files:read",
              "remote_files:share",
              "remote_files:write",
              "search:read",
              "stars:read",
              "stars:write",
              "team:read",
              "tokens.basic",
              "usergroups:read",
              "usergroups:write",
              "users.profile:read",
              "users.profile:write",
              "users:read",
              "users:read.email",
              "users:write",
              "workflow.steps:execute",
              "none"
            ]
          },
          "uniqueItems": true
        },
        "user_scopes": {
          "type": "array",
          "description": "List of user token OAuth scopes the app requires (if applicable)",
          "items": {
            "type": "string",
            "description": "A valid Slack user token OAuth scope (see 'scopes' for possible values)",
            "enum": [
              "admin",
              "admin.apps:read",
              "admin.apps:write",
              "admin.conversations:read",
              "admin.conversations:write",
              "admin.invites:read",
              "admin.invites:write",
              "admin.teams:read",
              "admin.teams:write",
              "admin.users:read",
              "admin.users:write",
              "admin.usergroups:read",
              "admin.usergroups:write",
              "admin.workspaces:read",
              "admin.workspaces:write",
              "app_mentions:read",
              "auditlogs:read",
              "authorizations:read",
              "bookmarks:read",
              "bookmarks:write",
              "calls:read",
              "calls:write",
              "channels:history",
              "channels:join",
              "channels:manage",
              "channels:read",
              "channels:write",
              "chat:write",
              "chat:write:bot",
              "chat:write:user",
              "conversations:history",
              "conversations:write",
              "dnd:read",
              "dnd:write",
              "emoji:read",
              "files:read",
              "files:write",
              "files:write:user",
              "groups:history",
              "groups:read",
              "groups:write",
              "identity.basic",
              "identity.email",
              "identity.team",
              "identity.avatar",
              "im:history",
              "im:read",
              "im:write",
              "links:read",
              "links:write",
              "metadata.message:read",
              "mpim:history",
              "mpim:read",
              "mpim:write",
              "openid",
              "pins:read",
              "pins:write",
              "profile",
              "reactions:read",
              "reactions:write",
              "reminders:read",
              "reminders:write",
              "remote_files:read",
              "remote_files:share",
              "remote_files:write",
              "search:read",
              "stars:read",
              "stars:write",
              "team:read",
              "tokens.basic",
              "usergroups:read",
              "usergroups:write",
              "users.profile:read",
              "users.profile:write",
              "users:read",
              "users:read.email",
              "users:write",
              "workflow.steps:execute",
              "none"
            ]
          },
          "uniqueItems": true
        }
      },
      "required": [
        "client_id",
        "client_secret",
        "scopes"
      ]
    },
    "event_subscriptions": {
      "type": "object",
      "description": "Configuration for Event Subscriptions",
      "properties": {
        "request_url": {
          "type": "string",
          "description": "URL where Slack will send events",
          "format": "uri"
        },
        "bot_events": {
          "type": "array",
          "description": "List of bot events the app subscribes to",
          "items": {
            "type": "string",
            "description": "A valid Slack bot event type",
            "enum": [
              "app_mention",
              "app_rate_limited",
              "app_uninstalled",
              "call_rejected",
              "channel_archive",
              "channel_created",
              "channel_deleted",
              "channel_history_changed",
              "channel_id_changed",
              "channel_left",
              "channel_rename",
              "channel_unarchive",
              "dnd_updated",
              "email_domain_changed",
              "emoji_changed",
              "file_change",
              "file_comment_added",
              "file_comment_deleted",
              "file_comment_edited",
              "file_created",
              "file_deleted",
              "file_public",
              "file_shared",
              "file_unshared",
              "grid_migration_finished",
              "grid_migration_started",
              "group_archive",
              "group_close",
              "group_deleted",
              "group_history_changed",
              "group_left",
              "group_open",
              "group_rename",
              "group_unarchive",
              "im_close",
              "im_created",
              "im_history_changed",
              "im_open",
              "link_shared",
              "member_joined_channel",
              "member_left_channel",
              "message",
              "message.channels",
              "message.groups",
              "message.im",
              "message.mpim",
              "pin_added",
              "pin_removed",
              "reaction_added",
              "reaction_removed",
              "resources_added",
              "resources_removed",
              "scope_denied",
              "scope_granted",
              "shared_channel_invite_accepted",
              "shared_channel_invite_approved",
              "shared_channel_invite_declined",
              "shared_channel_invite_received",
              "star_added",
              "star_removed",
              "subteam_created",
              "subteam_members_changed",
              "subteam_self_added",
              "subteam_self_removed",
              "subteam_updated",
              "team_domain_change",
              "team_join",
              "team_rename",
              "tokens_revoked",
              "url_verification",
              "user_change",
              "user_huddle_changed",
              "user_profile_changed",
              "user_resource_denied",
              "user_resource_granted",
              "user_resource_removed",
              "user_status_changed",
              "workflow_deleted",
              "workflow_published",
              "workflow_step_deleted",
              "workflow_step_execute",
              "workflow_unpublished"
            ]
          },
          "uniqueItems": true
        },
        "user_events": {
          "type": "array",
          "description": "List of user events the app subscribes to (requires user token scopes)",
          "items": {
            "type": "string",
            "description": "A valid Slack user event type (see 'bot_events' for possible values)",
            "enum": [
              "app_mention",
              "app_rate_limited",
              "app_uninstalled",
              "call_rejected",
              "channel_archive",
              "channel_created",
              "channel_deleted",
              "channel_history_changed",
              "channel_id_changed",
              "channel_left",
              "channel_rename",
              "channel_unarchive",
              "dnd_updated",
              "email_domain_changed",
              "emoji_changed",
              "file_change",
              "file_comment_added",
              "file_comment_deleted",
              "file_comment_edited",
              "file_created",
              "file_deleted",
              "file_public",
              "file_shared",
              "file_unshared",
              "grid_migration_finished",
              "grid_migration_started",
              "group_archive",
              "group_close",
              "group_deleted",
              "group_history_changed",
              "group_left",
              "group_open",
              "group_rename",
              "group_unarchive",
              "im_close",
              "im_created",
              "im_history_changed",
              "im_open",
              "link_shared",
              "member_joined_channel",
              "member_left_channel",
              "message",
              "message.channels",
              "message.groups",
              "message.im",
              "message.mpim",
              "pin_added",
              "pin_removed",
              "reaction_added",
              "reaction_removed",
              "resources_added",
              "resources_removed",
              "scope_denied",
              "scope_granted",
              "shared_channel_invite_accepted",
              "shared_channel_invite_approved",
              "shared_channel_invite_declined",
              "shared_channel_invite_received",
              "star_added",
              "star_removed",
              "subteam_created",
              "subteam_members_changed",
              "subteam_self_added",
              "subteam_self_removed",
              "subteam_updated",
              "team_domain_change",
              "team_join",
              "team_rename",
              "tokens_revoked",
              "url_verification",
              "user_change",
              "user_huddle_changed",
              "user_profile_changed",
              "user_resource_denied",
              "user_resource_granted",
              "user_resource_removed",
              "user_status_changed",
              "workflow_deleted",
              "workflow_published",
              "workflow_step_deleted",
              "workflow_step_execute",
              "workflow_unpublished"
            ]
          },
          "uniqueItems": true
        }
      },
      "required": [
        "request_url"
      ]
    },
    "interactivity": {
      "type": "object",
      "description": "Configuration for interactive components",
      "properties": {
        "is_enabled": {
          "type": "boolean",
          "description": "Whether interactivity is enabled for the app"
        },
        "request_url": {
          "type": "string",
          "description": "URL where Slack will send interactive component payloads",
          "format": "uri"
        },
        "message_menu_options_url": {
          "type": "string",
          "description": "URL where Slack will fetch options for message menus",
          "format": "uri"
        }
      }
    },
    "slash_commands": {
      "type": "array",
      "description": "List of slash commands the app provides",
      "items": {
        "type": "object",
        "properties": {
          "command": {
            "type": "string",
            "description": "The slash command (e.g., /mycommand)",
            "pattern": "^\\/[a-z0-9_-]{1,22}$"
          },
          "url": {
            "type": "string",
            "description": "URL where Slack will send the command payload",
            "format": "uri"
          },
          "description": {
            "type": "string",
            "description": "A short description of the command",
            "maxLength": 75
          },
          "usage_hint": {
            "type": "string",
            "description": "A hint on how to use the command",
            "maxLength": 75
          },
          "should_escape": {
            "type": "boolean",
            "description": "Whether to escape channels, users, and links in the command"
          }
        },
        "required": [
          "command",
          "url",
          "description"
        ]
      },
      "uniqueItems": true
    },
    "unfurl_domains": {
      "type": "array",
      "description": "List of domains for link unfurling",
      "items": {
        "type": "string",
        "format": "hostname"
      },
      "uniqueItems": true
    },
    "install_options": {
      "type": "object",
      "description": "Defines how the app may be added to a workspace",
      "properties": {
        "direct_install_url": {
          "type": "string",
          "description": "A URL to install your app directly. Can be shared without the Slack App Directory",
          "format": "uri"
        },
        "redirect_uri": {
          "type": "string",
          "description": "An alternative redirect URI for a custom distribution flow",
          "format": "uri"
        }
      }
    },
    "ip_allow_list": {
      "type": "object",
      "description": "Configuration for the app's IP Allow List",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Whether the IP Allow List is enabled"
        },
        "ipv4_addresses": {
          "type": "array",
          "description": "List of allowed IPv4 addresses",
          "items": {
            "type": "string",
            "format": "ipv4"
          },
          "uniqueItems": true
        },
        "ipv6_addresses": {
          "type": "array",
          "description": "List of allowed IPv6 addresses",
          "items": {
            "type": "string",
            "format": "ipv6"
          },
          "uniqueItems": true
        }
      }
    },
    "features": {
      "type": "object",
      "description": "Additional features and capabilities of the app",
      "properties": {
        "shortcuts": {
          "type": "array",
          "description": "List of app shortcuts",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the shortcut",
                "maxLength": 32
              },
              "callback_id": {
                "type": "string",
                "description": "Unique identifier for the shortcut",
                "maxLength": 255
              },
              "description": {
                "type": "string",
                "description": "A short description of the shortcut",
                "maxLength": 75
              },
              "type": {
                "type": "string",
                "description": "The type of shortcut (global, message)",
                "enum": ["global", "message"]
              }
            },
            "required": [
              "name",
              "callback_id",
              "description",
              "type"
            ]
          },
          "uniqueItems": true
        },
        "workflow_steps": {
          "type": "array",
          "description": "List of Workflow Builder steps your app provides",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the workflow step",
                "maxLength": 75
              },
              "callback_id": {
                "type": "string",
                "description": "Unique identifier for the workflow step",
                "maxLength": 255
              },
              "description": {
                "type": "string",
                "description": "A description of what the workflow step does",
                "maxLength": 255
              }
            },
            "required": [
              "name",
              "callback_id",
              "description"
            ]
          }
        },
        "bot_user": {
          "type": "object",
          "description": "Additional bot user features",
          "properties": {
            "slice_config": {
              "type": "object",
              "description": "Configuration for Slices. Enables your bot user to use multiple surfaces.",
              "properties": {
                "home_tab_enabled": {
                  "type": "boolean",
                  "description": "Whether your bot user can use Home tab"
                },
                "messages_tab_enabled": {
                  "type": "boolean",
                  "description": "Whether your bot user can use Messages tab"
                },
                "messages_tab_read_only_enabled": {
                  "type": "boolean",
                  "description": "Whether your bot user has read-only access to Messages tab"
                }
              }
            }
          }
        }
      }
    }
  },
  "required": [
    "app_name",
    "app_description",
    "oauth_config"
  ]
}{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Snapchat",
  "description": "JSON Schema for the Snapchat App Data Model",
  "type": "object",
  "properties": {
    "users": {
      "type": "array",
      "description": "List of Snapchat users",
      "items": {
        "$ref": "#/definitions/user"
      }
    },
    "stories": {
      "type": "array",
      "description": "List of user stories",
      "items": {
        "$ref": "#/definitions/story"
      }
    },
    "snaps": {
      "type": "array",
      "description": "List of individual snaps",
      "items": {
        "$ref": "#/definitions/snap"
      }
    },
    "chats": {
      "type": "array",
      "description": "List of chat conversations",
      "items": {
        "$ref": "#/definitions/chat"
      }
    },
    "memories": {
      "type": "array",
      "description": "List of saved snaps and stories (Memories)",
      "items": {
        "$ref": "#/definitions/memory"
      }
    },
    "discoverContent": {
      "type": "array",
      "description": "List of content available on the Discover page",
      "items": {
        "$ref": "#/definitions/discoverContentItem"
      }
    },
    "filters": {
      "type": "array",
      "description": "List of available filters and lenses",
      "items": {
        "$ref": "#/definitions/filter"
      }
    },
    "friends": {
      "type": "object",
      "description": "Friend relationships between users",
      "additionalProperties": {
        "type": "array",
        "items": {
          "type": "string",
          "description": "Username of a friend"
        }
      }
    }
  },
  "definitions": {
    "user": {
      "type": "object",
      "description": "A Snapchat user",
      "properties": {
        "userId": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the user"
        },
        "username": {
          "type": "string",
          "description": "User's public username"
        },
        "displayName": {
          "type": "string",
          "description": "User's display name"
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "User's email address"
        },
        "phoneNumber": {
          "type": "string",
          "description": "User's phone number (optional)",
          "pattern": "^\\+[1-9]\\d{1,14}$"
        },
        "bitmojiAvatar": {
          "type": "string",
          "description": "URL to the user's Bitmoji avatar (optional)"
        },
        "snapcode": {
          "type": "string",
          "description": "URL or data for the user's Snapcode"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the account was created"
        },
        "lastLogin": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the user's last login"
        },
        "location": {
          "type": "object",
          "description": "User's current location (if shared)",
          "properties": {
            "latitude": {
              "type": "number",
              "format": "float"
            },
            "longitude": {
              "type": "number",
              "format": "float"
            }
          },
          "required": [
            "latitude",
            "longitude"
          ]
        },
        "privacySettings": {
          "$ref": "#/definitions/privacySettings"
        },
        "notificationSettings": {
          "$ref": "#/definitions/notificationSettings"
        }
      },
      "required": [
        "userId",
        "username",
        "displayName",
        "email"
      ]
    },
    "story": {
      "type": "object",
      "description": "A user's story",
      "properties": {
        "storyId": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the story"
        },
        "userId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the user who posted the story"
        },
        "snaps": {
          "type": "array",
          "description": "List of snaps in the story",
          "items": {
            "$ref": "#/definitions/snapReference"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the story was created"
        },
        "expiresAt": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the story will expire (typically 24 hours after creation)"
        },
        "viewers": {
          "type": "array",
          "description": "List of user IDs who have viewed the story",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "isPublic": {
          "type": "boolean",
          "description": "Indicates if the story is visible to everyone or just friends."
        }
      },
      "required": [
        "storyId",
        "userId",
        "snaps",
        "createdAt",
        "expiresAt",
        "isPublic"
      ]
    },
    "snap": {
      "type": "object",
      "description": "A single snap (photo or video)",
      "properties": {
        "snapId": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the snap"
        },
        "senderId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the user who sent the snap"
        },
        "recipientIds": {
          "type": "array",
          "description": "List of user IDs who received the snap",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "mediaType": {
          "type": "string",
          "enum": [
            "image",
            "video"
          ],
          "description": "Type of media (image or video)"
        },
        "mediaUrl": {
          "type": "string",
          "format": "URL",
          "description": "URL to the snap's media content"
        },
        "duration": {
          "type": "integer",
          "description": "Duration of the snap in seconds (for videos)"
        },
        "filterId": {
          "type": "string",
          "description": "ID of the filter applied to the snap (optional)"
        },
        "caption": {
          "type": "string",
          "description": "Text caption added to the snap (optional)"
        },
        "location": {
          "type": "object",
          "description": "Location attached to the snap (optional)",
          "properties": {
            "latitude": {
              "type": "number",
              "format": "float"
            },
            "longitude": {
              "type": "number",
              "format": "float"
            }
          },
          "required": [
            "latitude",
            "longitude"
          ]
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the snap was created"
        },
        "expiresAt": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the snap will expire"
        },
        "openedBy": {
          "type": "array",
          "description": "List of user IDs who have opened the snap",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "screenshotCount": {
          "type": "integer",
          "description": "Number of times the snap has been screenshotted",
          "default": 0
        }
      },
      "required": [
        "snapId",
        "senderId",
        "recipientIds",
        "mediaType",
        "mediaUrl",
        "createdAt",
        "expiresAt"
      ]
    },
    "snapReference": {
      "type": "object",
      "description": "Reference to a snap within a story.",
      "properties": {
        "snapId": {
          "type": "string",
          "format": "uuid"
        },
        "duration": {
          "type": "integer",
          "description": "Duration of the snap in seconds (for videos)"
        }
      },
      "required": [
        "snapId"
      ]
    },
    "chat": {
      "type": "object",
      "description": "A chat conversation between users",
      "properties": {
        "chatId": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the chat"
        },
        "participants": {
          "type": "array",
          "description": "List of user IDs participating in the chat",
          "items": {
            "type": "string",
            "format": "uuid"
          },
          "minItems": 2
        },
        "messages": {
          "type": "array",
          "description": "List of messages in the chat",
          "items": {
            "$ref": "#/definitions/chatMessage"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the chat was created"
        },
        "lastActivityAt": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last activity in the chat"
        }
      },
      "required": [
        "chatId",
        "participants",
        "messages",
        "createdAt",
        "lastActivityAt"
      ]
    },
    "chatMessage": {
      "type": "object",
      "description": "A single message within a chat",
      "properties": {
        "messageId": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the message"
        },
        "senderId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the user who sent the message"
        },
        "contentType": {
          "type": "string",
          "enum": [
            "text",
            "snap",
            "audio",
            "sticker",
            "gif"
          ],
          "description": "Type of content in the message"
        },
        "content": {
          "type": "string",
          "description": "The content of the message (text, snapId, URL, etc.)"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the message was sent"
        },
        "readBy": {
          "type": "array",
          "description": "List of user IDs who have read the message",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "required": [
        "messageId",
        "senderId",
        "contentType",
        "content",
        "createdAt"
      ]
    },
    "memory": {
      "type": "object",
      "description": "A saved snap or story in Memories",
      "properties": {
        "memoryId": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the memory"
        },
        "userId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the user who owns the memory"
        },
        "type": {
          "type": "string",
          "enum": [
            "snap",
            "story"
          ],
          "description": "Type of memory (snap or story)"
        },
        "snapId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the snap (if type is 'snap')"
        },
        "storyId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the story (if type is 'story')"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the memory was created (saved)"
        }
      },
      "required": [
        "memoryId",
        "userId",
        "type"
      ],
      "oneOf": [
        {
          "required": [
            "snapId"
          ]
        },
        {
          "required": [
            "storyId"
          ]
        }
      ]
    },
    "discoverContentItem": {
      "type": "object",
      "description": "An item on the Discover page (e.g., article, video, show)",
      "properties": {
        "contentId": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the content"
        },
        "publisher": {
          "type": "string",
          "description": "Name of the publisher"
        },
        "title": {
          "type": "string",
          "description": "Title of the content"
        },
        "mediaType": {
          "type": "string",
          "enum": [
            "article",
            "video",
            "show",
            "collection"
          ],
          "description": "Type of media"
        },
        "thumbnailUrl": {
          "type": "string",
          "format": "URL",
          "description": "URL to the content's thumbnail image"
        },
        "contentUrl": {
          "type": "string",
          "format": "URL",
          "description": "URL to the actual content"
        },
        "duration": {
          "type": "integer",
          "description": "Duration of the content in seconds (for videos)"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the content was published"
        },
        "category": {
          "type": "string",
          "description": "Category of the content (e.g., news, entertainment, sports)"
        }
      },
      "required": [
        "contentId",
        "publisher",
        "title",
        "mediaType",
        "thumbnailUrl",
        "contentUrl"
      ]
    },
    "filter": {
      "type": "object",
      "description": "A filter or lens",
      "properties": {
        "filterId": {
          "type": "string",
          "description": "Unique identifier for the filter or lens"
        },
        "name": {
          "type": "string",
          "description": "Name of the filter or lens"
        },
        "type": {
          "type": "string",
          "enum": [
            "filter",
            "lens"
          ],
          "description": "Type of filter (visual filter or AR lens)"
        },
        "imageUrl": {
          "type": "string",
          "format": "URL",
          "description": "URL to an image representing the filter/lens"
        },
        "creator": {
          "type": "string",
          "description": "Username or ID of the creator (if applicable)"
        },
        "sponsored": {
          "type": "boolean",
          "description": "Indicates if the filter is sponsored"
        }
      },
      "required": [
        "filterId",
        "name",
        "type",
        "imageUrl"
      ]
    },
    "privacySettings": {
      "type": "object",
      "description": "User's privacy settings.",
      "properties": {
        "viewMyStory": {
          "type": "string",
          "enum": [
            "everyone",
            "friends",
            "custom"
          ],
          "description": "Who can view the user's story"
        },
        "contactMe": {
          "type": "string",
          "enum": [
            "everyone",
            "friends"
          ],
          "description": "Who can contact the user"
        },
        "seeMyLocation": {
          "type": "string",
          "enum": [
            "friends",
            "custom",
            "none"
          ],
          "description": "Who can see the user's location on the Snap Map"
        },
        "customList": {
          "type": "array",
          "description": "List of user IDs for custom privacy settings",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        }
      }
    },
    "notificationSettings": {
      "type": "object",
      "description": "User's notification settings.",
      "properties": {
        "sound": {
          "type": "boolean",
          "description": "Enable or disable sound for notifications"
        },
        "vibrate": {
          "type": "boolean",
          "description": "Enable or disable vibration for notifications"
        },
        "stories": {
          "type": "boolean",
          "description": "Receive notifications for new stories"
        },
        "mentions": {
          "type": "boolean",
          "description": "Receive notifications for mentions"
        },
        "friendSuggestions": {
          "type": "boolean",
          "description": "Receive notifications for friend suggestions"
        },
        "memories": {
          "type": "boolean",
          "description": "Receive notifications for memories"
        }
      }
    }
  }
}{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Spotify",
  "description": "JSON Schema for Spotify's core objects and relationships.",
  "type": "object",
  "properties": {
    "users": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/User"
      }
    },
    "artists": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Artist"
      }
    },
    "albums": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Album"
      }
    },
    "tracks": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Track"
      }
    },
    "playlists": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Playlist"
      }
    },
    "genres": {
      "type": "array",
      "items": {
        "type": "string",
        "description": "A music genre (e.g., 'Pop', 'Rock', 'Classical')."
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the user."
        },
        "display_name": {
          "type": "string",
          "description": "The name displayed on the user's profile."
        },
        "email": {
          "type": "string",
          "format": "email"
        },
        "country": {
          "type": "string",
          "description": "The country of the user, as set in the user's account profile.",
          "pattern": "^[A-Z]{2}$"
        },
        "playlists": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Playlist"
          },
          "description": "Playlists created by or followed by the user."
        },
        "following": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid",
            "description": "IDs of artists or users this user follows"
          },
          "description": "Artists or users this user follows"
        },
        "followers": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid",
            "description": "IDs of users following this user"
          },
          "description": "Users following this user."
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Image"
          }
        }
      },
      "required": [
        "id"
      ]
    },
    "Artist": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the artist."
        },
        "name": {
          "type": "string",
          "description": "The name of the artist."
        },
        "genres": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of the genres the artist is associated with."
        },
        "popularity": {
          "type": "integer",
          "minimum": 0,
          "maximum": 100,
          "description": "The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular."
        },
        "followers": {
          "type": "integer",
          "description": "The total number of followers."
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Image"
          }
        },
        "albums": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Album"
          },
          "description": "List of albums by the artist"
        },
        "related_artists": {
          "type": "array",
          "items":{
            "$ref": "#/definitions/Artist"
          },
          "description": "List of artists related to this artist."
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "Album": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the album."
        },
        "name": {
          "type": "string",
          "description": "The name of the album."
        },
        "artists": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Artist"
          },
          "description": "The artists of the album."
        },
        "album_type": {
          "type": "string",
          "enum": [
            "album",
            "single",
            "compilation"
          ],
          "description": "The type of the album: album, single, or compilation."
        },
        "release_date": {
          "type": "string",
          "format": "date",
          "description": "The date the album was first released."
        },
        "total_tracks": {
          "type": "integer",
          "description": "The number of tracks in the album."
        },
        "tracks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Track"
          },
          "description": "The tracks of the album."
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Image"
          }
        },
        "genres": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of the genres the album is associated with."
        },
        "popularity": {
          "type": "integer",
          "minimum": 0,
          "maximum": 100,
          "description": "The popularity of the album."
        },
        "label": {
          "type": "string",
          "description": "Label of the album"
        }
      },
      "required": [
        "id",
        "name",
        "artists"
      ]
    },
    "Track": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the track."
        },
        "name": {
          "type": "string",
          "description": "The name of the track."
        },
        "artists": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Artist"
          },
          "description": "The artists who performed the track."
        },
        "album": {
          "$ref": "#/definitions/Album",
          "description": "The album on which the track appears."
        },
        "duration_ms": {
          "type": "integer",
          "description": "The track length in milliseconds."
        },
        "explicit": {
          "type": "boolean",
          "description": "Whether or not the track has explicit lyrics (true = yes it does; false = no it does not OR unknown)."
        },
        "popularity": {
          "type": "integer",
          "minimum": 0,
          "maximum": 100,
          "description": "The popularity of the track."
        },
        "preview_url": {
          "type": "string",
          "format": "URL",
          "description": "A link to a 30 second preview (MP3 format) of the track."
        },
        "track_number": {
          "type": "integer",
          "description": "Track number of this track in its album."
        },
        "is_playable": {
          "type": "boolean",
          "description": "Whether or not this track is playable in the market it was requested from."
        }
      },
      "required": [
        "id",
        "name",
        "artists"
      ]
    },
    "Playlist": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the playlist."
        },
        "name": {
          "type": "string",
          "description": "The name of the playlist."
        },
        "description": {
          "type": "string",
          "nullable": true,
          "description": "The playlist's description. Only returned for modified, verified playlists, otherwise null."
        },
        "owner": {
          "$ref": "#/definitions/User",
          "description": "The user who owns the playlist."
        },
        "public": {
          "type": "boolean",
          "nullable": true,
          "description": "The playlist's public/private status: true the playlist is public, false the playlist is private, null the playlist status is not relevant."
        },
        "tracks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Track"
          },
          "description": "The tracks of the playlist."
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Image"
          }
        },
        "followers": {
          "type": "integer",
          "description": "The total number of followers."
        },
        "collaborative":{
          "type": "boolean",
          "description": "Whether this playlist can be modified by other users."
        }
      },
      "required": [
        "id",
        "name",
        "owner"
      ]
    },
    "Image": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "format": "URL",
          "description": "The source URL of the image."
        },
        "height": {
          "type": "integer",
          "nullable": true,
          "description": "The image height in pixels."
        },
        "width": {
          "type": "integer",
          "nullable": true,
          "description": "The image width in pixels."
        }
      },
      "required": [
        "url"
      ]
    }
  }
}{
  "type": "object",
  "title": "Substack App Schema",
  "description": "JSON Schema for a simplified representation of the Substack application's data structure.",
  "properties": {
    "users": {
      "type": "array",
      "description": "List of users on the platform.",
      "items": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the user."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address."
          },
          "name": {
            "type": "string",
            "description": "User's full name."
          },
          "username": {
            "type": "string",
            "description": "User's chosen username (may be used in publication URLs)."
          },
          "bio": {
            "type": "string",
            "description": "Short biographical information about the user.",
            "maxLength": 500
          },
          "profilePictureUrl": {
            "type": "string",
            "format": "URL",
            "description": "URL to the user's profile picture."
          },
          "publications": {
            "type": "array",
            "description": "List of publications owned by the user.",
            "items": {
              "type": "string",
              "format": "uuid",
              "description": "ID of a publication owned by this user."
            }
          },
          "subscriptions": {
            "type": "array",
            "description": "List of publications the user is subscribed to.",
            "items": {
              "type": "string",
              "format": "uuid",
              "description": "ID of a publication the user is subscribed to."
            }
          },
          "paymentInformation": {
            "type": "object",
            "description": "Payment information for paid subscriptions (if applicable).",
            "properties": {
              "paymentMethod": {
                "type": "string",
                "description": "e.g., 'stripe', 'paypal'"
              },
              "last4": {
                "type": "string",
                "description": "Last 4 digits of card"
              },
              "stripeCustomerId": {
                "type": "string",
                "description": "Id of the customer in the payment provider"
              }
            },
            "required": ["paymentMethod"]
          }
        },
        "required": [
          "userId",
          "email",
          "username"
        ]
      }
    },
    "publications": {
      "type": "array",
      "description": "List of publications on the platform.",
      "items": {
        "type": "object",
        "properties": {
          "publicationId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the publication."
          },
          "ownerId": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the user who owns the publication."
          },
          "name": {
            "type": "string",
            "description": "Name of the publication."
          },
          "description": {
            "type": "string",
            "description": "Description of the publication.",
            "maxLength": 1000
          },
          "logoUrl": {
            "type": "string",
            "format": "URL",
            "description": "URL to the publication's logo."
          },
          "bannerImageUrl": {
            "type": "string",
            "format": "URL",
            "description": "URL to a larger banner image for the publication."
          },
          "tags": {
            "type": "array",
            "description": "List of tags associated with the publication.",
            "items": {
              "type": "string"
            }
          },
          "subscriptionPlans": {
            "type": "array",
            "description": "Subscription plans offered by the publication.",
            "items": {
              "type": "object",
              "properties": {
                "planId": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the subscription plan."
                },
                "name": {
                  "type": "string",
                  "description": "Name of the plan (e.g., 'Monthly', 'Annual', 'Founding Member')."
                },
                "price": {
                  "type": "number",
                  "format": "float",
                  "description": "Price of the plan in the chosen currency.",
                  "minimum": 0
                },
                "currency": {
                  "type": "string",
                  "description": "Currency of the plan (e.g., 'USD', 'EUR').",
                  "pattern": "^[A-Z]{3}$"
                },
                "interval": {
                  "type": "string",
                  "enum": [
                    "month",
                    "year"
                  ],
                  "description": "Billing interval for the plan."
                },
                "benefits": {
                  "type": "array",
                  "description": "List of benefits included in the plan.",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "planId",
                "name",
                "price",
                "currency",
                "interval"
              ]
            }
          },
          "posts": {
            "type": "array",
            "description": "List of posts in the publication.",
            "items": {
              "type": "string",
              "format": "uuid",
              "description": "ID of a post in this publication."
            }
          }
        },
        "required": [
          "publicationId",
          "ownerId",
          "name",
          "description"
        ]
      }
    },
    "posts": {
      "type": "array",
      "description": "List of posts on the platform.",
      "items": {
        "type": "object",
        "properties": {
          "postId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the post."
          },
          "publicationId": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the publication the post belongs to."
          },
          "authorId": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the user who authored the post."
          },
          "title": {
            "type": "string",
            "description": "Title of the post."
          },
          "subtitle": {
            "type": "string",
            "description": "Subtitle of the post (optional)."
          },
          "content": {
            "type": "string",
            "description": "Content of the post (can be HTML or Markdown).",
            "maxLength": 200000
          },
          "publishedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the post was published."
          },
          "isFree": {
            "type": "boolean",
            "description": "Whether the post is free or requires a subscription."
          },
          "coverImageUrl": {
            "type": "string",
            "format": "URL",
            "description": "URL to a cover image for the post."
          },
          "likes": {
            "type": "integer",
            "description": "Number of likes the post has received.",
            "minimum": 0
          },
          "comments": {
            "type": "array",
            "description": "List of comments on the post.",
            "items": {
              "type": "object",
              "properties": {
                "commentId": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique ID for the comment."
                },
                "authorId": {
                  "type": "string",
                  "format": "uuid",
                  "description": "ID of the user who made the comment."
                },
                "content": {
                  "type": "string",
                  "description": "Content of the comment.",
                  "maxLength": 5000
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date and time the comment was created."
                },
                "likes": {
                  "type": "integer",
                  "description": "Number of likes the comment has received.",
                  "minimum": 0
                },
                "parentId": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Id of the parent comment, it will be null if it is not a reply"
                }
              },
              "required": [
                "commentId",
                "authorId",
                "content",
                "createdAt"
              ]
            }
          }
        },
        "required": [
          "postId",
          "publicationId",
          "authorId",
          "title",
          "content",
          "publishedAt",
          "isFree"
        ]
      }
    }
  },
  "required": [
    "users",
    "publications",
    "posts"
  ]
}{
  "type": "object",
  "title": "Telegram Application",
  "description": "JSON Schema representation of the Telegram Application data model",
  "properties": {
    "users": {
      "type": "array",
      "description": "List of registered users",
      "items": {
        "type": "object",
        "title": "User",
        "description": "Represents a Telegram user",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the user",
            "readOnly": true
          },
          "first_name": {
            "type": "string",
            "description": "User's first name"
          },
          "last_name": {
            "type": "string",
            "description": "User's last name",
            "nullable": true
          },
          "username": {
            "type": "string",
            "description": "User's username",
            "nullable": true,
            "pattern": "^[a-zA-Z0-9_]{5,}$"
          },
          "phone_number": {
            "type": "string",
            "description": "User's phone number (may not be visible to everyone based on privacy settings)",
            "nullable": true,
            "pattern": "^\\+[1-9]\\d{1,14}$"
          },
          "photo": {
            "type": "object",
            "description": "User's profile photo",
            "nullable": true,
            "properties": {
              "small_file_id": {
                "type": "string",
                "description": "Unique file identifier for the small profile photo"
              },
              "small_file_unique_id": {
                "type": "string",
                "description": "Unique file identifier for the small profile photo, which is supposed to be the same over time and for different bots"
              },
              "big_file_id": {
                "type": "string",
                "description": "Unique file identifier for the big profile photo"
              },
              "big_file_unique_id": {
                "type": "string",
                "description": "Unique file identifier for the big profile photo, which is supposed to be the same over time and for different bots"
              }
            },
            "required": [
              "small_file_id",
              "small_file_unique_id",
              "big_file_id",
              "big_file_unique_id"
            ]
          },
          "bio": {
            "type": "string",
            "description": "Description of the user",
            "nullable": true,
            "maxLength": 70
          },
          "is_bot": {
            "type": "boolean",
            "description": "True, if this user is a bot"
          },
          "is_verified": {
            "type": "boolean",
            "description": "True, if this user has a verified account"
          },
          "is_scam": {
            "type": "boolean",
            "description": "True, if this user has been marked as a scam account"
          },
          "is_fake": {
            "type": "boolean",
            "description": "True, if this user has been marked as a fake account"
          }
        },
        "required": [
          "id",
          "first_name",
          "is_bot"
        ]
      }
    },
    "chats": {
      "type": "array",
      "description": "List of chats",
      "items": {
        "oneOf": [
          {
            "$ref": "#/$defs/private_chat"
          },
          {
            "$ref": "#/$defs/group_chat"
          },
          {
            "$ref": "#/$defs/supergroup_chat"
          },
          {
            "$ref": "#/$defs/channel_chat"
          }
        ]
      }
    },
    "messages": {
      "type": "array",
      "description": "List of messages",
      "items": {
        "$ref": "#/$defs/message"
      }
    }
  },
  "required": [
    "users",
    "chats",
    "messages"
  ],
  "$defs": {
    "private_chat": {
      "type": "object",
      "title": "Private Chat",
      "description": "Represents a private chat with another user",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique identifier for this chat",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "Type of chat, should be \"private\"",
          "const": "private"
        },
        "user_id": {
          "type": "integer",
          "description": "Unique identifier of the other user in the private chat"
        }
      },
      "required": [
        "id",
        "type",
        "user_id"
      ]
    },
    "group_chat": {
      "type": "object",
      "title": "Group Chat",
      "description": "Represents a group chat",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique identifier for this chat",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "Type of chat, should be \"group\"",
          "const": "group"
        },
        "title": {
          "type": "string",
          "description": "Title of the group chat"
        },
        "members": {
          "type": "array",
          "description": "List of group members",
          "items": {
            "type": "integer",
            "description": "User ID of a group member"
          }
        }
      },
      "required": [
        "id",
        "type",
        "title",
        "members"
      ]
    },
    "supergroup_chat": {
      "type": "object",
      "title": "Supergroup Chat",
      "description": "Represents a supergroup chat",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique identifier for this chat",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "Type of chat, should be \"supergroup\"",
          "const": "supergroup"
        },
        "title": {
          "type": "string",
          "description": "Title of the supergroup chat"
        },
        "members": {
          "type": "array",
          "description": "List of supergroup members (not fully accessible - only via specific API calls)",
          "items": {
            "type": "integer",
            "description": "User ID of a supergroup member"
          }
        },
        "username": {
          "type": "string",
          "description": "Username of the supergroup, if any",
          "nullable": true
        },
        "description": {
          "type": "string",
          "description": "Description of the supergroup, if any",
          "nullable": true
        },
        "invite_link": {
          "type": "string",
          "description": "Invite link of the supergroup, if any",
          "nullable": true
        },
        "pinned_message_id": {
          "type": "integer",
          "description": "Unique identifier of the pinned message, if any",
          "nullable": true
        },
        "is_forum": {
          "type": "boolean",
          "description": "True, if the supergroup is a forum (has topics)"
        }
      },
      "required": [
        "id",
        "type",
        "title"
      ]
    },
    "channel_chat": {
      "type": "object",
      "title": "Channel Chat",
      "description": "Represents a channel",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique identifier for this chat",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "Type of chat, should be \"channel\"",
          "const": "channel"
        },
        "title": {
          "type": "string",
          "description": "Title of the channel"
        },
        "username": {
          "type": "string",
          "description": "Username of the channel, if any",
          "nullable": true
        },
        "description": {
          "type": "string",
          "description": "Description of the channel, if any",
          "nullable": true
        },
        "invite_link": {
          "type": "string",
          "description": "Invite link of the channel, if any",
          "nullable": true
        },
        "pinned_message_id": {
          "type": "integer",
          "description": "Unique identifier of the pinned message, if any",
          "nullable": true
        }
      },
      "required": [
        "id",
        "type",
        "title"
      ]
    },
    "message": {
      "type": "object",
      "title": "Message",
      "description": "Represents a message",
      "properties": {
        "message_id": {
          "type": "integer",
          "description": "Unique message identifier",
          "readOnly": true
        },
        "from": {
          "type": "integer",
          "description": "User ID of the sender"
        },
        "chat_id": {
          "type": "integer",
          "description": "Unique identifier for the chat where the message belongs"
        },
        "date": {
          "type": "integer",
          "description": "Date the message was sent in Unix time"
        },
        "text": {
          "type": "string",
          "description": "For text messages, the actual UTF-8 text of the message",
          "nullable": true
        },
        "entities": {
          "type": "array",
          "description": "Special entities like usernames, URLs, bot commands, etc. that appear in the text",
          "nullable": true,
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "mention",
                  "hashtag",
                  "cashtag",
                  "bot_command",
                  "url",
                  "email",
                  "phone_number",
                  "bold",
                  "italic",
                  "underline",
                  "strikethrough",
                  "spoiler",
                  "code",
                  "pre",
                  "text_link",
                  "text_mention"
                ]
              },
              "offset": {
                "type": "integer",
                "description": "Offset in UTF-16 code units to the start of the entity"
              },
              "length": {
                "type": "integer",
                "description": "Length of the entity in UTF-16 code units"
              },
              "url": {
                "type": "string",
                "description": "For “text_link” only, url that will be opened after user taps on the text",
                "nullable": true
              },
              "user": {
                "type": "object",
                "description": "For “text_mention” only, the mentioned user",
                "nullable": true,
                "properties": {
                  "id": {
                    "type": "integer"
                  }
                },
                "required": ["id"]
              },
              "language": {
                "type": "string",
                "description": "For “pre” only, the programming language of the entity text",
                "nullable": true
              }
            },
            "required": [
              "type",
              "offset",
              "length"
            ]
          }
        },
        "reply_to_message_id": {
          "type": "integer",
          "description": "For replies, the original message's ID",
          "nullable": true
        },
        "media_group_id": {
          "type": "string",
          "description": "The unique identifier of a media message group this message belongs to",
          "nullable": true
        },
        "photo": {
          "type": "array",
          "description": "Message is a photo, available sizes of the photo",
          "nullable": true,
          "items": {
            "type": "object",
            "properties": {
              "file_id": {
                "type": "string"
              },
              "file_unique_id": {
                "type": "string"
              },
              "width": {
                "type": "integer"
              },
              "height": {
                "type": "integer"
              },
              "file_size": {
                "type": "integer",
                "nullable": true
              }
            },
            "required": [
              "file_id",
              "file_unique_id",
              "width",
              "height"
            ]
          }
        },
        "video": {
          "type": "object",
          "description": "Message is a video",
          "nullable": true,
          "properties": {
            "file_id": {
              "type": "string"
            },
            "file_unique_id": {
              "type": "string"
            },
            "width": {
              "type": "integer"
            },
            "height": {
              "type": "integer"
            },
            "duration": {
              "type": "integer"
            },
            "thumbnail": {
              "type": "object",
              "nullable": true,
              "properties": {
                "file_id": {
                  "type": "string"
                },
                "file_unique_id": {
                  "type": "string"
                },
                "width": {
                  "type": "integer"
                },
                "height": {
                  "type": "integer"
                },
                "file_size": {
                  "type": "integer",
                  "nullable": true
                }
              },
              "required": [
                "file_id",
                "file_unique_id",
                "width",
                "height"
              ]
            },
            "file_name": {
              "type": "string",
              "nullable": true
            },
            "mime_type": {
              "type": "string",
              "nullable": true
            },
            "file_size": {
              "type": "integer",
              "nullable": true
            }
          },
          "required": [
            "file_id",
            "file_unique_id",
            "width",
            "height",
            "duration"
          ]
        },
        "document": {
          "type": "object",
          "description": "Message is a general file",
          "nullable": true,
          "properties": {
            "file_id": {
              "type": "string"
            },
            "file_unique_id": {
              "type": "string"
            },
            "thumbnail": {
              "type": "object",
              "nullable": true,
              "properties": {
                "file_id": {
                  "type": "string"
                },
                "file_unique_id": {
                  "type": "string"
                },
                "width": {
                  "type": "integer"
                },
                "height": {
                  "type": "integer"
                },
                "file_size": {
                  "type": "integer",
                  "nullable": true
                }
              },
              "required": [
                "file_id",
                "file_unique_id",
                "width",
                "height"
              ]
            },
            "file_name": {
              "type": "string",
              "nullable": true
            },
            "mime_type": {
              "type": "string",
              "nullable": true
            },
            "file_size": {
              "type": "integer",
              "nullable": true
            }
          },
          "required": [
            "file_id",
            "file_unique_id"
          ]
        },
        "audio": {
          "type": "object",
          "description": "Message is an audio file",
          "nullable": true,
          "properties": {
            "file_id": {
              "type": "string"
            },
            "file_unique_id": {
              "type": "string"
            },
            "duration": {
              "type": "integer"
            },
            "performer": {
              "type": "string",
              "nullable": true
            },
            "title": {
              "type": "string",
              "nullable": true
            },
            "file_name": {
              "type": "string",
              "nullable": true
            },
            "mime_type": {
              "type": "string",
              "nullable": true
            },
            "file_size": {
              "type": "integer",
              "nullable": true
            },
            "thumbnail": {
              "type": "object",
              "nullable": true,
              "properties": {
                "file_id": {
                  "type": "string"
                },
                "file_unique_id": {
                  "type": "string"
                },
                "width": {
                  "type": "integer"
                },
                "height": {
                  "type": "integer"
                },
                "file_size": {
                  "type": "integer",
                  "nullable": true
                }
              },
              "required": [
                "file_id",
                "file_unique_id",
                "width",
                "height"
              ]
            }
          },
          "required": [
            "file_id",
            "file_unique_id",
            "duration"
          ]
        },
        "voice": {
          "type": "object",
          "description": "Message is a voice message",
          "nullable": true,
          "properties": {
            "file_id": {
              "type": "string"
            },
            "file_unique_id": {
              "type": "string"
            },
            "duration": {
              "type": "integer"
            },
            "mime_type": {
              "type": "string",
              "nullable": true
            },
            "file_size": {
              "type": "integer",
              "nullable": true
            }
          },
          "required": [
            "file_id",
            "file_unique_id",
            "duration"
          ]
        },
        "animation": {
          "type": "object",
          "description": "Message is an animation",
          "nullable": true,
          "properties": {
            "file_id": {
              "type": "string"
            },
            "file_unique_id": {
              "type": "string"
            },
            "width": {
              "type": "integer"
            },
            "height": {
              "type": "integer"
            },
            "duration": {
              "type": "integer"
            },
            "thumbnail": {
              "type": "object",
              "nullable": true,
              "properties": {
                "file_id": {
                  "type": "string"
                },
                "file_unique_id": {
                  "type": "string"
                },
                "width": {
                  "type": "integer"
                },
                "height": {
                  "type": "integer"
                },
                "file_size": {
                  "type": "integer",
                  "nullable": true
                }
              },
              "required": [
                "file_id",
                "file_unique_id",
                "width",
                "height"
              ]
            },
            "file_name": {
              "type": "string",
              "nullable": true
            },
            "mime_type": {
              "type": "string",
              "nullable": true
            },
            "file_size": {
              "type": "integer",
              "nullable": true
            }
          },
          "required": [
            "file_id",
            "file_unique_id",
            "width",
            "height",
            "duration"
          ]
        },
        "sticker": {
          "type": "object",
          "description": "Message is a sticker",
          "nullable": true,
          "properties": {
            "file_id": {
              "type": "string"
            },
            "file_unique_id": {
              "type": "string"
            },
            "width": {
              "type": "integer"
            },
            "height": {
              "type": "integer"
            },
            "is_animated": {
              "type": "boolean"
            },
            "is_video": {
              "type": "boolean"
            },
            "thumbnail": {
              "type": "object",
              "nullable": true,
              "properties": {
                "file_id": {
                  "type": "string"
                },
                "file_unique_id": {
                  "type": "string"
                },
                "width": {
                  "type": "integer"
                },
                "height": {
                  "type": "integer"
                },
                "file_size": {
                  "type": "integer",
                  "nullable": true
                }
              },
              "required": [
                "file_id",
                "file_unique_id",
                "width",
                "height"
              ]
            },
            "emoji": {
              "type": "string",
              "nullable": true
            },
            "set_name": {
              "type": "string",
              "nullable": true
            },
            "file_size": {
              "type": "integer",
              "nullable": true
            }
          },
          "required": [
            "file_id",
            "file_unique_id",
            "width",
            "height",
            "is_animated",
            "is_video"
          ]
        },
        "poll": {
          "type": "object",
          "description": "Message is a native poll",
          "nullable": true,
          "properties": {
            "id": {
              "type": "string"
            },
            "question": {
              "type": "string"
            },
            "options": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "text": {
                    "type": "string"
                  },
                  "voter_count": {
                    "type": "integer"
                  }
                },
                "required": ["text", "voter_count"]
              }
            },
            "total_voter_count": {
              "type": "integer"
            },
            "is_closed": {
              "type": "boolean"
            },
            "is_anonymous": {
              "type": "boolean"
            },
            "type": {
              "type": "string"
            },
            "allows_multiple_answers": {
              "type": "boolean"
            }
          },
          "required": [
            "id",
            "question",
            "options",
            "total_voter_count",
            "is_closed",
            "is_anonymous",
            "type",
            "allows_multiple_answers"
          ]
        },
        "dice": {
          "type": "object",
          "description": "Message is a dice with random value from 1 to 6",
          "nullable": true,
          "properties": {
            "emoji": {
              "type": "string"
            },
            "value": {
              "type": "integer"
            }
          },
          "required": [
            "emoji",
            "value"
          ]
        },
        "forward_from": {
          "type": "integer",
          "description": "For forwarded messages, sender of the original message",
          "nullable": true
        },
        "forward_from_chat": {
          "type": "integer",
          "description": "For messages forwarded from channels, identifier of the original channel",
          "nullable": true
        },
        "forward_from_message_id": {
          "type": "integer",
          "description": "For messages forwarded from channels, identifier of the original message in the channel",
          "nullable": true
        },
        "forward_date": {
          "type": "integer",
          "description": "For forwarded messages, date the original message was sent in Unix time",
          "nullable": true
        },
        "edit_date": {
          "type": "integer",
          "description": "Date the message was last edited in Unix time",
          "nullable": true
        },
        "is_automatic_forward": {
          "type": "boolean",
          "description": "True, if the message was automatically forwarded and hasக்கப்பட்ட link to the original message",
          "nullable": true
        },
        "has_protected_content": {
          "type": "boolean",
          "description": "True, if the message can't be forwarded",
          "nullable": true
        },
        "location": {
          "type": "object",
          "description": "Message is a shared location",
          "nullable": true,
          "properties": {
            "longitude": {
              "type": "number"
            },
            "latitude": {
              "type": "number"
            }
          },
          "required": [
            "longitude",
            "latitude"
          ]
        },
        "venue": {
          "type": "object",
          "description": "Message is a venue",
          "nullable": true,
          "properties": {
            "location": {
              "type": "object",
              "properties": {
                "longitude": {
                  "type": "number"
                },
                "latitude": {
                  "type": "number"
                }
              },
              "required": [
                "longitude",
                "latitude"
              ]
            },
            "title": {
              "type": "string"
            },
            "address": {
              "type": "string"
            },
            "foursquare_id": {
              "type": "string",
              "nullable": true
            },
            "foursquare_type": {
              "type": "string",
              "nullable": true
            }
          },
          "required": [
            "location",
            "title",
            "address"
          ]
        },
        "contact": {
          "type": "object",
          "description": "Message is a shared contact",
          "nullable": true,
          "properties": {
            "phone_number": {
              "type": "string"
            },
            "first_name": {
              "type": "string"
            },
            "last_name": {
              "type": "string",
              "nullable": true
            },
            "user_id": {
              "type": "integer",
              "nullable": true
            }
          },
          "required": [
            "phone_number",
            "first_name"
          ]
        },
        "new_chat_members": {
          "type": "array",
          "description": "New members that were added to the group or supergroup and information about them (the bot itself may be one of these members)",
          "nullable": true,
          "items": {
            "type": "integer",
            "description": "User ID of a new member"
          }
        },
        "left_chat_member": {
          "type": "integer",
          "description": "A member was removed from the group, information about them (this member may be the bot itself)",
          "nullable": true
        },
        "new_chat_title": {
          "type": "string",
          "description": "A chat title was changed to this value",
          "nullable": true
        },
        "pinned_message": {
          "type": "object",
          "description": "Specified message was pinned",
          "nullable": true,
          "$ref": "#/$defs/message"
        },
        "video_chat_started": {
          "type": "object",
          "description": "Service message: video chat started",
          "nullable": true
        },
        "video_chat_ended": {
          "type": "object",
          "description": "Service message: video chat ended",
          "nullable": true,
          "properties": {
            "duration": {
              "type": "integer"
            }
          },
          "required": ["duration"]
        },
        "video_chat_participants_invited": {
          "type": "object",
          "description": "Service message: new participants invited to a video chat",
          "nullable": true,
          "properties": {
            "users": {
              "type": "array",
              "items": {
                "type": "integer",
                "description": "User ID of an invited user"
              }
            }
          },
          "required": ["users"]
        },
        "forum_topic_created": {
          "type": "object",
          "description": "Service message: forum topic created",
          "nullable": true,
          "properties": {
            "name": {
              "type": "string"
            },
            "icon_color": {
              "type": "integer"
            },
            "icon_custom_emoji_id": {
              "type": "string",
              "nullable": true
            }
          },
          "required": ["name", "icon_color"]
        },
        "forum_topic_closed": {
          "type": "object",
          "description": "Service message: forum topic closed",
          "nullable": true
        },
        "forum_topic_reopened": {
          "type": "object",
          "description": "Service message: forum topic reopened",
          "nullable": true
        }
      },
      "required": [
        "message_id",
        "from",
        "chat_id",
        "date"
      ]
    }
  }
}{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Thumbtack App Schema",
  "description": "JSON Schema for the Thumbtack application data model",
  "type": "object",
  "properties": {
    "users": {
      "type": "array",
      "description": "List of Thumbtack users",
      "items": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "integer",
            "description": "Unique identifier for the user",
            "readOnly": true
          },
          "first_name": {
            "type": "string",
            "description": "User's first name",
            "minLength": 1,
            "maxLength": 255
          },
          "last_name": {
            "type": "string",
            "description": "User's last name",
            "minLength": 1,
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "description": "User's email address",
            "format": "email"
          },
          "phone_number": {
            "type": "string",
            "description": "User's phone number",
            "pattern": "^\\+?[1-9]\\d{1,14}$"
          },
          "password": {
            "type": "string",
            "description": "Hashed user password",
            "minLength": 8,
            "writeOnly": true
          },
          "profile_picture_url": {
            "type": "string",
            "description": "URL to the user's profile picture",
            "format": "URL"
          },
          "address": {
            "type": "object",
            "description": "User's address",
            "properties": {
              "street": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "state": {
                "type": "string",
                "enum": ["AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY"]
              },
              "zip_code": {
                "type": "string",
                "pattern": "^\\d{5}(-\\d{4})?$"
              }
            },
            "required": ["street", "city", "state", "zip_code"]
          },
          "is_pro": {
            "type": "boolean",
            "description": "Indicates if the user is a professional"
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp of user account creation",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp of last user account update",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "first_name",
          "last_name",
          "email",
          "password",
          "address",
          "is_pro"
        ],
        "if": {
          "properties": {
            "is_pro": {
              "const": true
            }
          }
        },
        "then": {
          "properties": {
            "business_name": {
              "type": "string",
              "description": "Name of the professional's business",
              "minLength": 1,
              "maxLength": 255
            },
            "business_description": {
              "type": "string",
              "description": "Description of the professional's business"
            },
            "years_in_business": {
              "type": "integer",
              "description": "Number of years the professional has been in business"
            },
            "website_url": {
              "type": "string",
              "description": "URL to the professional's business website",
              "format": "URL"
            },
            "licenses": {
              "type": "array",
              "description": "List of professional's licenses",
              "items": {
                "type": "object",
                "properties": {
                  "license_type": {
                    "type": "string",
                    "description": "Type of license (e.g., contractor, electrician)"
                  },
                  "license_number": {
                    "type": "string",
                    "description": "License number"
                  },
                  "issuing_state": {
                    "type": "string",
                    "description": "State that issued the license",
                    "enum": ["AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY"]
                  },
                  "expiration_date": {
                    "type": "string",
                    "description": "Expiration date of the license",
                    "format": "date"
                  }
                },
                "required": [
                  "license_type",
                  "license_number",
                  "issuing_state",
                  "expiration_date"
                ]
              }
            },
            "insurance": {
              "type": "object",
              "description": "Professional's insurance information",
              "properties": {
                "insurance_provider": {
                  "type": "string",
                  "description": "Name of the insurance provider"
                },
                "policy_number": {
                  "type": "string",
                  "description": "Policy number"
                },
                "coverage_amount": {
                  "type": "number",
                  "description": "Coverage amount"
                },
                "expiration_date": {
                  "type": "string",
                  "description": "Expiration date of the insurance",
                  "format": "date"
                }
              },
              "required": [
                "insurance_provider",
                "policy_number",
                "coverage_amount",
                "expiration_date"
              ]
            },
            "service_area": {
              "type": "object",
              "description": "Area where the professional provides services",
              "properties": {
                "radius": {
                  "type": "integer",
                  "description": "Service radius in miles",
                  "minimum": 1
                },
                "zip_codes": {
                  "type": "array",
                  "description": "List of zip codes within the service area",
                  "items": {
                    "type": "string",
                    "pattern": "^\\d{5}(-\\d{4})?$"
                  }
                }
              },
              "required": ["radius"]
            }
          },
          "required": [
            "business_name",
            "business_description"
          ]
        }
      }
    },
    "services": {
      "type": "array",
      "description": "List of services offered on Thumbtack",
      "items": {
        "type": "object",
        "properties": {
          "service_id": {
            "type": "integer",
            "description": "Unique identifier for the service",
            "readOnly": true
          },
          "service_name": {
            "type": "string",
            "description": "Name of the service (e.g., House Cleaning, Handyman, Personal Training)",
            "minLength": 1,
            "maxLength": 255
          },
          "category": {
            "type": "string",
            "description": "Category of the service (e.g., Home Improvement, Wellness, Events)",
            "minLength": 1,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "Description of the service"
          },
          "average_price_range": {
            "type": "object",
            "description": "Average price range for the service",
            "properties": {
              "min": {
                "type": "number",
                "description": "Minimum price"
              },
              "max": {
                "type": "number",
                "description": "Maximum price"
              }
            }
          },
          "related_services": {
            "type": "array",
            "description": "List of related service IDs",
            "items": {
              "type": "integer"
            }
          }
        },
        "required": [
          "service_name",
          "category"
        ]
      }
    },
    "pro_services": {
      "type": "array",
      "description": "List of services offered by professionals",
      "items": {
        "type": "object",
        "properties": {
          "pro_id": {
            "type": "integer",
            "description": "ID of the professional offering the service"
          },
          "service_id": {
            "type": "integer",
            "description": "ID of the service being offered"
          },
          "custom_price": {
            "type": "number",
            "description": "Price set by the professional for the service",
            "minimum": 0
          },
          "experience_level": {
            "type": "string",
            "description": "Experience level of the professional in this service",
            "enum": ["Beginner", "Intermediate", "Expert"]
          },
          "description": {
            "type": "string",
            "description": "Description provided by the professional for the service"
          },
          "qualifications": {
            "type": "array",
            "description": "List of qualifications related to the service",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "pro_id",
          "service_id"
        ]
      }
    },
    "projects": {
      "type": "array",
      "description": "List of customer projects",
      "items": {
        "type": "object",
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "Unique identifier for the project",
            "readOnly": true
          },
          "customer_id": {
            "type": "integer",
            "description": "ID of the customer who created the project"
          },
          "service_id": {
            "type": "integer",
            "description": "ID of the service required for the project"
          },
          "title": {
            "type": "string",
            "description": "Title of the project",
            "minLength": 1,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the project"
          },
          "location": {
            "type": "object",
            "description": "Location where the project needs to be completed",
            "properties": {
              "address": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "state": {
                "type": "string",
                "enum": ["AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY"]
              },
              "zip_code": {
                "type": "string",
                "pattern": "^\\d{5}(-\\d{4})?$"
              }
            },
            "required": ["address", "city", "state", "zip_code"]
          },
          "budget": {
            "type": "number",
            "description": "Customer's budget for the project",
            "minimum": 0
          },
          "project_status": {
            "type": "string",
            "description": "Current status of the project",
            "enum": ["Open", "In Progress", "Completed", "Canceled"]
          },
          "start_date": {
            "type": "string",
            "description": "Desired start date for the project",
            "format": "date"
          },
          "timeline": {
            "type": "string",
            "description": "Customer's desired timeline for project completion",
            "enum": ["ASAP", "Within a week", "Within a month", "No rush"]
          },
          "photos": {
            "type": "array",
            "description": "URLs to photos related to the project",
            "items": {
              "type": "string",
              "format": "URL"
            }
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp of project creation",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp of last project update",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "customer_id",
          "service_id",
          "title",
          "description",
          "location",
          "project_status"
        ]
      }
    },
    "quotes": {
      "type": "array",
      "description": "List of quotes submitted by professionals for projects",
      "items": {
        "type": "object",
        "properties": {
          "quote_id": {
            "type": "integer",
            "description": "Unique identifier for the quote",
            "readOnly": true
          },
          "project_id": {
            "type": "integer",
            "description": "ID of the project the quote is for"
          },
          "pro_id": {
            "type": "integer",
            "description": "ID of the professional who submitted the quote"
          },
          "price": {
            "type": "number",
            "description": "Price quoted by the professional",
            "minimum": 0
          },
          "message": {
            "type": "string",
            "description": "Message from the professional to the customer"
          },
          "quote_status": {
            "type": "string",
            "description": "Current status of the quote",
            "enum": ["Pending", "Accepted", "Declined", "Expired"]
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp of quote submission",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp of last quote update",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "project_id",
          "pro_id",
          "price",
          "message",
          "quote_status"
        ]
      }
    },
    "reviews": {
      "type": "array",
      "description": "List of reviews for professionals",
      "items": {
        "type": "object",
        "properties": {
          "review_id": {
            "type": "integer",
            "description": "Unique identifier for the review",
            "readOnly": true
          },
          "project_id": {
            "type": "integer",
            "description": "ID of the project associated with the review"
          },
          "pro_id": {
            "type": "integer",
            "description": "ID of the professional being reviewed"
          },
          "customer_id": {
            "type": "integer",
            "description": "ID of the customer who wrote the review"
          },
          "rating": {
            "type": "integer",
            "description": "Rating given to the professional (1-5)",
            "minimum": 1,
            "maximum": 5
          },
          "comment": {
            "type": "string",
            "description": "Review text written by the customer"
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp of review creation",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "project_id",
          "pro_id",
          "customer_id",
          "rating"
        ]
      }
    },
    "messages": {
      "type": "array",
      "description": "List of messages between customers and professionals",
      "items": {
        "type": "object",
        "properties": {
          "message_id": {
            "type": "integer",
            "description": "Unique identifier for the message",
            "readOnly": true
          },
          "project_id": {
            "type": "integer",
            "description": "ID of the project the message is related to"
          },
          "sender_id": {
            "type": "integer",
            "description": "ID of the user who sent the message"
          },
          "recipient_id": {
            "type": "integer",
            "description": "ID of the user who received the message"
          },
          "message_content": {
            "type": "string",
            "description": "Content of the message"
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp of message creation",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "project_id",
          "sender_id",
          "recipient_id",
          "message_content"
        ]
      }
    },
    "bookings": {
      "type": "array",
      "description": "List of project bookings between customers and professionals",
      "items": {
        "type": "object",
        "properties": {
          "booking_id": {
            "type": "integer",
            "description": "Unique identifier for the booking",
            "readOnly": true
          },
          "project_id": {
            "type": "integer",
            "description": "ID of the project associated with the booking"
          },
          "quote_id": {
            "type": "integer",
            "description": "ID of the quote that was accepted for the booking"
          },
          "pro_id": {
            "type": "integer",
            "description": "ID of the professional booked for the project"
          },
          "customer_id": {
            "type": "integer",
            "description": "ID of the customer who made the booking"
          },
          "start_date_time": {
            "type": "string",
            "description": "Scheduled start date and time for the project",
            "format": "date-time"
          },
          "end_date_time": {
            "type": "string",
            "description": "Scheduled end date and time for the project",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Current status of the booking",
            "enum": ["Scheduled", "In Progress", "Completed", "Canceled"]
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp of booking creation",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "project_id",
          "quote_id",
          "pro_id",
          "customer_id",
          "start_date_time",
          "status"
        ]
      }
    },
    "payments": {
      "type": "array",
      "description": "List of payments made for bookings",
      "items": {
        "type": "object",
        "properties": {
          "payment_id": {
            "type": "integer",
            "description": "Unique identifier for the payment",
            "readOnly": true
          },
          "booking_id": {
            "type": "integer",
            "description": "ID of the booking the payment is for"
          },
          "customer_id": {
            "type": "integer",
            "description": "ID of the customer who made the payment"
          },
          "pro_id": {
            "type": "integer",
            "description": "ID of the professional who received the payment"
          },
          "amount": {
            "type": "number",
            "description": "Amount of the payment",
            "minimum": 0
          },
          "payment_method": {
            "type": "string",
            "description": "Payment method used (e.g., credit card, debit card)",
            "enum": ["Credit Card", "Debit Card", "Other"]
          },
          "payment_status": {
            "type": "string",
            "description": "Current status of the payment",
            "enum": ["Pending", "Completed", "Failed", "Refunded"]
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp of payment creation",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "booking_id",
          "customer_id",
          "pro_id",
          "amount",
          "payment_method",
          "payment_status"
        ]
      }
    }
  },
  "required": [
    "users",
    "services",
    "pro_services",
    "projects",
    "quotes",
    "reviews",
    "messages",
    "bookings",
    "payments"
  ]
}{
    "title": "TikTok App Schema",
    "description": "A JSON Schema representing the core data structures of the TikTok app.",
    "type": "object",
    "properties": {
    "users": {
        "type": "array",
            "description": "List of registered users.",
            "items": {
            "$ref": "#/definitions/User"
        }
    },
    "videos": {
        "type": "array",
            "description": "List of videos uploaded to the platform.",
            "items": {
            "$ref": "#/definitions/Video"
        }
    },
    "comments": {
        "type": "array",
            "description": "List of comments made on videos.",
            "items": {
            "$ref": "#/definitions/Comment"
        }
    },
    "likes": {
        "type": "array",
            "description": "List of likes given to videos.",
            "items": {
            "$ref": "#/definitions/Like"
        }
    },
    "hashtags": {
        "type": "array",
            "description": "List of hashtags used in the app.",
            "items": {
            "$ref": "#/definitions/Hashtag"
        }
    },
    "sounds": {
        "type": "array",
            "description": "List of sounds (music/audio) available in the app.",
            "items": {
            "$ref": "#/definitions/Sound"
        }
    },
    "messages": {
        "type": "array",
            "description": "List of direct messages between users",
            "items": {
            "$ref": "#/definitions/Message"
        }
    },
    "notifications": {
        "type": "array",
            "description": "List of user notifications.",
            "items": {
            "$ref": "#/definitions/Notification"
        }
    }
},
    "definitions": {
    "User": {
        "type": "object",
            "properties": {
            "id": {
                "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for the user."
            },
            "username": {
                "type": "string",
                    "description": "User's unique username."
            },
            "full_name": {
                "type": "string",
                    "description": "User's full name (optional)."
            },
            "profile_picture": {
                "type": "string",
                    "format": "URL",
                    "description": "URL to the user's profile picture."
            },
            "bio": {
                "type": "string",
                    "description": "User's bio (optional)."
            },
            "followers": {
                "type": "array",
                    "description": "List of user IDs following this user.",
                    "items": {
                    "type": "string",
                        "format": "uuid"
                }
            },
            "following": {
                "type": "array",
                    "description": "List of user IDs this user is following.",
                    "items": {
                    "type": "string",
                        "format": "uuid"
                }
            },
            "is_private": {
                "type": "boolean",
                    "description": "Indicates if the user's profile is private."
            }
        },
        "required": [
            "id",
            "username"
        ]
    },
    "Video": {
        "type": "object",
            "properties": {
            "id": {
                "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for the video."
            },
            "user_id": {
                "type": "string",
                    "format": "uuid",
                    "description": "ID of the user who uploaded the video."
            },
            "video_url": {
                "type": "string",
                    "format": "URL",
                    "description": "URL to the video file."
            },
            "description": {
                "type": "string",
                    "description": "Description of the video (optional)."
            },
            "sound_id": {
                "type": "string",
                    "format": "uuid",
                    "description": "ID of the sound used in the video (optional)."
            },
            "hashtags": {
                "type": "array",
                    "description": "List of hashtag IDs associated with the video.",
                    "items": {
                    "type": "string",
                        "format": "uuid"
                }
            },
            "duration": {
                "type": "number",
                    "format": "float",
                    "description": "Duration of the video in seconds."
            },
            "created_at": {
                "type": "string",
                    "format": "date-time",
                    "description": "Timestamp when the video was created."
            },
            "location": {
                "type": "object",
                    "description": "Location information, if provided.",
                    "properties": {
                    "latitude": {
                        "type": "number",
                            "format": "float"
                    },
                    "longitude": {
                        "type": "number",
                            "format": "float"
                    }
                }
            }
        },
        "required": [
            "id",
            "user_id",
            "video_url"
        ]
    },
    "Comment": {
        "type": "object",
            "properties": {
            "id": {
                "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for the comment."
            },
            "video_id": {
                "type": "string",
                    "format": "uuid",
                    "description": "ID of the video the comment is on."
            },
            "user_id": {
                "type": "string",
                    "format": "uuid",
                    "description": "ID of the user who made the comment."
            },
            "text": {
                "type": "string",
                    "description": "Content of the comment."
            },
            "created_at": {
                "type": "string",
                    "format": "date-time",
                    "description": "Timestamp when the comment was created."
            }
        },
        "required": [
            "id",
            "video_id",
            "user_id",
            "text"
        ]
    },
    "Like": {
        "type": "object",
            "properties": {
            "id": {
                "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for the like."
            },
            "video_id": {
                "type": "string",
                    "format": "uuid",
                    "description": "ID of the video that was liked."
            },
            "user_id": {
                "type": "string",
                    "format": "uuid",
                    "description": "ID of the user who gave the like."
            },
            "created_at": {
                "type": "string",
                    "format": "date-time",
                    "description": "Timestamp when the like was given."
            }
        },
        "required": [
            "id",
            "video_id",
            "user_id"
        ]
    },
    "Hashtag": {
        "type": "object",
            "properties": {
            "id": {
                "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for the hashtag."
            },
            "name": {
                "type": "string",
                    "description": "Name of the hashtag (e.g., \"funny\", \"dance\")."
            }
        },
        "required": [
            "id",
            "name"
        ]
    },
    "Sound": {
        "type": "object",
            "properties": {
            "id": {
                "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for the sound."
            },
            "title": {
                "type": "string",
                    "description": "Title of the sound."
            },
            "artist": {
                "type": "string",
                    "description": "Artist of the sound (if applicable)."
            },
            "sound_url": {
                "type": "string",
                    "format": "URL",
                    "description": "URL to the sound file."
            },
            "duration": {
                "type": "number",
                    "format": "float",
                    "description": "Duration of the sound in seconds."
            }
        },
        "required": [
            "id",
            "title",
            "sound_url"
        ]
    },
    "Message": {
        "type": "object",
            "properties": {
            "id": {
                "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for the message."
            },
            "sender_id": {
                "type": "string",
                    "format": "uuid",
                    "description": "ID of the user who sent the message"
            },
            "recipient_id": {
                "type": "string",
                    "format": "uuid",
                    "description": "ID of the user who will receive the message"
            },
            "content": {
                "type": "string",
                    "description": "Content of the message"
            },
            "timestamp": {
                "type": "string",
                    "format": "date-time",
                    "description": "Timestamp of when the message was sent"
            }
        },
        "required": [
            "id",
            "sender_id",
            "recipient_id",
            "content",
            "timestamp"
        ]
    },
    "Notification": {
        "type": "object",
            "properties": {
            "id": {
                "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for the notification."
            },
            "user_id": {
                "type": "string",
                    "format": "uuid",
                    "description": "ID of the user who will receive the notification."
            },
            "type": {
                "type": "string",
                    "enum": [
                    "like",
                    "comment",
                    "follow",
                    "mention"
                ],
                    "description": "Type of notification."
            },
            "content": {
                "type": "string",
                    "description": "Description of the notification."
            },
            "is_read": {
                "type": "boolean",
                    "description": "Indicates if the notification has been read."
            },
            "created_at": {
                "type": "string",
                    "format": "date-time",
                    "description": "Timestamp when the notification was created."
            },
            "related_video_id": {
                "type": "string",
                    "format": "uuid",
                    "description": "The id of the video related to the notification (if applicable)."
            },
            "related_user_id": {
                "type": "string",
                    "format": "uuid",
                    "description": "The id of the user related to the notification (if applicable)."
            }
        },
        "required": [
            "id",
            "user_id",
            "type",
            "content",
            "created_at"
        ]
    }
}
}

{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Twitch App",
  "description": "JSON Schema for a simplified representation of the Twitch App data model",
  "type": "object",
  "properties": {
    "users": {
      "type": "array",
      "description": "List of Twitch users",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique user ID"
          },
          "login": {
            "type": "string",
            "description": "User's login name (username)"
          },
          "display_name": {
            "type": "string",
            "description": "User's display name"
          },
          "profile_image_url": {
            "type": "string",
            "format": "URL",
            "description": "URL to the user's profile image"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address (requires appropriate OAuth scope)"
          },
          "broadcaster_type": {
            "type": "string",
            "enum": ["", "affiliate", "partner"],
            "description": "User's broadcaster type (empty string for non-broadcasters)"
          },
          "description": {
            "type": "string",
            "description": "User's channel description"
          },
          "view_count": {
            "type": "integer",
            "description": "Total number of views on the user's channel"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the user account was created"
          }
        },
        "required": [
          "id",
          "login",
          "display_name"
        ]
      }
    },
    "streams": {
      "type": "array",
      "description": "List of live streams",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique stream ID"
          },
          "user_id": {
            "type": "integer",
            "description": "User ID of the broadcaster"
          },
          "user_login": {
            "type": "string",
            "description": "User's login name (username)"
          },
          "user_name": {
            "type": "string",
            "description": "User's display name"
          },
          "game_id": {
            "type": "string",
            "description": "Game ID being streamed"
          },
          "game_name": {
            "type": "string",
            "description": "Name of the game being streamed"
          },
          "type": {
            "type": "string",
            "enum": ["live", ""],
            "description": "Stream type (live or empty string for vodcasts)"
          },
          "title": {
            "type": "string",
            "description": "Stream title"
          },
          "viewer_count": {
            "type": "integer",
            "description": "Number of viewers currently watching the stream"
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the stream started"
          },
          "language": {
            "type": "string",
            "description": "Stream language (e.g., 'en', 'es')"
          },
          "thumbnail_url": {
            "type": "string",
            "format": "URL",
            "description": "Template URL for the stream thumbnail"
          },
          "tag_ids": {
            "type": "array",
            "description": "List of tag IDs associated with the stream",
            "items": {
              "type": "string"
            }
          },
          "is_mature": {
            "type": "boolean",
            "description": "Indicates if the stream is marked as mature"
          }
        },
        "required": [
          "id",
          "user_id",
          "user_login",
          "user_name",
          "viewer_count",
          "started_at"
        ]
      }
    },
    "games": {
      "type": "array",
      "description": "List of games",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique game ID"
          },
          "name": {
            "type": "string",
            "description": "Name of the game"
          },
          "box_art_url": {
            "type": "string",
            "format": "URL",
            "description": "Template URL for the game's box art"
          },
          "igdb_id": {
            "type": "string",
            "description": "ID of the game on IGDB"
          }
        },
        "required": [
          "id",
          "name",
          "box_art_url"
        ]
      }
    },
    "videos": {
      "type": "array",
      "description": "List of videos (VODs, highlights, uploads)",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique video ID"
          },
          "stream_id": {
            "type": "string",
            "description": "ID of the stream that the video originated from (null if not associated with a stream)"
          },
          "user_id": {
            "type": "integer",
            "description": "User ID of the video owner"
          },
          "user_login": {
            "type": "string",
            "description": "User login name of the video owner"
          },
          "user_name": {
            "type": "string",
            "description": "Display name of the video owner"
          },
          "title": {
            "type": "string",
            "description": "Video title"
          },
          "description": {
            "type": "string",
            "description": "Video description"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the video was created"
          },
          "published_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the video was published"
          },
          "url": {
            "type": "string",
            "format": "URL",
            "description": "URL of the video"
          },
          "thumbnail_url": {
            "type": "string",
            "format": "URL",
            "description": "Template URL for the video thumbnail"
          },
          "viewable": {
            "type": "string",
            "enum": ["public", "private"],
            "description": "Whether the video is public or private"
          },
          "view_count": {
            "type": "integer",
            "description": "Number of times the video has been viewed"
          },
          "language": {
            "type": "string",
            "description": "Language of the video (e.g., 'en', 'es')"
          },
          "type": {
            "type": "string",
            "enum": ["upload", "archive", "highlight"],
            "description": "Type of video (upload, archive, or highlight)"
          },
          "duration": {
            "type": "string",
            "description": "Video duration in format: '0h0m0s'"
          },
          "muted_segments": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "duration": {
                  "type": "integer",
                  "description": "Duration of the muted segment in seconds"
                },
                "offset": {
                  "type": "integer",
                  "description": "Offset in the video in seconds"
                }
              },
              "required": [
                "duration",
                "offset"
              ]
            }
          }
        },
        "required": [
          "id",
          "user_id",
          "user_login",
          "user_name",
          "title",
          "url",
          "view_count"
        ]
      }
    },
    "clips": {
      "type": "array",
      "description": "List of clips.",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the clip."
          },
          "url": {
            "type": "string",
            "format": "URL",
            "description": "URL to view the clip."
          },
          "embed_url": {
            "type": "string",
            "format": "URL",
            "description": "URL to embed the clip."
          },
          "broadcaster_id": {
            "type": "integer",
            "description": "User ID of the stream from which the clip was created."
          },
          "broadcaster_name": {
            "type": "string",
            "description": "Display name of the broadcaster."
          },
          "creator_id": {
            "type": "integer",
            "description": "User ID of the user who created the clip."
          },
          "creator_name": {
            "type": "string",
            "description": "Display name of the user who created the clip."
          },
          "video_id": {
            "type": "string",
            "description": "ID of the video from which the clip was created."
          },
          "game_id": {
            "type": "string",
            "description": "ID of the game being played when the clip was created."
          },
          "language": {
            "type": "string",
            "description": "Language of the clip (e.g., 'en', 'es')."
          },
          "title": {
            "type": "string",
            "description": "Title of the clip."
          },
          "view_count": {
            "type": "integer",
            "description": "Number of times the clip has been viewed."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the clip was created."
          },
          "thumbnail_url": {
            "type": "string",
            "format": "URL",
            "description": "URL to the thumbnail image of the clip."
          },
          "duration": {
            "type": "number",
            "format": "float",
            "description": "Duration of the clip in seconds."
          },
          "vod_offset": {
            "type": "integer",
            "description": "The zero-based offset, in seconds, to where the clip starts in the video (VOD). Is null if the video is not available or hasn't been created yet from the live stream."
          },
          "is_featured": {
            "type": "boolean",
            "description": "Indicates if the clip is featured."
          }
        },
        "required": [
          "id",
          "url",
          "embed_url",
          "broadcaster_id",
          "broadcaster_name",
          "creator_id",
          "creator_name",
          "game_id",
          "language",
          "title",
          "view_count",
          "created_at",
          "thumbnail_url",
          "duration"
        ]
      }
    },
    "teams": {
      "type": "array",
      "description": "List of channel teams.",
      "items": {
        "type": "object",
        "properties": {
          "background_image_url": {
            "type": "string",
            "format": "URL",
            "description": "URL for the team's background image."
          },
          "banner": {
            "type": "string",
            "format": "URL",
            "description": "URL for the team's banner."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the team was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the team was last updated."
          },
          "info": {
            "type": "string",
            "description": "Team description."
          },
          "thumbnail_url": {
            "type": "string",
            "format": "URL",
            "description": "URL to the team's thumbnail image."
          },
          "team_name": {
            "type": "string",
            "description": "Team name."
          },
          "team_display_name": {
            "type": "string",
            "description": "Team display name."
          },
          "id": {
            "type": "string",
            "description": "Unique ID of the team."
          },
          "users": {
            "type": "array",
            "description": "List of users that are part of the team.",
            "items": {
              "$ref": "#/properties/users/items"
            }
          }
        },
        "required": [
          "created_at",
          "updated_at",
          "info",
          "thumbnail_url",
          "team_name",
          "team_display_name",
          "id",
          "users"
        ]
      }
    }
  },
  "required": []
{
  "type": "object",
  "title": "Twitter",
  "description": "JSON Schema for Twitter data model (simplified)",
  "properties": {
    "users": {
      "type": "array",
      "description": "List of Twitter users",
      "items": {
        "$ref": "#/definitions/User"
      }
    },
    "tweets": {
      "type": "array",
      "description": "List of Tweets",
      "items": {
        "$ref": "#/definitions/Tweet"
      }
    },
    "trends": {
      "type": "array",
      "description": "List of trending topics",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the trending topic"
          },
          "tweet_volume": {
            "type": "integer",
            "description": "Approximate number of tweets related to the trend"
          }
        },
        "required": [
          "name"
        ]
      }
    },
    "direct_messages": {
      "type": "array",
      "description": "List of direct messages",
      "items": {
        "$ref": "#/definitions/DirectMessage"
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique identifier for the user",
          "readOnly": true
        },
        "id_str": {
          "type": "string",
          "description": "String representation of the unique identifier",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The user's display name",
          "maxLength": 50
        },
        "screen_name": {
          "type": "string",
          "description": "The user's Twitter handle (username)",
          "maxLength": 15,
          "pattern": "^[a-zA-Z0-9_]+$"
        },
        "location": {
          "type": "string",
          "description": "The user's location (as entered by the user)",
          "maxLength": 30
        },
        "description": {
          "type": "string",
          "description": "The user's profile description (bio)",
          "maxLength": 160
        },
        "url": {
          "type": "string",
          "description": "URL associated with the user's profile",
          "format": "url"
        },
        "protected": {
          "type": "boolean",
          "description": "Indicates if the user's tweets are protected (private)"
        },
        "followers_count": {
          "type": "integer",
          "description": "Number of followers",
          "readOnly": true
        },
        "friends_count": {
          "type": "integer",
          "description": "Number of users this user is following",
          "readOnly": true
        },
        "listed_count": {
          "type": "integer",
          "description": "Number of public lists the user is a member of",
          "readOnly": true
        },
        "created_at": {
          "type": "string",
          "description": "UTC time when the user was created",
          "format": "date-time",
          "readOnly": true
        },
        "favourites_count": {
          "type": "integer",
          "description": "Number of tweets this user has liked",
          "readOnly": true
        },
        "verified": {
          "type": "boolean",
          "description": "Indicates if the user's account is verified"
        },
        "statuses_count": {
          "type": "integer",
          "description": "Number of tweets (including retweets) posted by the user",
          "readOnly": true
        },
        "profile_image_url_https": {
          "type": "string",
          "description": "URL of the user's profile image (HTTPS)",
          "format": "url"
        },
        "following": {
          "type": "array",
          "description": "IDs of users this user is following",
          "items": {
            "type": "integer"
          }
        },
        "followers": {
          "type": "array",
          "description": "IDs of users following this user",
          "items": {
            "type": "integer"
          }
        }
      },
      "required": [
        "id",
        "id_str",
        "name",
        "screen_name"
      ]
    },
    "Tweet": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "description": "UTC time when the tweet was created",
          "format": "date-time",
          "readOnly": true
        },
        "id": {
          "type": "integer",
          "description": "Unique identifier for the tweet",
          "readOnly": true
        },
        "id_str": {
          "type": "string",
          "description": "String representation of the unique identifier",
          "readOnly": true
        },
        "text": {
          "type": "string",
          "description": "The actual UTF-8 text of the tweet",
          "maxLength": 280
        },
        "source": {
          "type": "string",
          "description": "Utility used to post the tweet (e.g., 'Twitter for iPhone')",
          "readOnly": true
        },
        "truncated": {
          "type": "boolean",
          "description": "Indicates if the text was truncated",
          "readOnly": true
        },
        "in_reply_to_status_id": {
          "type": "integer",
          "description": "ID of the tweet this tweet is in reply to (if applicable)"
        },
        "in_reply_to_user_id": {
          "type": "integer",
          "description": "ID of the user this tweet is in reply to (if applicable)"
        },
        "user_id": {
          "type": "integer",
          "description": "ID of the user who posted the tweet",
          "$ref": "#/definitions/User/properties/id"
        },
        "coordinates": {
          "type": "object",
          "description": "Geographic coordinates associated with the tweet",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "Point"
              ]
            },
            "coordinates": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "float"
              },
              "minItems": 2,
              "maxItems": 2
            }
          },
          "required": [
            "type",
            "coordinates"
          ]
        },
        "place": {
          "type": "object",
          "description": "Information about the place tagged in the tweet",
          "properties": {
            "id": {
              "type": "string"
            },
            "url": {
              "type": "string",
              "format": "url"
            },
            "place_type": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "full_name": {
              "type": "string"
            },
            "country_code": {
              "type": "string"
            },
            "country": {
              "type": "string"
            }
          }
        },
        "retweet_count": {
          "type": "integer",
          "description": "Number of times the tweet has been retweeted",
          "readOnly": true
        },
        "favorite_count": {
          "type": "integer",
          "description": "Number of times the tweet has been liked",
          "readOnly": true
        },
        "entities": {
          "type": "object",
          "description": "Entities extracted from the tweet text (hashtags, URLs, user mentions, etc.)",
          "properties": {
            "hashtags": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "text": {
                    "type": "string"
                  },
                  "indices": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    },
                    "minItems": 2,
                    "maxItems": 2
                  }
                }
              }
            },
            "urls": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "format": "url"
                  },
                  "expanded_url": {
                    "type": "string",
                    "format": "url"
                  },
                  "display_url": {
                    "type": "string"
                  },
                  "indices": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    },
                    "minItems": 2,
                    "maxItems": 2
                  }
                }
              }
            },
            "user_mentions": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "screen_name": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "id": {
                    "type": "integer"
                  },
                  "id_str": {
                    "type": "string"
                  },
                  "indices": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    },
                    "minItems": 2,
                    "maxItems": 2
                  }
                }
              }
            },
            "media": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer"
                  },
                  "id_str": {
                    "type": "string"
                  },
                  "media_url": {
                    "type": "string",
                    "format": "url"
                  },
                  "media_url_https": {
                    "type": "string",
                    "format": "url"
                  },
                  "url": {
                    "type": "string",
                    "format": "url"
                  },
                  "display_url": {
                    "type": "string"
                  },
                  "expanded_url": {
                    "type": "string",
                    "format": "url"
                  },
                  "type": {
                    "type": "string",
                    "enum": ["photo", "video", "animated_gif"]
                  },
                  "sizes": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object",
                      "properties": {
                        "w": {
                          "type": "integer"
                        },
                        "h": {
                          "type": "integer"
                        },
                        "resize": {
                          "type": "string",
                          "enum": ["crop", "fit"]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "retweeted": {
          "type": "boolean",
          "description": "Indicates if the authenticated user has retweeted this tweet",
          "readOnly": true
        },
        "favorited": {
          "type": "boolean",
          "description": "Indicates if the authenticated user has liked this tweet",
          "readOnly": true
        },
        "retweeted_status": {
          "type": "object",
          "description": "If this is a retweet, this will contain the original Tweet object",
          "$ref": "#/definitions/Tweet"
        }
      },
      "required": [
        "id",
        "id_str",
        "text",
        "user_id"
      ]
    },
    "DirectMessage": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique identifier for the direct message",
          "readOnly": true
        },
        "id_str": {
          "type": "string",
          "description": "String representation of the unique identifier",
          "readOnly": true
        },
        "text": {
          "type": "string",
          "description": "The text of the direct message",
          "maxLength": 10000
        },
        "sender_id": {
          "type": "integer",
          "description": "ID of the user who sent the message"
        },
        "recipient_id": {
          "type": "integer",
          "description": "ID of the user who received the message"
        },
        "created_at": {
          "type": "string",
          "description": "UTC time when the message was created",
          "format": "date-time",
          "readOnly": true
        },
        "entities": {
          "type": "object",
          "description": "Entities extracted from the message text (URLs, user mentions, etc.)",
          "properties": {
            "urls": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "format": "url"
                  },
                  "expanded_url": {
                    "type": "string",
                    "format": "url"
                  },
                  "display_url": {
                    "type": "string"
                  },
                  "indices": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    },
                    "minItems": 2,
                    "maxItems": 2
                  }
                }
              }
            },
            "user_mentions": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "screen_name": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "id": {
                    "type": "integer"
                  },
                  "id_str": {
                    "type": "string"
                  },
                  "indices": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    },
                    "minItems": 2,
                    "maxItems": 2
                  }
                }
              }
            }
          }
        }
      },
      "required": [
        "id",
        "id_str",
        "text",
        "sender_id",
        "recipient_id"
      ]
    }
  }
}{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Uber App",
  "description": "JSON Schema for the core functionalities of the Uber App",
  "type": "object",
  "properties": {
    "user": {
      "type": "object",
      "description": "User information",
      "properties": {
        "userId": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the user"
        },
        "firstName": {
          "type": "string",
          "description": "User's first name"
        },
        "lastName": {
          "type": "string",
          "description": "User's last name"
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "User's email address"
        },
        "phoneNumber": {
          "type": "string",
          "pattern": "^\\+[1-9]\\d{1,14}$",
          "description": "User's phone number (E.164 format)"
        },
        "paymentMethods": {
          "type": "array",
          "description": "List of user's payment methods",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["credit_card", "debit_card", "paypal", "uber_cash"],
                "description": "Type of payment method"
              },
              "details": {
                "type": "object",
                "description": "Details specific to the payment method type",
                "oneOf": [
                  {
                    "properties": {
                      "cardNumber": {
                        "type": "string",
                        "description": "Credit/Debit card number (last 4 digits stored)"
                      },
                      "expiryDate": {
                        "type": "string",
                        "format": "date",
                        "description": "Card expiry date (MM/YY)"
                      },
                      "cardType": {
                        "type": "string",
                        "enum": ["Visa", "MasterCard", "American Express", "Discover"],
                        "description": "Card issuer"
                      }
                    },
                    "required": ["cardNumber", "expiryDate", "cardType"]
                  },
                  {
                    "properties": {
                      "paypalEmail": {
                        "type": "string",
                        "format": "email",
                        "description": "PayPal email address"
                      }
                    },
                    "required": ["paypalEmail"]
                  },
                  {
                    "properties":{
                      "balance":{
                        "type": "number",
                        "description": "Balance available in Uber Cash"
                      }
                    },
                    "required": ["balance"]
                  }
                ]
              }
            },
            "required": ["type", "details"]
          }
        },
        "profilePicture": {
          "type": "string",
          "format": "URL",
          "description": "URL to the user's profile picture"
        },
        "rating": {
          "type": "number",
          "description": "Average rating of the user as a rider",
          "minimum": 0,
          "maximum": 5
        }
      },
      "required": [
        "userId",
        "firstName",
        "lastName",
        "email",
        "phoneNumber"
      ]
    },
    "driver": {
      "type": "object",
      "description": "Driver information",
      "properties": {
        "driverId": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the driver"
        },
        "firstName": {
          "type": "string",
          "description": "Driver's first name"
        },
        "lastName": {
          "type": "string",
          "description": "Driver's last name"
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "Driver's email address"
        },
        "phoneNumber": {
          "type": "string",
          "pattern": "^\\+[1-9]\\d{1,14}$",
          "description": "Driver's phone number (E.164 format)"
        },
        "vehicle": {
          "type": "object",
          "description": "Driver's vehicle information",
          "properties": {
            "make": {
              "type": "string",
              "description": "Vehicle make"
            },
            "model": {
              "type": "string",
              "description": "Vehicle model"
            },
            "year": {
              "type": "integer",
              "description": "Vehicle year"
            },
            "licensePlate": {
              "type": "string",
              "description": "Vehicle license plate number"
            },
            "color": {
              "type": "string",
              "description": "Vehicle color"
            }
          },
          "required": [
            "make",
            "model",
            "year",
            "licensePlate",
            "color"
          ]
        },
        "profilePicture": {
          "type": "string",
          "format": "URL",
          "description": "URL to the driver's profile picture"
        },
        "rating": {
          "type": "number",
          "description": "Average rating of the driver",
          "minimum": 0,
          "maximum": 5
        },
        "status": {
          "type": "string",
          "enum": ["online", "offline", "on_trip"],
          "description": "Current status of the driver"
        },
        "location": {
          "$ref": "#/definitions/location",
          "description": "Current location of the driver"
        }
      },
      "required": [
        "driverId",
        "firstName",
        "lastName",
        "email",
        "phoneNumber",
        "vehicle",
        "rating",
        "status"
      ]
    },
    "trip": {
      "type": "object",
      "description": "Trip information",
      "properties": {
        "tripId": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the trip"
        },
        "riderId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the rider requesting the trip"
        },
        "driverId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the driver assigned to the trip"
        },
        "pickupLocation": {
          "$ref": "#/definitions/location",
          "description": "Pickup location"
        },
        "dropoffLocation": {
          "$ref": "#/definitions/location",
          "description": "Dropoff location"
        },
        "pickupAddress": {
          "type": "string",
          "description": "Address of the pickup location."
        },
        "dropoffAddress": {
          "type": "string",
          "description": "Address of the dropoff location."
        },
        "status": {
          "type": "string",
          "enum": [
            "requested",
            "accepted",
            "driver_arrived",
            "in_progress",
            "completed",
            "cancelled"
          ],
          "description": "Current status of the trip"
        },
        "fare": {
          "type": "number",
          "description": "Estimated or final fare for the trip",
          "minimum": 0
        },
        "distance": {
          "type": "number",
          "description": "Distance of the trip in kilometers/miles",
          "minimum": 0
        },
        "duration": {
          "type": "integer",
          "description": "Estimated or actual duration of the trip in minutes",
          "minimum": 0
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "Start time of the trip"
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "End time of the trip"
        },
        "paymentMethod": {
          "type": "string",
          "description": "Chosen payment method for the trip (can be masked)"
        },
        "vehicleType": {
          "type": "string",
          "enum": ["UberX", "UberXL", "Uber Black", "UberPool", "Comfort"],
          "description": "Type of Uber vehicle requested"
        }
      },
      "required": [
        "tripId",
        "riderId",
        "pickupLocation",
        "dropoffLocation",
        "pickupAddress",
        "dropoffAddress",
        "status"
      ]
    },
    "rideRequest": {
      "type": "object",
      "description": "Ride request parameters",
      "properties": {
        "riderId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the rider requesting the ride"
        },
        "pickupLocation": {
          "$ref": "#/definitions/location",
          "description": "Pickup location"
        },
        "dropoffLocation": {
          "$ref": "#/definitions/location",
          "description": "Dropoff location"
        },
        "pickupAddress": {
          "type": "string",
          "description": "Address of the pickup location."
        },
        "dropoffAddress": {
          "type": "string",
          "description": "Address of the dropoff location."
        },
        "vehicleType": {
          "type": "string",
          "enum": ["UberX", "UberXL", "Uber Black", "UberPool", "Comfort"],
          "description": "Type of Uber vehicle requested"
        }
      },
      "required": [
        "riderId",
        "pickupLocation",
        "dropoffLocation",
        "pickupAddress",
        "dropoffAddress",
        "vehicleType"
      ]
    }
  },
  "definitions": {
    "location": {
      "type": "object",
      "properties": {
        "latitude": {
          "type": "number",
          "format": "float",
          "minimum": -90,
          "maximum": 90,
          "description": "Latitude coordinate"
        },
        "longitude": {
          "type": "number",
          "format": "float",
          "minimum": -180,
          "maximum": 180,
          "description": "Longitude coordinate"
        }
      },
      "required": [
        "latitude",
        "longitude"
      ]
    }
  }
}{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "UberEats App Schema",
  "description": "JSON Schema for a simplified UberEats app data model.",
  "type": "object",
  "properties": {
    "users": {
      "type": "array",
      "description": "List of users (customers and drivers).",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique user ID."
          },
          "name": {
            "type": "string",
            "description": "User's full name."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address."
          },
          "phone": {
            "type": "string",
            "pattern": "^\\+?[1-9]\\d{1,14}$",
            "description": "User's phone number (E.164 format)."
          },
          "address": {
            "type": "string",
            "description": "User's delivery address."
          },
          "paymentMethods": {
            "type": "array",
            "description": "User's saved payment methods.",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["credit_card", "debit_card", "paypal", "uber_cash"],
                  "description": "Type of payment method."
                },
                "lastFourDigits": {
                  "type": "string",
                  "description": "Last four digits of card number (for display).",
                  "maxLength": 4,
                  "minLength": 4,
                  "pattern": "^\\d{4}$"
                }
              },
              "required": [
                "type"
              ]
            }
          },
          "role": {
            "type": "string",
            "enum": ["customer", "driver"],
            "description": "User role - customer or driver"
          },
          "driverInfo": {
            "type": "object",
            "description": "Driver-specific information (if role is driver).",
            "properties": {
              "vehicleType": {
                "type": "string",
                "enum": ["car", "bike", "scooter"],
                "description": "Type of vehicle the driver uses."
              },
              "licensePlate": {
                "type": "string",
                "description": "Vehicle's license plate number."
              }
            },
            "required": [
              "vehicleType"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "email",
          "role"
        ]
      }
    },
    "restaurants": {
      "type": "array",
      "description": "List of restaurants.",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique restaurant ID."
          },
          "name": {
            "type": "string",
            "description": "Restaurant's name."
          },
          "address": {
            "type": "string",
            "description": "Restaurant's address."
          },
          "cuisine": {
            "type": "array",
            "description": "Types of cuisine offered.",
            "items": {
              "type": "string"
            }
          },
          "rating": {
            "type": "number",
            "minimum": 0,
            "maximum": 5,
            "description": "Average customer rating."
          },
          "deliveryFee": {
            "type": "number",
            "minimum": 0,
            "description": "Delivery fee for the restaurant."
          },
          "estimatedDeliveryTime": {
            "type": "string",
            "description": "Estimated delivery time range (e.g., '25-35 mins')."
          },
          "menu": {
            "type": "array",
            "description": "Restaurant's menu.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique menu item ID."
                },
                "name": {
                  "type": "string",
                  "description": "Name of the menu item."
                },
                "description": {
                  "type": "string",
                  "description": "Description of the menu item."
                },
                "price": {
                  "type": "number",
                  "minimum": 0,
                  "description": "Price of the menu item."
                },
                "imageUrl": {
                  "type": "string",
                  "format": "URL",
                  "description": "URL of an image of the menu item."
                },
                "category": {
                  "type": "string",
                  "description": "Category of the item (e.g., 'Appetizer', 'Main Course')."
                },
                "options": {
                  "type": "array",
                  "description": "Customizable options for the item (e.g., toppings, size).",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Name of the option (e.g., 'Cheese')."
                      },
                      "price": {
                        "type": "number",
                        "minimum": 0,
                        "description": "Additional price for the option."
                      }
                    },
                    "required": [
                      "name"
                    ]
                  }
                }
              },
              "required": [
                "id",
                "name",
                "price"
              ]
            }
          }
        },
        "required": [
          "id",
          "name",
          "address",
          "menu"
        ]
      }
    },
    "orders": {
      "type": "array",
      "description": "List of orders.",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique order ID."
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the user who placed the order."
          },
          "restaurantId": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the restaurant the order is from."
          },
          "driverId": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the driver assigned to the order (if any)."
          },
          "items": {
            "type": "array",
            "description": "List of items in the order.",
            "items": {
              "type": "object",
              "properties": {
                "menuItemId": {
                  "type": "string",
                  "format": "uuid",
                  "description": "ID of the menu item."
                },
                "quantity": {
                  "type": "integer",
                  "minimum": 1,
                  "description": "Quantity of the item ordered."
                },
                "options": {
                  "type": "array",
                  "description": "Selected options for the menu item",
                  "items": {
                    "type": "string"
                  }
                },
                "specialInstructions": {
                  "type": "string",
                  "description": "Any special instructions for the item."
                }
              },
              "required": [
                "menuItemId",
                "quantity"
              ]
            }
          },
          "totalPrice": {
            "type": "number",
            "minimum": 0,
            "description": "Total price of the order."
          },
          "deliveryAddress": {
            "type": "string",
            "description": "Delivery address for the order."
          },
          "orderTime": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the order was placed."
          },
          "estimatedDeliveryTime": {
            "type": "string",
            "format": "date-time",
            "description": "Estimated delivery timestamp."
          },
          "status": {
            "type": "string",
            "enum": [
              "placed",
              "preparing",
              "out_for_delivery",
              "delivered",
              "canceled"
            ],
            "description": "Current status of the order."
          },
          "paymentMethod": {
            "type": "object",
            "description": "payment method that has been used for the order",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["credit_card", "debit_card", "paypal", "uber_cash"],
                "description": "Type of payment method."
              },
              "lastFourDigits": {
                "type": "string",
                "description": "Last four digits of card number (for display).",
                "maxLength": 4,
                "minLength": 4,
                "pattern": "^\\d{4}$"
              }
            },
            "required": [
              "type"
            ]
          }
        },
        "required": [
          "id",
          "userId",
          "restaurantId",
          "items",
          "totalPrice",
          "deliveryAddress",
          "orderTime",
          "status",
          "paymentMethod"
        ]
      }
    }
  },
  "required": [
    "users",
    "restaurants",
    "orders"
  ]
}{
  "type": "object",
  "title": "Venmo App Schema",
  "description": "JSON Schema representing the core data structures and functionalities of a simplified Venmo-like application.",
  "definitions": {
    "user": {
      "type": "object",
      "title": "User",
      "description": "Represents a user in the Venmo system.",
      "properties": {
        "user_id": {
          "type": "integer",
          "description": "Unique identifier for the user.",
          "readOnly": true
        },
        "username": {
          "type": "string",
          "description": "User's chosen username.",
          "minLength": 3,
          "maxLength": 30,
          "pattern": "^[a-zA-Z0-9_-]+$"
        },
        "email": {
          "type": "string",
          "description": "User's email address.",
          "format": "email"
        },
        "phone_number": {
          "type": "string",
          "description": "User's phone number (optional).",
          "pattern": "^\\+?[1-9]\\d{1,14}$"
        },
        "first_name": {
          "type": "string",
          "description": "User's first name.",
          "maxLength": 50
        },
        "last_name": {
          "type": "string",
          "description": "User's last name.",
          "maxLength": 50
        },
        "profile_picture_url": {
          "type": "string",
          "description": "URL to the user's profile picture (optional).",
          "format": "url"
        },
        "balance": {
          "type": "number",
          "description": "Current balance of the user's account.",
          "default": 0,
          "minimum": 0
        },
        "friends": {
          "type": "array",
          "description": "List of user IDs representing the user's friends.",
          "items": {
            "type": "integer"
          }
        },
        "date_joined": {
          "type": "string",
          "description": "Date the user joined the platform.",
          "format": "date-time",
          "readOnly": true
        },
        "is_verified": {
          "type": "boolean",
          "description": "Whether the user has verified their account"
        }
      },
      "required": [
        "username",
        "email",
        "first_name",
        "last_name"
      ]
    },
    "transaction": {
      "type": "object",
      "title": "Transaction",
      "description": "Represents a transaction between two users.",
      "properties": {
        "transaction_id": {
          "type": "integer",
          "description": "Unique identifier for the transaction.",
          "readOnly": true
        },
        "sender_id": {
          "type": "integer",
          "description": "User ID of the sender."
        },
        "recipient_id": {
          "type": "integer",
          "description": "User ID of the recipient."
        },
        "amount": {
          "type": "number",
          "description": "Amount of the transaction.",
          "exclusiveMinimum": 0
        },
        "note": {
          "type": "string",
          "description": "Note associated with the transaction.",
          "maxLength": 255
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of the transaction.",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "description": "Status of the transaction.",
          "enum": [
            "pending",
            "completed",
            "failed",
            "canceled"
          ]
        },
        "type": {
          "type": "string",
          "description": "Type of Transaction",
          "enum": [
            "payment",
            "request"
          ]
        }
      },
      "required": [
        "sender_id",
        "recipient_id",
        "amount",
        "note",
        "status",
        "type"
      ]
    },
    "payment_method": {
      "type": "object",
      "title": "Payment Method",
      "description": "Represents a user's linked payment method.",
      "properties": {
        "payment_method_id": {
          "type": "integer",
          "description": "Unique identifier for the payment method.",
          "readOnly": true
        },
        "user_id": {
          "type": "integer",
          "description": "User ID associated with this payment method."
        },
        "type": {
          "type": "string",
          "description": "Type of payment method.",
          "enum": [
            "bank_account",
            "credit_card",
            "debit_card"
          ]
        },
        "is_primary": {
          "type": "boolean",
          "description": "Whether this is the user's primary payment method."
        },
        "details": {
          "type": "object",
          "description": "Details specific to the payment method type.",
          "oneOf": [
            {
              "$ref": "#/definitions/bank_account_details"
            },
            {
              "$ref": "#/definitions/card_details"
            }
          ]
        }
      },
      "required": [
        "user_id",
        "type",
        "is_primary",
        "details"
      ]
    },
    "bank_account_details": {
      "type": "object",
      "title": "Bank Account Details",
      "description": "Details for a bank account payment method.",
      "properties": {
        "account_number": {
          "type": "string",
          "description": "Bank account number (masked).",
          "pattern": "^\\*+\\d{4}$"
        },
        "routing_number": {
          "type": "string",
          "description": "Bank routing number.",
          "pattern": "^\\d{9}$"
        },
        "account_type": {
          "type": "string",
          "enum": [
            "checking",
            "savings"
          ]
        }
      },
      "required": [
        "account_number",
        "routing_number"
      ]
    },
    "card_details": {
      "type": "object",
      "title": "Card Details",
      "description": "Details for a credit/debit card payment method.",
      "properties": {
        "card_number": {
          "type": "string",
          "description": "Card number (masked).",
          "pattern": "^\\*+\\d{4}$"
        },
        "expiration_date": {
          "type": "string",
          "description": "Card expiration date (MM/YY).",
          "pattern": "^(0[1-9]|1[0-2])\\/([0-9]{2})$"
        },
        "card_type": {
          "type": "string",
          "enum": [
            "Visa",
            "Mastercard",
            "Amex",
            "Discover"
          ]
        }
      },
      "required": [
        "card_number",
        "expiration_date",
        "card_type"
      ]
    },
    "notification": {
      "type": "object",
      "title": "Notification",
      "description": "Represents a notification sent to a user.",
      "properties": {
        "notification_id": {
          "type": "integer",
          "description": "Unique identifier for the notification.",
          "readOnly": true
        },
        "user_id": {
          "type": "integer",
          "description": "User ID the notification is sent to."
        },
        "type": {
          "type": "string",
          "description": "Type of notification.",
          "enum": [
            "payment_received",
            "payment_sent",
            "request_received",
            "request_completed",
            "friend_request",
            "friend_accepted",
            "system_message"
          ]
        },
        "message": {
          "type": "string",
          "description": "Content of the notification."
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of the notification.",
          "format": "date-time",
          "readOnly": true
        },
        "is_read": {
          "type": "boolean",
          "description": "Whether the notification has been read.",
          "default": false
        },
        "associated_transaction_id": {
          "type": "integer",
          "description": "Transaction ID linked to this notification (optional)."
        },
        "associated_user_id": {
          "type": "integer",
          "description": "Associated user ID, if applicable"
        }
      },
      "required": [
        "user_id",
        "type",
        "message",
        "timestamp",
        "is_read"
      ]
    }
  },
  "properties": {
    "users": {
      "type": "array",
      "description": "List of all users in the system.",
      "items": {
        "$ref": "#/definitions/user"
      }
    },
    "transactions": {
      "type": "array",
      "description": "List of all transactions.",
      "items": {
        "$ref": "#/definitions/transaction"
      }
    },
    "payment_methods": {
      "type": "array",
      "description": "List of all payment methods.",
      "items": {
        "$ref": "#/definitions/payment_method"
      }
    },
    "notifications": {
      "type": "array",
      "description": "List of all notifications.",
      "items": {
        "$ref": "#/definitions/notification"
      }
    }
  }
}{
  "type": "object",
  "title": "WeChat",
  "description": "JSON Schema representation of WeChat's core features and data structures.",
  "properties": {
    "users": {
      "type": "array",
      "description": "List of WeChat users.",
      "items": {
        "$ref": "#/definitions/User"
      }
    },
    "groups": {
      "type": "array",
      "description": "List of WeChat groups.",
      "items": {
        "$ref": "#/definitions/Group"
      }
    },
    "moments": {
      "type": "array",
      "description": "List of WeChat Moments posts.",
      "items": {
        "$ref": "#/definitions/Moment"
      }
    },
    "officialAccounts": {
      "type": "array",
      "description": "List of Official Accounts.",
      "items": {
        "$ref": "#/definitions/OfficialAccount"
      }
    },
    "miniPrograms": {
      "type": "array",
      "description": "List of Mini Programs.",
      "items": {
        "$ref": "#/definitions/MiniProgram"
      }
    },
    "payments": {
      "type": "array",
      "description": "List of WeChat Pay transactions.",
      "items": {
        "$ref": "#/definitions/PaymentTransaction"
      }
    },
    "messages": {
      "type": "array",
      "description": "General container for all messages across conversations.",
      "items": {
        "$ref": "#/definitions/Message"
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "description": "A WeChat user.",
      "properties": {
        "userId": {
          "type": "string",
          "description": "Unique identifier for the user.",
          "format": "uuid"
        },
        "weChatId": {
          "type": "string",
          "description": "User's WeChat ID (can be changed once)."
        },
        "phoneNumber": {
          "type": "string",
          "description": "User's phone number (used for registration).",
          "format": "phone"
        },
        "nickname": {
          "type": "string",
          "description": "User's display name."
        },
        "avatarUrl": {
          "type": "string",
          "description": "URL to the user's profile picture.",
          "format": "URL"
        },
        "gender": {
          "type": "string",
          "enum": [
            "male",
            "female",
            "unknown"
          ]
        },
        "country": {
          "type": "string",
          "description": "User's country code."
        },
        "province": {
          "type": "string",
          "description": "User's province."
        },
        "city": {
          "type": "string",
          "description": "User's city."
        },
        "language": {
          "type": "string",
          "description": "User's preferred language."
        },
        "friends": {
          "type": "array",
          "description": "List of user IDs of the user's friends.",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "blockedUsers": {
          "type": "array",
          "description": "List of user IDs that this user has blocked.",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "subscribedOfficialAccounts": {
          "type": "array",
          "description": "List of Official Account IDs subscribed to by the user",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "required": [
        "userId",
        "phoneNumber",
        "nickname"
      ]
    },
    "Group": {
      "type": "object",
      "description": "A WeChat group chat.",
      "properties": {
        "groupId": {
          "type": "string",
          "description": "Unique identifier for the group.",
          "format": "uuid"
        },
        "groupName": {
          "type": "string",
          "description": "Name of the group."
        },
        "ownerId": {
          "type": "string",
          "description": "User ID of the group owner.",
          "format": "uuid"
        },
        "members": {
          "type": "array",
          "description": "List of user IDs of group members.",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the group was created.",
          "format": "date-time"
        },
        "announcement": {
          "type": "string",
          "description": "Current group announcement."
        }
      },
      "required": [
        "groupId",
        "groupName",
        "ownerId",
        "members"
      ]
    },
    "Moment": {
      "type": "object",
      "description": "A post on WeChat Moments.",
      "properties": {
        "momentId": {
          "type": "string",
          "description": "Unique identifier for the moment.",
          "format": "uuid"
        },
        "userId": {
          "type": "string",
          "description": "User ID of the moment's author.",
          "format": "uuid"
        },
        "content": {
          "type": "string",
          "description": "Text content of the moment."
        },
        "media": {
          "type": "array",
          "description": "List of media attached to the moment.",
          "items": {
            "$ref": "#/definitions/Media"
          }
        },
        "location": {
          "type": "object",
          "description": "Location information of the moment.",
          "properties": {
            "latitude": {
              "type": "number",
              "format": "float"
            },
            "longitude": {
              "type": "number",
              "format": "float"
            },
            "name": {
              "type": "string",
              "description": "Name of location"
            }
          }
        },
        "visibility": {
          "type": "string",
          "description": "Visibility setting of the moment",
          "enum": [
            "public",
            "private",
            "specificContacts",
            "excludeContacts"
          ]
        },
        "specificContacts": {
          "type": "array",
          "description": "If visibility is set to specificContacts, this lists the allowed userIds",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "excludeContacts": {
          "type": "array",
          "description": "If visibility is set to excludeContacts, this lists the disallowed userIds",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "likes": {
          "type": "array",
          "description": "List of user IDs who liked the moment.",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "comments": {
          "type": "array",
          "description": "List of comments on the moment.",
          "items": {
            "$ref": "#/definitions/Comment"
          }
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of when the moment was posted.",
          "format": "date-time"
        }
      },
      "required": [
        "momentId",
        "userId",
        "timestamp"
      ]
    },
    "Comment": {
      "type": "object",
      "description": "A comment on a Moment.",
      "properties": {
        "commentId": {
          "type": "string",
          "description": "Unique identifier for the comment.",
          "format": "uuid"
        },
        "userId": {
          "type": "string",
          "description": "User ID of the commenter.",
          "format": "uuid"
        },
        "content": {
          "type": "string",
          "description": "Text content of the comment."
        },
        "replyToCommentId": {
          "type": "string",
          "description": "If replying to another comment, the ID of that comment, otherwise null.",
          "format": "uuid"
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of when the comment was posted.",
          "format": "date-time"
        }
      },
      "required": [
        "commentId",
        "userId",
        "content",
        "timestamp"
      ]
    },
    "Media": {
      "type": "object",
      "description": "Media attached to a moment or message.",
      "properties": {
        "mediaId": {
          "type": "string",
          "description": "Unique identifier of the media file on the server.",
          "format": "uuid"
        },
        "type": {
          "type": "string",
          "enum": [
            "image",
            "video",
            "audio"
          ]
        },
        "url": {
          "type": "string",
          "description": "URL to the media file.",
          "format": "URL"
        },
        "thumbnailUrl": {
          "type": "string",
          "description": "URL to a thumbnail for image and video types",
          "format": "URL"
        },
        "duration": {
          "type": "integer",
          "description": "Duration of audio or video in seconds"
        }
      },
      "required": [
        "mediaId",
        "type",
        "url"
      ]
    },
    "OfficialAccount": {
      "type": "object",
      "description": "An official account on WeChat.",
      "properties": {
        "accountId": {
          "type": "string",
          "description": "Unique identifier for the official account.",
          "format": "uuid"
        },
        "name": {
          "type": "string",
          "description": "Name of the official account."
        },
        "description": {
          "type": "string",
          "description": "Description of the official account."
        },
        "avatarUrl": {
          "type": "string",
          "description": "URL to the official account's profile picture.",
          "format": "URL"
        },
        "ownerId": {
          "type": "string",
          "description": "UserId of the owner or admin of the Official Account",
          "format": "uuid"
        },
        "followersCount": {
          "type": "integer",
          "description": "Number of followers."
        },
        "articles": {
          "type": "array",
          "description": "List of articles published by the official account.",
          "items": {
            "$ref": "#/definitions/Article"
          }
        },
        "menu": {
          "type": "array",
          "description": "Custom menu configuration for the Official Account",
          "items": {
            "$ref": "#/definitions/OfficialAccountMenuEntry"
          }
        }
      },
      "required": [
        "accountId",
        "name"
      ]
    },
    "OfficialAccountMenuEntry": {
      "type": "object",
      "description": "Entry in an Official Account menu",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "click",
            "view",
            "miniprogram"
          ],
          "description": "Type of action this menu entry performs"
        },
        "name": {
          "type": "string",
          "description": "Name displayed on the menu button"
        },
        "key": {
          "type": "string",
          "description": "Key to identify this action, for 'click' type"
        },
        "url": {
          "type": "string",
          "format": "URL",
          "description": "URL to open, for 'view' type"
        },
        "appid": {
          "type": "string",
          "description": "AppId of mini program to open, for 'miniprogram' type"
        },
        "pagepath": {
          "type": "string",
          "description": "Path within the mini program to open"
        }
      },
      "required": [
        "type",
        "name"
      ]
    },
    "Article": {
      "type": "object",
      "description": "An article published by an official account.",
      "properties": {
        "articleId": {
          "type": "string",
          "description": "Unique identifier for the article."
        },
        "title": {
          "type": "string",
          "description": "Title of the article."
        },
        "content": {
          "type": "string",
          "description": "Content of the article (can be HTML)."
        },
        "author": {
          "type": "string",
          "description": "Author of the article."
        },
        "publishDate": {
          "type": "string",
          "description": "Date the article was published.",
          "format": "date-time"
        },
        "coverImageUrl": {
          "type": "string",
          "format": "URL",
          "description": "URL to the cover image of the article"
        },
        "readCount": {
          "type": "integer",
          "description": "Number of times the article has been read."
        },
        "likeCount": {
          "type": "integer",
          "description": "Number of likes the article has received."
        }
      },
      "required": [
        "articleId",
        "title",
        "content",
        "publishDate"
      ]
    },
    "MiniProgram": {
      "type": "object",
      "description": "A WeChat Mini Program.",
      "properties": {
        "appId": {
          "type": "string",
          "description": "Unique identifier (AppID) of the Mini Program."
        },
        "name": {
          "type": "string",
          "description": "Name of the Mini Program."
        },
        "description": {
          "type": "string",
          "description": "Description of the Mini Program."
        },
        "iconUrl": {
          "type": "string",
          "description": "URL to the Mini Program's icon.",
          "format": "URL"
        },
        "developerId": {
          "type": "string",
          "description": "User ID of the Mini Program developer."
        },
        "version": {
          "type": "string",
          "description": "Version of the Mini Program."
        },
        "categories": {
          "type": "array",
          "description": "Categories that the Mini Program belongs to.",
          "items": {
            "type": "string"
          }
        },
        "pages": {
          "type": "array",
          "description": "List of paths to pages within the Mini Program",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "appId",
        "name"
      ]
    },
    "PaymentTransaction": {
      "type": "object",
      "description": "A WeChat Pay transaction.",
      "properties": {
        "transactionId": {
          "type": "string",
          "description": "Unique identifier for the transaction.",
          "format": "uuid"
        },
        "payerUserId": {
          "type": "string",
          "description": "User ID of the payer.",
          "format": "uuid"
        },
        "payeeUserId": {
          "type": "string",
          "description": "User ID of the payee (can be a user or merchant).",
          "format": "uuid"
        },
        "amount": {
          "type": "number",
          "description": "Transaction amount (in the smallest currency unit, e.g., cents for CNY).",
          "format": "float"
        },
        "currency": {
          "type": "string",
          "description": "Currency code (e.g., CNY).",
          "default": "CNY"
        },
        "description": {
          "type": "string",
          "description": "Description of the transaction."
        },
        "status": {
          "type": "string",
          "enum": [
            "pending",
            "successful",
            "failed",
            "refunded"
          ]
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of the transaction.",
          "format": "date-time"
        }
      },
      "required": [
        "transactionId",
        "payerUserId",
        "payeeUserId",
        "amount",
        "timestamp"
      ]
    },
    "Message": {
      "type": "object",
      "description": "A message sent in a private or group chat.",
      "properties": {
        "messageId": {
          "type": "string",
          "description": "Unique identifier for the message.",
          "format": "uuid"
        },
        "senderId": {
          "type": "string",
          "description": "User ID of the sender.",
          "format": "uuid"
        },
        "receiverId": {
          "type": "string",
          "description": "User ID of the receiver (for private chat) or Group ID (for group chat).",
          "format": "uuid"
        },
        "type": {
          "type": "string",
          "enum": [
            "text",
            "image",
            "voice",
            "video",
            "file",
            "location",
            "sticker",
            "system",
            "red_packet"
          ]
        },
        "content": {
          "type": "string",
          "description": "Text content of the message (if applicable)."
        },
        "media": {
          "$ref": "#/definitions/Media",
          "description": "Media content of the message (if applicable)."
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of when the message was sent.",
          "format": "date-time"
        },
        "isRead": {
          "type": "boolean",
          "description": "Indicates if the message has been read by the receiver. For group messages, this can be more complex to track individually"
        }
      },
      "required": [
        "messageId",
        "senderId",
        "receiverId",
        "type",
        "timestamp"
      ]
    }
  }
}{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "WhatsApp",
  "description": "JSON Schema for a simplified WhatsApp data model",
  "type": "object",
  "properties": {
    "users": {
      "type": "array",
      "description": "List of WhatsApp users",
      "items": {
        "$ref": "#/definitions/User"
      }
    },
    "groups": {
      "type": "array",
      "description": "List of WhatsApp groups",
      "items": {
        "$ref": "#/definitions/Group"
      }
    },
    "messages": {
      "type": "array",
      "description": "List of all messages sent",
      "items": {
        "$ref": "#/definitions/Message"
      }
    },
    "calls": {
      "type": "array",
      "description": "List of all calls made",
      "items": {
        "$ref": "#/definitions/Call"
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the user"
        },
        "phoneNumber": {
          "type": "string",
          "pattern": "^\\+[1-9]\\d{1,14}$",
          "description": "User's phone number in E.164 format"
        },
        "name": {
          "type": "string",
          "description": "User's display name"
        },
        "status": {
          "type": "string",
          "description": "User's current status message"
        },
        "profilePicture": {
          "type": "string",
          "format": "URL",
          "description": "URL to the user's profile picture"
        },
        "lastSeen": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of when the user was last seen online"
        },
        "about": {
          "type": "string",
          "description": "User's about information"
        },
        "isBlocked": {
          "type": "boolean",
          "description": "Indicates if user is blocked globally"
        },
        "blockedUsers": {
          "type": "array",
          "description": "List of blocked userIds",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "required": [
        "id",
        "phoneNumber"
      ]
    },
    "Group": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the group"
        },
        "name": {
          "type": "string",
          "description": "Group name"
        },
        "description": {
          "type": "string",
          "description": "Group description"
        },
        "groupPicture": {
          "type": "string",
          "format": "URL",
          "description": "URL to the group's picture"
        },
        "members": {
          "type": "array",
          "description": "List of user IDs who are members of the group",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "admins": {
          "type": "array",
          "description": "List of user IDs who are admins of the group",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of when the group was created"
        },
        "createdBy": {
          "type": "string",
          "format": "uuid",
          "description": "User ID of the group creator"
        }
      },
      "required": [
        "id",
        "name",
        "members",
        "createdAt",
        "createdBy"
      ]
    },
    "Message": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the message"
        },
        "senderId": {
          "type": "string",
          "format": "uuid",
          "description": "User ID of the sender"
        },
        "recipientId": {
          "type": "string",
          "format": "uuid",
          "description": "User ID of the recipient (for 1:1 chats)"
        },
        "groupId": {
          "type": "string",
          "format": "uuid",
          "description": "Group ID (for group chats)"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of when the message was sent"
        },
        "content": {
          "type": "object",
          "description": "Content of the message",
          "oneOf": [
            {
              "$ref": "#/definitions/TextMessageContent"
            },
            {
              "$ref": "#/definitions/MediaMessageContent"
            },
            {
              "$ref": "#/definitions/LocationMessageContent"
            },
            {
              "$ref": "#/definitions/ContactMessageContent"
            }
          ]
        },
        "status": {
          "type": "string",
          "enum": [
            "sent",
            "delivered",
            "read",
            "failed"
          ],
          "description": "Message status"
        },
        "replyToMessageId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the message this message is replying to (optional)"
        }
      },
      "required": [
        "id",
        "senderId",
        "timestamp",
        "content",
        "status"
      ],
      "oneOf": [
        {
          "required": ["recipientId"]
        },
        {
          "required": ["groupId"]
        }
      ]
    },
    "TextMessageContent": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["text"],
          "description": "Indicates that this is a text message"
        },
        "text": {
          "type": "string",
          "description": "The text content of the message"
        }
      },
      "required": [
        "type",
        "text"
      ]
    },
    "MediaMessageContent": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "image",
            "video",
            "audio",
            "document"
          ],
          "description": "Type of media"
        },
        "url": {
          "type": "string",
          "format": "URL",
          "description": "URL to the media file"
        },
        "caption": {
          "type": "string",
          "description": "Caption for the media (optional)"
        },
        "mimeType": {
          "type": "string",
          "description": "MIME type of the media"
        },
        "fileSize": {
          "type": "integer",
          "description": "File size in bytes"
        },
        "fileName": {
          "type": "string",
          "description": "Name of the file"
        },
        "duration": {
          "type": "integer",
          "description": "Duration of audio or video in seconds (optional)"
        },
        "width": {
          "type": "integer",
          "description": "Width of the image or video (optional)"
        },
        "height": {
          "type": "integer",
          "description": "Height of the image or video (optional)"
        }
      },
      "required": [
        "type",
        "url",
        "mimeType"
      ]
    },
    "LocationMessageContent": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["location"],
          "description": "Indicates that this is a location message"
        },
        "latitude": {
          "type": "number",
          "format": "double",
          "description": "Latitude of the location"
        },
        "longitude": {
          "type": "number",
          "format": "double",
          "description": "Longitude of the location"
        },
        "name": {
          "type": "string",
          "description": "Name of the location (optional)"
        },
        "address": {
          "type": "string",
          "description": "Address of the location (optional)"
        }
      },
      "required": [
        "type",
        "latitude",
        "longitude"
      ]
    },
    "ContactMessageContent": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["contact"],
          "description": "Indicates that this is a contact message"
        },
        "contacts": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the contact"
              },
              "phones": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties":{
                    "phone": {
                      "type": "string",
                      "description": "Phone number of the contact"
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of phone number i.e. work, home etc."
                    }
                  },
                  "required": [
                    "phone"
                  ]
                }
              }
            },
            "required": [
              "name"
            ]
          }
        }
      },
      "required": [
        "type",
        "contacts"
      ]
    },
    "Call": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the call"
        },
        "callerId": {
          "type": "string",
          "format": "uuid",
          "description": "User ID of the caller"
        },
        "receiverId": {
          "type": "string",
          "format": "uuid",
          "description": "User ID of the receiver"
        },
        "groupId": {
          "type": "string",
          "format": "uuid",
          "description": "Group ID (for group calls)"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of when the call started"
        },
        "duration": {
          "type": "integer",
          "description": "Duration of the call in seconds"
        },
        "type": {
          "type": "string",
          "enum": [
            "audio",
            "video"
          ],
          "description": "Type of call"
        },
        "status": {
          "type": "string",
          "enum": [
            "missed",
            "answered",
            "rejected",
            "ongoing"
          ],
          "description": "Status of the call"
        }
      },
      "required": [
        "id",
        "callerId",
        "timestamp",
        "type",
        "status"
      ],
      "oneOf": [
        {
          "required": ["receiverId"]
        },
        {
          "required": ["groupId"]
        }
      ]
    }
  }
}{
  "type": "object",
  "title": "Wikipedia Article",
  "description": "Schema for a Wikipedia article, focusing on key structural and content elements. This is a simplified representation and does not encompass all the complexities of Wikipedia's internal data model.",
  "properties": {
    "title": {
      "type": "string",
      "description": "The main title of the Wikipedia article.",
      "example": "Artificial Intelligence"
    },
    "id": {
      "type": "integer",
      "description": "Unique identifier for the article (page ID on Wikipedia).",
      "example": 12345
    },
    "revision": {
      "type": "integer",
      "description": "Current revision ID of the article.",
      "example": 987654321
    },
    "language": {
      "type": "string",
      "description": "Language code of the article (e.g., 'en', 'es', 'fr').",
      "example": "en"
    },
    "url": {
      "type": "string",
      "format": "URL",
      "description": "The URL of the article on Wikipedia.",
      "example": "https://en.wikipedia.org/wiki/Artificial_Intelligence"
    },
    "infobox": {
      "type": "object",
      "description": "Structured data typically found in the infobox section.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of infobox (e.g., 'person', 'organization', 'place')."
        },
        "fields": {
          "type": "object",
          "description": "Key-value pairs of data within the infobox.",
          "additionalProperties": {
            "type": ["string", "array"],
            "items": { "type": "string" }
          },
          "example": {
            "born": "1912-06-23",
            "known_for": ["Turing machine", "Turing test"]
          }
        }
      },
      "required": [
        "fields"
      ]
    },
    "sections": {
      "type": "array",
      "description": "Sections of the article's content.",
      "items": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the section.",
            "example": "History"
          },
          "level": {
            "type": "integer",
            "description": "Heading level of the section (1 for top-level, 2 for sub-section, etc.)."
          },
          "content": {
            "type": "string",
            "description": "Text content of the section (may contain wiki markup or basic HTML).",
            "example": "The history of artificial intelligence began in antiquity..."
          },
          "subsections": {
            "type": "array",
            "description": "Nested subsections within this section.",
            "items": {
              "$ref": "#/properties/sections/items"
            }
          }
        },
        "required": [
          "title",
          "level",
          "content"
        ]
      }
    },
    "categories": {
      "type": "array",
      "description": "Categories that the article belongs to.",
      "items": {
        "type": "string",
        "example": "Artificial intelligence"
      }
    },
    "images": {
      "type": "array",
      "description": "List of images used in the article.",
      "items": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "description": "Filename of the image.",
            "example": "Alan Turing.jpg"
          },
          "caption": {
            "type": "string",
            "description": "Caption for the image.",
            "example": "Alan Turing in 1945"
          },
          "url": {
            "type": "string",
            "format": "URL",
            "description": "URL to the image file (can be on Wikimedia Commons).",
            "example": "https://upload.wikimedia.org/wikipedia/commons/a/a1/Alan_Turing_Aged_16.jpg"
          }
        },
        "required": [
          "file"
        ]
      }
    },
    "links": {
      "type": "object",
      "description": "Links to other resources.",
      "properties": {
        "internal": {
          "type": "array",
          "description": "Links to other Wikipedia articles (within the same language).",
          "items": {
            "type": "string",
            "example": "Machine learning"
          }
        },
        "external": {
          "type": "array",
          "description": "Links to external websites.",
          "items": {
            "type": "string",
            "format": "URL",
            "example": "https://www.example.com/ai-resource"
          }
        },
        "interlanguage": {
          "type": "array",
          "description": "Links to the same article in other languages.",
          "items": {
            "type": "object",
            "properties": {
              "language": {
                "type": "string",
                "description": "Language code of the linked article.",
                "example": "es"
              },
              "title": {
                "type": "string",
                "description": "Title of the article in that language.",
                "example": "Inteligencia artificial"
              },
              "url": {
                "type": "string",
                "format": "URL",
                "description": "The URL of the linked article.",
                "example": "https://es.wikipedia.org/wiki/Inteligencia_artificial"
              }
            },
            "required": [
              "language",
              "title"
            ]
          }
        }
      },
      "required": [
        "internal"
      ]
    },
    "references": {
      "type": "array",
      "description": "List of references/citations used in the article.",
      "items": {
        "type": "object",
        "description": "A reference can be anything from a book, journal article, website, etc.",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for this reference (often generated by Wikipedia or provided).",
            "example": "cite_note-1"
          },
          "type": {
            "type": "string",
            "description": "Type of reference (e.g., 'book', 'web', 'journal').",
            "example": "web"
          },
          "content": {
            "type": "string",
            "description": "Formatted text of the reference (can contain citation templates or HTML).",
            "example": "{{cite web |url=https://www.example.com |title=Example Website |author=John Doe |date=2023-10-27}}"
          },
          "details": {
            "type": "object",
            "description": "Detailed fields of the reference (if available from parsed citation templates).",
            "properties": {
              "url": {
                "type": "string",
                "format": "URL"
              },
              "title": {
                "type": "string"
              },
              "author": {
                "type": "string"
              },
              "date": {
                "type": "string",
                "format": "date"
              },
              "publisher": {
                "type": "string"
              },
              "isbn": {
                "type": "string"
              },
              "doi": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "content"
        ]
      }
    },
    "last_modified": {
      "type": "string",
      "format": "date-time",
      "description": "Timestamp of the last modification to the article.",
      "example": "2023-10-27T10:00:00Z"
    }
  },
  "required": [
    "title",
    "id",
    "language",
    "url",
    "sections"
  ]
}{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Twitter/X App",
  "description": "JSON Schema for Elon Musk's envisioned Twitter/X app, encompassing social networking, payments, and more.",
  "type": "object",
  "properties": {
    "users": {
      "type": "array",
      "description": "List of users on the platform",
      "items": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the user"
          },
          "username": {
            "type": "string",
            "description": "User's unique handle (e.g., @elonmusk)",
            "pattern": "^@[a-zA-Z0-9_]{1,15}$"
          },
          "displayName": {
            "type": "string",
            "description": "User's display name"
          },
          "profileImageUrl": {
            "type": "string",
            "format": "URL",
            "description": "URL to the user's profile image"
          },
          "bio": {
            "type": "string",
            "description": "User's profile description",
            "maxLength": 160
          },
          "verified": {
            "type": "boolean",
            "description": "Indicates if the user is verified"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of user account creation"
          },
          "followersCount": {
            "type": "integer",
            "description": "Number of followers"
          },
          "followingCount": {
            "type": "integer",
            "description": "Number of accounts the user follows"
          },
          "wallet": {
            "type": "object",
            "description": "User's digital wallet",
            "properties": {
              "balance": {
                "type": "number",
                "format": "float",
                "description": "Current balance in the wallet"
              },
              "currency": {
                "type": "string",
                "description": "Default currency for the wallet (e.g., USD, X-Coin)",
                "enum": ["USD", "EUR", "JPY", "BTC", "DOGE", "X-COIN"]
              },
              "transactions": {
                "type": "array",
                "description": "List of transactions associated with the wallet",
                "items": {
                  "type": "object",
                  "properties": {
                    "transactionId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Unique identifier for the transaction"
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of transaction (e.g., deposit, withdrawal, payment, tip)",
                      "enum": ["deposit", "withdrawal", "payment", "tip", "transfer"]
                    },
                    "amount": {
                      "type": "number",
                      "format": "float",
                      "description": "Amount of the transaction"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Currency of the transaction"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp of the transaction"
                    },
                    "status": {
                      "type": "string",
                      "description": "Status of the transaction (e.g., pending, completed, failed)",
                      "enum": ["pending", "completed", "failed"]
                    },
                    "sender": {
                      "type": "string",
                      "description": "Sender's user ID or external account identifier (optional)"
                    },
                    "recipient": {
                      "type": "string",
                      "description": "Recipient's user ID or external account identifier (optional)"
                    }
                  },
                  "required": [
                    "transactionId",
                    "type",
                    "amount",
                    "currency",
                    "timestamp",
                    "status"
                  ]
                }
              }
            },
            "required": [
              "balance",
              "currency"
            ]
          },
          "isCreator": {
            "type": "boolean",
            "description": "Indicates whether the user is registered as a creator",
            "default": false
          },
          "subscriptionTier": {
            "type": "string",
            "description": "The creator's subscription tier, if applicable",
            "enum": ["free", "basic", "premium", "gold"],
            "default": "free"
          }
        },
        "required": [
          "userId",
          "username",
          "createdAt"
        ]
      }
    },
    "posts": {
      "type": "array",
      "description": "List of posts (tweets, messages, etc.)",
      "items": {
        "type": "object",
        "properties": {
          "postId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the post"
          },
          "authorId": {
            "type": "string",
            "description": "User ID of the post's author"
          },
          "content": {
            "type": "string",
            "description": "Text content of the post",
            "maxLength": 1000
          },
          "media": {
            "type": "array",
            "description": "List of media attachments (images, videos, etc.)",
            "items": {
              "type": "object",
              "properties": {
                "mediaId": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the media"
                },
                "type": {
                  "type": "string",
                  "description": "Type of media (e.g., image, video)",
                  "enum": ["image", "video"]
                },
                "url": {
                  "type": "string",
                  "format": "URL",
                  "description": "URL to the media content"
                }
              },
              "required": [
                "mediaId",
                "type",
                "url"
              ]
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of post creation"
          },
          "likes": {
            "type": "integer",
            "description": "Number of likes the post has received"
          },
          "reposts": {
            "type": "integer",
            "description": "Number of times the post has been reposted"
          },
          "comments": {
            "type": "array",
            "description": "List of comments on the post",
            "items": {
              "type": "object",
              "properties": {
                "commentId": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the comment"
                },
                "authorId": {
                  "type": "string",
                  "description": "User ID of the comment's author"
                },
                "content": {
                  "type": "string",
                  "description": "Text content of the comment",
                  "maxLength": 500
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Timestamp of comment creation"
                }
              },
              "required": [
                "commentId",
                "authorId",
                "content",
                "createdAt"
              ]
            }
          },
          "inReplyTo": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the post this post is in reply to (optional)"
          },
          "isQuotePost": {
            "type": "boolean",
            "description": "Indicates if the post is a quote post"
          },
          "quotedPostId": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the post being quoted (if isQuotePost is true)"
          },
          "poll": {
            "type": "object",
            "description": "Poll embedded in the post (optional)",
            "properties": {
              "options": {
                "type": "array",
                "description": "List of poll options",
                "items": {
                  "type": "object",
                  "properties": {
                    "optionId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Unique identifier for the option"
                    },
                    "text": {
                      "type": "string",
                      "description": "Text of the poll option",
                      "maxLength": 25
                    },
                    "votes": {
                      "type": "integer",
                      "description": "Number of votes for this option",
                      "default": 0
                    }
                  },
                  "required": [
                    "optionId",
                    "text"
                  ]
                },
                "minItems": 2,
                "maxItems": 4
              },
              "endsAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the poll ends"
              }
            },
            "required": [
              "options",
              "endsAt"
            ]
          }
        },
        "required": [
          "postId",
          "authorId",
          "content",
          "createdAt"
        ]
      }
    },
    "directMessages": {
      "type": "array",
      "description": "List of direct message conversations",
      "items": {
        "type": "object",
        "properties": {
          "conversationId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the conversation"
          },
          "participants": {
            "type": "array",
            "description": "List of participants in the conversation",
            "items": {
              "type": "string",
              "description": "User ID of a participant"
            },
            "minItems": 2
          },
          "messages": {
            "type": "array",
            "description": "List of messages in the conversation",
            "items": {
              "type": "object",
              "properties": {
                "messageId": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for the message"
                },
                "senderId": {
                  "type": "string",
                  "description": "User ID of the message sender"
                },
                "content": {
                  "type": "string",
                  "description": "Text content of the message",
                  "maxLength": 1000
                },
                "media": {
                  "type": "array",
                  "description": "List of media attachments (images, videos, etc.)",
                  "items": {
                    "type": "object",
                    "properties": {
                      "mediaId": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique identifier for the media"
                      },
                      "type": {
                        "type": "string",
                        "description": "Type of media (e.g., image, video)",
                        "enum": ["image", "video"]
                      },
                      "url": {
                        "type": "string",
                        "format": "URL",
                        "description": "URL to the media content"
                      }
                    },
                    "required": [
                      "mediaId",
                      "type",
                      "url"
                    ]
                  }
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Timestamp of message creation"
                }
              },
              "required": [
                "messageId",
                "senderId",
                "content",
                "createdAt"
              ]
            }
          }
        },
        "required": [
          "conversationId",
          "participants",
          "messages"
        ]
      }
    },
    "spaces": {
      "type": "array",
      "description": "List of live audio spaces",
      "items": {
        "type": "object",
        "properties": {
          "spaceId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the space"
          },
          "hostId": {
            "type": "string",
            "description": "User ID of the space host"
          },
          "title": {
            "type": "string",
            "description": "Title of the space",
            "maxLength": 100
          },
          "speakers": {
            "type": "array",
            "description": "List of users who are speaking in the space",
            "items": {
              "type": "string",
              "description": "User ID of a speaker"
            }
          },
          "listeners": {
            "type": "array",
            "description": "List of users who are listening to the space",
            "items": {
              "type": "string",
              "description": "User ID of a listener"
            }
          },
          "state": {
            "type": "string",
            "description": "Current state of the space (e.g., live, scheduled, ended)",
            "enum": ["live", "scheduled", "ended"]
          },
          "startedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the space started"
          },
          "scheduledStart": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the space is scheduled to start (if state is scheduled)"
          },
          "endedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the space ended (if state is ended)"
          }
        },
        "required": [
          "spaceId",
          "hostId",
          "title",
          "state"
        ]
      }
    },
    "communities": {
      "type": "array",
      "description": "List of communities",
      "items": {
        "type": "object",
        "properties": {
          "communityId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the community"
          },
          "name": {
            "type": "string",
            "description": "Name of the community",
            "maxLength": 50
          },
          "description": {
            "type": "string",
            "description": "Description of the community",
            "maxLength": 200
          },
          "members": {
            "type": "array",
            "description": "List of members in the community",
            "items": {
              "type": "string",
              "description": "User ID of a member"
            }
          },
          "admins": {
            "type": "array",
            "description": "List of administrators in the community",
            "items": {
              "type": "string",
              "description": "User ID of an administrator"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of community creation"
          },
          "isPublic": {
            "type": "boolean",
            "description": "Indicates if the community is public or private"
          }
        },
        "required": [
          "communityId",
          "name",
          "description",
          "members",
          "createdAt",
          "isPublic"
        ]
      }
    },
    "trends": {
      "type": "array",
      "description": "List of trending topics",
      "items": {
        "type": "object",
        "properties": {
          "trend": {
            "type": "string",
            "description": "The trending topic"
          },
          "volume": {
            "type": "integer",
            "description": "Approximate number of posts related to the trend"
          }
        },
        "required": [
          "trend",
          "volume"
        ]
      }
    },
    "payments": {
      "type": "array",
      "description": "List of payment methods",
      "items": {
        "type": "object",
        "properties": {
          "methodId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the payment method"
          },
          "userId": {
            "type": "string",
            "description": "User ID that the payment method is linked to"
          },
          "type": {
            "type": "string",
            "description": "Type of payment method (e.g., credit_card, bank_account, crypto_wallet)",
            "enum": [
              "credit_card",
              "bank_account",
              "crypto_wallet"
            ]
          },
          "details": {
            "type": "object",
            "description": "Details specific to the payment method type",
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "brand": {
                    "type": "string",
                    "description": "Card brand (e.g., Visa, Mastercard)",
                    "enum": ["Visa", "Mastercard", "Amex", "Discover"]
                  },
                  "last4": {
                    "type": "string",
                    "description": "Last 4 digits of the card number",
                    "pattern": "^[0-9]{4}$"
                  },
                  "expMonth": {
                    "type": "integer",
                    "description": "Expiration month",
                    "minimum": 1,
                    "maximum": 12
                  },
                  "expYear": {
                    "type": "integer",
                    "description": "Expiration year",
                    "minimum": 2023
                  }
                },
                "required": [
                  "brand",
                  "last4",
                  "expMonth",
                  "expYear"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "bankName": {
                    "type": "string",
                    "description": "Name of the bank"
                  },
                  "accountType": {
                    "type": "string",
                    "description": "Type of bank account (e.g., checking, savings)",
                    "enum": ["checking", "savings"]
                  },
                  "routingNumber": {
                    "type": "string",
                    "description": "Bank routing number"
                  },
                  "last4": {
                    "type": "string",
                    "description": "Last 4 digits of the account number"
                  }
                },
                "required": [
                  "bankName",
                  "accountType",
                  "routingNumber",
                  "last4"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "cryptoType": {
                    "type": "string",
                    "description": "Type of cryptocurrency (e.g., BTC, ETH, DOGE)",
                    "enum": ["BTC", "ETH", "DOGE", "X-COIN"]
                  },
                  "walletAddress": {
                    "type": "string",
                    "description": "Public address of the crypto wallet"
                  }
                },
                "required": [
                  "cryptoType",
                  "walletAddress"
                ]
              }
            ]
          },
          "isDefault": {
            "type": "boolean",
            "description": "Indicates if this is the user's default payment method",
            "default": false
          }
        },
        "required": [
          "methodId",
          "userId",
          "type",
          "details"
        ]
      }
    },
    "subscriptions": {
      "type": "array",
      "description": "List of user subscriptions",
      "items": {
        "type": "object",
        "properties": {
          "subscriberId": {
            "type": "string",
            "description": "User ID of the subscriber"
          },
          "creatorId": {
            "type": "string",
            "description": "User ID of the creator being subscribed to"
          },
          "tier": {
            "type": "string",
            "description": "Subscription tier",
            "enum": ["basic", "premium", "gold"]
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Start date of the subscription"
          },
          "renewalDate": {
            "type": "string",
            "format": "date-time",
            "description": "Next renewal date of the subscription"
          },
          "status": {
            "type": "string",
            "description": "Status of the subscription",
            "enum": ["active", "canceled", "expired"]
          }
        },
        "required": [
          "subscriberId",
          "creatorId",
          "tier",
          "startDate",
          "renewalDate",
          "status"
        ]
      }
    },
    "commerce": {
      "type": "object",
      "description": "E-commerce functionalities",
      "properties": {
        "products": {
          "type": "array",
          "description": "List of products for sale",
          "items": {
            "type": "object",
            "properties": {
              "productId": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the product"
              },
              "sellerId": {
                "type": "string",
                "description": "User ID of the seller"
              },
              "name": {
                "type": "string",
                "description": "Name of the product",
                "maxLength": 100
              },
              "description": {
                "type": "string",
                "description": "Description of the product",
                "maxLength": 500
              },
              "price": {
                "type": "number",
                "format": "float",
                "description": "Price of the product"
              },
              "currency": {
                "type": "string",
                "description": "Currency of the price",
                "enum": ["USD", "EUR", "JPY", "BTC", "DOGE", "X-COIN"]
              },
              "images": {
                "type": "array",
                "description": "List of product images",
                "items": {
                  "type": "string",
                  "format": "URL",
                  "description": "URL to a product image"
                }
              },
              "stock": {
                "type": "integer",
                "description": "Available stock of the product",
                "minimum": 0
              },
              "category": {
                "type": "string",
                "description": "Category of the product (e.g., electronics, fashion, books)",
                "enum": ["electronics", "fashion", "books", "home", "beauty", "other"]
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the product was added"
              }
            },
            "required": [
              "productId",
              "sellerId",
              "name",
              "description",
              "price",
              "currency",
              "stock"
            ]
          }
        },
        "orders": {
          "type": "array",
          "description": "List of orders placed",
          "items": {
            "type": "object",
            "properties": {
              "orderId": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the order"
              },
              "buyerId": {
                "type": "string",
                "description": "User ID of the buyer"
              },
              "items": {
                "type": "array",
                "description": "List of items in the order",
                "items": {
                  "type": "object",
                  "properties": {
                    "productId": {
                      "type": "string",
                      "description": "ID of the product"
                    },
                    "quantity": {
                      "type": "integer",
                      "description": "Quantity of the product ordered",
                      "minimum": 1
                    },
                    "price": {
                      "type": "number",
                      "format": "float",
                      "description": "Price per item at the time of order"
                    }
                  },
                  "required": [
                    "productId",
                    "quantity",
                    "price"
                  ]
                }
              },
              "totalAmount": {
                "type": "number",
                "format": "float",
                "description": "Total amount of the order"
              },
              "currency": {
                "type": "string",
                "description": "Currency of the order total"
              },
              "orderDate": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the order was placed"
              },
              "status": {
                "type": "string",
                "description": "Status of the order (e.g., pending, processing, shipped, delivered, canceled)",
                "enum": [
                  "pending",
                  "processing",
                  "shipped",
                  "delivered",
                  "canceled"
                ]
              },
              "shippingAddress": {
                "type": "object",
                "description": "Shipping address for the order",
                "properties": {
                  "street": {
                    "type": "string",
                    "description": "Street address"
                  },
                  "city": {
                    "type": "string",
                    "description": "City"
                  },
                  "state": {
                    "type": "string",
                    "description": "State or province"
                  },
                  "zipCode": {
                    "type": "string",
                    "description": "ZIP or postal code"
                  },
                  "country": {
                    "type": "string",
                    "description": "Country"
                  }
                },
                "required": [
                  "street",
                  "city",
                  "state",
                  "zipCode",
                  "country"
                ]
              }
            },
            "required": [
              "orderId",
              "buyerId",
              "items",
              "totalAmount",
              "currency",
              "orderDate",
              "status"
            ]
          }
        }
      }
    },
    "settings": {
      "type": "object",
      "description": "Application settings",
      "properties": {
        "defaultCurrency": {
          "type": "string",
          "description": "Default currency for the application",
          "enum": ["USD", "EUR", "JPY", "BTC", "DOGE", "X-COIN"]
        },
        "supportedCurrencies": {
          "type": "array",
          "description": "List of supported currencies",
          "items": {
            "type": "string",
            "enum": ["USD", "EUR", "JPY", "BTC", "DOGE", "X-COIN"]
          }
        },
        "contentModeration": {
          "type": "object",
          "description": "Content moderation settings",
          "properties": {
            "enabled": {
              "type": "boolean",
              "description": "Indicates if content moderation is enabled"
            },
            "rules": {
              "type": "array",
              "description": "List of content moderation rules",
              "items": {
                "type": "string",
                "description": "A content moderation rule (e.g., no hate speech, no spam)"
              }
            }
          },
          "required": [
            "enabled"
          ]
        },
        "algorithm": {
          "type": "object",
          "description": "Algorithm settings",
          "properties": {
            "timeline": {
              "type": "string",
              "description": "Algorithm used for the main timeline",
              "enum": ["chronological", "algorithmic"],
              "default": "algorithmic"
            },
            "recommendations": {
              "type": "string",
              "description": "Algorithm used for content recommendations",
              "enum": ["collaborative", "content-based", "hybrid"]
            }
          },
          "required": [
            "timeline",
            "recommendations"
          ]
        },
        "creatorMonetization": {
          "type": "object",
          "description": "Creator Monetization Settings",
          "properties": {
            "tipsEnabled": {
              "type": "boolean",
              "description": "Whether tipping is globally enabled",
              "default": true
            },
            "subscriptionsEnabled": {
              "type": "boolean",
              "description": "Whether subscriptions are globally enabled",
              "default": true
            },
            "platformFee": {
              "type": "number",
              "description": "Percentage fee the platform takes on creator earnings",
              "minimum": 0,
              "maximum": 1,
              "default": 0.1
            }
          }
        }
      }
    }
  },
  "required": [
    "users",
    "posts"
  ]
}{
  "title": "YouTube Schema",
  "description": "A JSON Schema representing core YouTube entities and their relationships.",
  "type": "object",
  "properties": {
    "videos": {
      "type": "array",
      "description": "A list of YouTube videos.",
      "items": {
        "$ref": "#/definitions/video"
      }
    },
    "channels": {
      "type": "array",
      "description": "A list of YouTube channels.",
      "items": {
        "$ref": "#/definitions/channel"
      }
    },
    "playlists": {
      "type": "array",
      "description": "A list of YouTube playlists.",
      "items": {
        "$ref": "#/definitions/playlist"
      }
    },
    "users": {
      "type": "array",
      "description": "A list of YouTube users (viewers, not necessarily creators).",
      "items": {
        "$ref": "#/definitions/user"
      }
    },
    "comments": {
      "type": "array",
      "description": "A list of YouTube comments.",
      "items": {
        "$ref": "#/definitions/comment"
      }
    }
  },
  "definitions": {
    "video": {
      "type": "object",
      "description": "Represents a YouTube video.",
      "properties": {
        "videoId": {
          "type": "string",
          "description": "Unique identifier for the video.",
          "example": "dQw4w9WgXcQ"
        },
        "title": {
          "type": "string",
          "description": "Title of the video.",
          "example": "Rick Astley - Never Gonna Give You Up (Official Music Video)"
        },
        "description": {
          "type": "string",
          "description": "Description of the video.",
          "example": "The official video for “Never Gonna Give You Up” by Rick Astley"
        },
        "channelId": {
          "type": "string",
          "description": "ID of the channel that uploaded the video.",
          "example": "UCuAXFkgsw1L7xaCfnd5JJOw"
        },
        "publishedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the video was published.",
          "example": "2009-10-25T06:57:33Z"
        },
        "thumbnails": {
          "type": "object",
          "description": "Different sizes of thumbnails for the video.",
          "properties": {
            "default": { "$ref": "#/definitions/thumbnail" },
            "medium": { "$ref": "#/definitions/thumbnail" },
            "high": { "$ref": "#/definitions/thumbnail" },
            "standard": { "$ref": "#/definitions/thumbnail" },
            "maxres": { "$ref": "#/definitions/thumbnail" }
          },
          "additionalProperties": false
        },
        "duration": {
          "type": "string",
          "description": "Duration of the video in ISO 8601 format.",
          "example": "PT3M33S"
        },
        "viewCount": {
          "type": "integer",
          "description": "Number of views the video has received.",
          "example": 1400000000
        },
        "likeCount": {
          "type": "integer",
          "description": "Number of likes the video has received.",
          "example": 15000000
        },
        "dislikeCount": {
          "type": "integer",
          "description": "Number of dislikes the video has received. (Note: No longer publicly available via the API)",
          "example": 200000
        },
        "commentCount": {
          "type": "integer",
          "description": "Number of comments on the video.",
          "example": 600000
        },
        "tags": {
          "type": "array",
          "description": "Tags associated with the video.",
          "items": {
            "type": "string",
            "example": "music"
          }
        },
        "category": {
          "type": "string",
          "description": "Category of the video.",
          "example": "Music"
        },
        "liveStreamingDetails": {
          "type": "object",
          "description": "Details about a live stream, if applicable.",
          "properties": {
            "actualStartTime": {
              "type": "string",
              "format": "date-time",
              "description": "Actual start time of the live stream."
            },
            "actualEndTime": {
              "type": "string",
              "format": "date-time",
              "description": "Actual end time of the live stream."
            },
            "scheduledStartTime": {
              "type": "string",
              "format": "date-time",
              "description": "Scheduled start time of the live stream."
            },
            "scheduledEndTime": {
              "type": "string",
              "format": "date-time",
              "description": "Scheduled end time of the live stream."
            },
            "concurrentViewers": {
              "type": "integer",
              "description": "Number of concurrent viewers during the live stream."
            }
          },
          "additionalProperties": false
        }
      },
      "required": [
        "videoId",
        "title",
        "channelId",
        "publishedAt",
        "thumbnails",
        "duration"
      ],
      "additionalProperties": false
    },
    "channel": {
      "type": "object",
      "description": "Represents a YouTube channel.",
      "properties": {
        "channelId": {
          "type": "string",
          "description": "Unique identifier for the channel.",
          "example": "UCuAXFkgsw1L7xaCfnd5JJOw"
        },
        "channelName": {
          "type": "string",
          "description": "Name of the channel.",
          "example": "Rick Astley"
        },
        "description": {
          "type": "string",
          "description": "Description of the channel."
        },
        "publishedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the channel was created."
        },
        "thumbnails": {
          "type": "object",
          "description": "Different sizes of thumbnails for the channel.",
          "properties": {
            "default": { "$ref": "#/definitions/thumbnail" },
            "medium": { "$ref": "#/definitions/thumbnail" },
            "high": { "$ref": "#/definitions/thumbnail" }
          },
          "additionalProperties": false
        },
        "subscriberCount": {
          "type": "integer",
          "description": "Number of subscribers to the channel. (Note: May be hidden or rounded by the channel owner)",
          "example": 9000000
        },
        "videoCount": {
          "type": "integer",
          "description": "Number of public videos uploaded by the channel.",
          "example": 200
        },
        "viewCount": {
          "type": "integer",
          "description": "Total number of views across all public videos on the channel.",
          "example": 2500000000
        },
        "customUrl": {
          "type": "string",
          "description": "Custom URL for the channel, if set.",
          "example": "@RickAstley"
        },
        "country": {
          "type": "string",
          "description": "Country associated with the channel.",
          "example": "GB"
        }
      },
      "required": [
        "channelId",
        "channelName"
      ],
      "additionalProperties": false
    },
    "playlist": {
      "type": "object",
      "description": "Represents a YouTube playlist.",
      "properties": {
        "playlistId": {
          "type": "string",
          "description": "Unique identifier for the playlist.",
          "example": "PL1234567890abcdef"
        },
        "title": {
          "type": "string",
          "description": "Title of the playlist.",
          "example": "My Favorite Songs"
        },
        "description": {
          "type": "string",
          "description": "Description of the playlist."
        },
        "channelId": {
          "type": "string",
          "description": "ID of the channel that created the playlist."
        },
        "publishedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the playlist was created."
        },
        "thumbnails": {
          "type": "object",
          "description": "Different sizes of thumbnails for the playlist.",
          "properties": {
            "default": { "$ref": "#/definitions/thumbnail" },
            "medium": { "$ref": "#/definitions/thumbnail" },
            "high": { "$ref": "#/definitions/thumbnail" },
            "standard": { "$ref": "#/definitions/thumbnail" },
            "maxres": { "$ref": "#/definitions/thumbnail" }
          },
          "additionalProperties": false
        },
        "videoIds": {
          "type": "array",
          "description": "List of video IDs contained in the playlist.",
          "items": {
            "type": "string"
          }
        },
        "videoCount": {
          "type": "integer",
          "description": "Number of videos in the playlist."
        }
      },
      "required": [
        "playlistId",
        "title",
        "channelId"
      ],
      "additionalProperties": false
    },
    "user": {
      "type": "object",
      "description": "Represents a YouTube user (viewer).",
      "properties": {
        "userId": {
          "type": "string",
          "description": "Unique identifier for the user (often same as channel ID, but not necessarily)."
        },
        "userName": {
          "type": "string",
          "description": "Public name of the user."
        }
        // Add more properties for user interaction if needed, such as:
        // - subscribedChannels
        // - likedVideos
        // - watchHistory
        // - etc. (These properties often require authentication)
      },
      "required": [
        "userId"
      ],
      "additionalProperties": false
    },
    "comment": {
      "type": "object",
      "description": "Represents a comment on a YouTube video or channel.",
      "properties": {
        "commentId": {
          "type": "string",
          "description": "Unique identifier for the comment."
        },
        "videoId": {
          "type": "string",
          "description": "ID of the video the comment is on (if applicable)."
        },
        "channelId": {
          "type": "string",
          "description": "ID of the channel the comment is on (if applicable)."
        },
        "parentId": {
          "type": "string",
          "description": "ID of the parent comment, if this is a reply."
        },
        "authorChannelId": {
          "type": "string",
          "description": "ID of the channel that posted the comment."
        },
        "authorDisplayName": {
          "type": "string",
          "description": "Display name of the author of the comment."
        },
        "textOriginal": {
          "type": "string",
          "description": "The comment text (original, unformatted)."
        },
        "textDisplay": {
          "type": "string",
          "description": "The comment text (may contain formatting like bold, italics, etc.)."
        },
        "likeCount": {
          "type": "integer",
          "description": "Number of likes the comment has received."
        },
        "publishedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the comment was published."
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the comment was last updated (if edited)."
        }
      },
      "required": [
        "commentId",
        "authorChannelId",
        "textOriginal",
        "publishedAt"
      ],
      "additionalProperties": false
    },
    "thumbnail": {
      "type": "object",
      "description": "Represents a thumbnail image.",
      "properties": {
        "url": {
          "type": "string",
          "format": "URL",
          "description": "URL of the thumbnail image.",
          "example": "https://i.ytimg.com/vi/dQw4w9WgXcQ/default.jpg"
        },
        "width": {
          "type": "integer",
          "description": "Width of the thumbnail image in pixels."
        },
        "height": {
          "type": "integer",
          "description": "Height of the thumbnail image in pixels."
        }
      },
      "required": [
        "url"
      ],
      "additionalProperties": false
    }
  }
}{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Zillow App Data",
  "description": "JSON Schema for data used in a Zillow-like real estate application.",
  "type": "object",
  "properties": {
    "listings": {
      "type": "array",
      "description": "An array of property listings.",
      "items": {
        "$ref": "#/definitions/propertyListing"
      }
    },
    "savedSearches": {
      "type": "array",
      "description": "An array of user-saved search criteria.",
      "items": {
        "$ref": "#/definitions/savedSearch"
      }
    },
    "userProfile": {
      "$ref": "#/definitions/userProfile"
    },
    "agents": {
      "type": "array",
      "description": "List of real estate agents",
      "items": {
        "$ref": "#/definitions/agent"
      }
    }
  },
  "definitions": {
    "propertyListing": {
      "type": "object",
      "description": "Details of a single property listing.",
      "properties": {
        "zpid": {
          "type": "string",
          "description": "Zillow Property ID (unique identifier).",
          "example": "12345678"
        },
        "address": {
          "$ref": "#/definitions/address"
        },
        "price": {
          "type": "number",
          "format": "float",
          "description": "Listing price.",
          "example": 350000.00
        },
        "bedrooms": {
          "type": "integer",
          "description": "Number of bedrooms.",
          "example": 3
        },
        "bathrooms": {
          "type": "number",
          "format": "float",
          "description": "Number of bathrooms.",
          "example": 2.5
        },
        "livingArea": {
          "type": "integer",
          "description": "Living area in square feet.",
          "example": 1800
        },
        "lotSize": {
          "type": "integer",
          "description": "Lot size in square feet (optional).",
          "example": 5000
        },
        "yearBuilt": {
          "type": "integer",
          "description": "Year the property was built.",
          "example": 1995
        },
        "propertyType": {
          "type": "string",
          "description": "Type of property (e.g., Single Family, Condo, Townhouse).",
          "enum": [
            "Single Family",
            "Condo",
            "Townhouse",
            "Multi-Family",
            "Land",
            "Manufactured",
            "Other"
          ]
        },
        "listingStatus": {
          "type": "string",
          "description": "Status of the listing (e.g., For Sale, Pending, Sold).",
          "enum": ["For Sale", "Pending", "Sold", "For Rent", "Recently Sold"]
        },
        "photos": {
          "type": "array",
          "description": "Array of URLs to property photos.",
          "items": {
            "type": "string",
            "format": "URL",
            "example": "https://photos.zillow.com/image1.jpg"
          }
        },
        "description": {
          "type": "string",
          "description": "Text description of the property.",
          "example": "Beautiful home in a quiet neighborhood..."
        },
        "homeFacts": {
          "type": "object",
          "description": "Additional home facts, can be extended as needed.",
          "properties": {
            "cooling": {
              "type": "string",
              "example": "Central Air"
            },
            "heating": {
              "type": "string",
              "example": "Forced Air"
            },
            "parking": {
              "type": "string",
              "example": "Garage - Attached, 2 spaces"
            },
            "hoaFee": {
              "type": "number",
              "description": "HOA fee (optional)",
              "example": 150.00
            }
          }
        },
        "zestimate": {
          "type": "number",
          "format": "float",
          "description": "Zillow's estimated market value (optional).",
          "example": 365000.00
        },
        "daysOnZillow": {
          "type": "integer",
          "description": "Number of days the property has been listed on Zillow.",
          "example": 15
        },
        "url": {
          "type": "string",
          "format": "URL",
          "description": "URL to the property's page on Zillow.",
          "example": "https://www.zillow.com/homedetails/123-Main-St-Anytown-CA-91234/12345678_zpid/"
        },
        "listingAgent": {
          "type": "string",
          "description": "ID of the listing agent.",
          "example": "agent-123"
        }
      },
      "required": [
        "zpid",
        "address",
        "price",
        "bedrooms",
        "bathrooms",
        "livingArea",
        "propertyType",
        "listingStatus"
      ]
    },
    "address": {
      "type": "object",
      "description": "Address details.",
      "properties": {
        "streetAddress": {
          "type": "string",
          "description": "Street address.",
          "example": "123 Main St"
        },
        "unitNumber": {
          "type": "string",
          "description": "Apartment or unit number (optional).",
          "example": "Apt 4B"
        },
        "city": {
          "type": "string",
          "description": "City.",
          "example": "Anytown"
        },
        "state": {
          "type": "string",
          "description": "State (2-letter abbreviation).",
          "example": "CA"
        },
        "zipCode": {
          "type": "string",
          "description": "ZIP code.",
          "example": "91234"
        },
        "latitude": {
          "type": "number",
          "format": "float",
          "description": "Latitude of the address location.",
          "example": 34.052235
        },
        "longitude": {
          "type": "number",
          "format": "float",
          "description": "Longitude of the address location.",
          "example": -118.243683
        }
      },
      "required": [
        "streetAddress",
        "city",
        "state",
        "zipCode",
        "latitude",
        "longitude"
      ]
    },
    "savedSearch": {
      "type": "object",
      "description": "User's saved search criteria.",
      "properties": {
        "searchId": {
          "type": "string",
          "description": "Unique identifier for the saved search.",
          "example": "search-123"
        },
        "name": {
          "type": "string",
          "description": "User-defined name for the search (optional).",
          "example": "My Dream Home Search"
        },
        "location": {
          "type": "object",
          "description": "Geographic area for the search.",
          "properties": {
            "city": {
              "type": "string",
              "example": "San Francisco"
            },
            "state": {
              "type": "string",
              "example": "CA"
            },
            "zipCode": {
              "type": "string",
              "example": "94105"
            },
            "bounds": {
              "type": "object",
              "description": "Geographic bounds of the search area.",
              "properties": {
                "north": {
                  "type": "number",
                  "format": "float",
                  "example": 34.1
                },
                "east": {
                  "type": "number",
                  "format": "float",
                  "example": -118.2
                },
                "south": {
                  "type": "number",
                  "format": "float",
                  "example": 34.0
                },
                "west": {
                  "type": "number",
                  "format": "float",
                  "example": -118.3
                }
              }
            }
          }
        },
        "minPrice": {
          "type": "integer",
          "example": 200000
        },
        "maxPrice": {
          "type": "integer",
          "example": 500000
        },
        "minBedrooms": {
          "type": "integer",
          "example": 2
        },
        "minBathrooms": {
          "type": "number",
          "format": "float",
          "example": 1.5
        },
        "propertyTypes": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Single Family",
              "Condo",
              "Townhouse",
              "Multi-Family",
              "Land",
              "Manufactured",
              "Other"
            ]
          }
        },
        "keywords": {
          "type": "array",
          "description": "List of keywords to filter search results (e.g., 'pool', 'garage').",
          "items": {
            "type": "string"
          },
          "example": ["pool", "garage", "hardwood floors"]
        }
      },
      "required": ["searchId"]
    },
    "userProfile": {
      "type": "object",
      "description": "User profile information.",
      "properties": {
        "userId": {
          "type": "string",
          "description": "Unique user identifier.",
          "example": "user-456"
        },
        "firstName": {
          "type": "string",
          "example": "John"
        },
        "lastName": {
          "type": "string",
          "example": "Doe"
        },
        "email": {
          "type": "string",
          "format": "email",
          "example": "john.doe@email.com"
        },
        "phone": {
          "type": "string",
          "description": "Phone number (optional)."
        },
        "favorites": {
          "type": "array",
          "description": "Array of ZPIDs of the user's favorite properties.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": ["userId", "email"]
    },
    "agent": {
      "type": "object",
      "description": "Real estate agent information.",
      "properties": {
        "agentId": {
          "type": "string",
          "description": "Unique agent identifier.",
          "example": "agent-123"
        },
        "name": {
          "type": "string",
          "description": "Agent's full name.",
          "example": "Jane Smith"
        },
        "brokerage": {
          "type": "string",
          "description": "Name of the brokerage the agent works for.",
          "example": "Acme Realty"
        },
        "photoUrl": {
          "type": "string",
          "format": "URL",
          "description": "URL to the agent's profile photo.",
          "example": "https://example.com/agent-photo.jpg"
        },
        "phoneNumber": {
          "type": "string",
          "description": "Agent's phone number.",
          "example": "555-123-4567"
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "Agent's email address.",
          "example": "jane.smith@example.com"
        },
        "licenseNumber": {
          "type": "string",
          "description": "Agent's real estate license number.",
          "example": "CA-1234567"
        },
        "specialties": {
          "type": "array",
          "description": "List of the agent's specialties (e.g., 'Buyer's Agent', 'Listing Agent').",
          "items": {
            "type": "string"
          },
          "example": ["Buyer's Agent", "Listing Agent", "Relocation"]
        },
        "reviews": {
          "type": "array",
          "description": "List of agent reviews.",
          "items": {
            "$ref": "#/definitions/agentReview"
          }
        }
      }
    },
    "agentReview": {
      "type": "object",
      "description": "Review information for an agent.",
      "properties": {
        "reviewId": {
          "type": "string",
          "description": "Unique identifier for the review.",
          "example": "review-789"
        },
        "reviewerName": {
          "type": "string",
          "description": "Name of the person who wrote the review.",
          "example": "John Doe"
        },
        "rating": {
          "type": "integer",
          "description": "Star rating given to the agent (e.g., 1-5).",
          "minimum": 1,
          "maximum": 5,
          "example": 5
        },
        "comment": {
          "type": "string",
          "description": "Text content of the review.",
          "example": "Jane was very helpful throughout the entire process."
        },
        "reviewDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time when the review was submitted.",
          "example": "2023-10-27T10:00:00Z"
        }
      }
    }
  }
}{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Zoom App",
  "description": "JSON Schema for a Zoom App",
  "type": "object",
  "properties": {
    "app_name": {
      "type": "string",
      "description": "Name of the Zoom App",
      "minLength": 3,
      "maxLength": 64
    },
    "version": {
      "type": "string",
      "description": "Version of the Zoom App",
      "pattern": "^\\d+\\.\\d+\\.\\d+$"
    },
    "description": {
      "type": "string",
      "description": "Brief description of the Zoom App",
      "maxLength": 512
    },
    "scopes": {
      "type": "array",
      "description": "OAuth scopes required by the app",
      "items": {
        "type": "string",
        "enum": [
          "user:read",
          "user:write",
          "meeting:read",
          "meeting:write",
          "recording:read",
          "recording:write",
          "webinar:read",
          "webinar:write",
          "report:read",
          "account:read",
          "account:write",
          "dashboard_meetings:read",
          "dashboard_webinars:read",
          "chat:write:admin",
          "chat:read",
          "chat:write",
          "chat_contact:read",
          "chat_contact:write",
          "chat_channel:read",
          "chat_channel:write",
          "phone:read",
          "phone:write",
          "contact_center:read",
          "contact_center:write",
          "im:bot",
          "im:chat",
          "room:read",
          "room:write"
        ]
      },
      "uniqueItems": true
    },
    "event_subscriptions": {
      "type": "object",
      "description": "Event subscriptions for webhooks",
      "properties": {
        "endpoint_url": {
          "type": "string",
          "description": "URL to receive event notifications",
          "format": "url"
        },
        "events": {
          "type": "array",
          "description": "List of events to subscribe to",
          "items": {
            "type": "string",
            "enum": [
              "meeting.started",
              "meeting.ended",
              "meeting.participant_joined",
              "meeting.participant_left",
              "meeting.sharing_started",
              "meeting.sharing_ended",
              "meeting.recording_started",
              "meeting.recording_completed",
              "meeting.created",
              "meeting.deleted",
              "meeting.updated",
              "meeting.registration_created",
              "meeting.registration_approved",
              "meeting.registration_denied",
              "meeting.registration_cancelled",
              "webinar.started",
              "webinar.ended",
              "webinar.participant_joined",
              "webinar.participant_left",
              "webinar.sharing_started",
              "webinar.sharing_ended",
              "webinar.created",
              "webinar.deleted",
              "webinar.updated",
              "webinar.registration_created",
              "webinar.registration_approved",
              "webinar.registration_denied",
              "webinar.registration_cancelled",
              "user.created",
              "user.updated",
              "user.deleted",
              "user.activated",
              "user.deactivated",
              "user.presence_status_updated",
              "user.settings_updated",
              "recording.started",
              "recording.completed",
              "recording.deleted",
              "recording.trashed",
              "recording.recovered",
              "recording.transcript_completed",
              "chat_message.sent",
              "chat_message.updated",
              "chat_message.deleted",
              "chat_channel.created",
              "chat_channel.updated",
              "chat_channel.deleted",
              "chat_channel.member_added",
              "chat_channel.member_removed",
              "phone.caller_connected",
              "phone.caller_disconnected",
              "phone.call_recording_completed",
              "contact_center.engagement_started",
              "contact_center.engagement_ended",
              "contact_center.engagement_transferred",
              "contact_center.engagement_recording_started",
              "contact_center.engagement_recording_completed"
            ]
          },
          "uniqueItems": true
        }
      },
      "required": [
        "endpoint_url",
        "events"
      ]
    },
    "redirect_urls": {
      "type": "array",
      "description": "Allowed redirect URLs for OAuth flow",
      "items": {
        "type": "string",
        "format": "url"
      },
      "uniqueItems": true
    },
    "home_url": {
      "type": "string",
      "description": "Home URL of the Zoom App",
      "format": "url"
    },
    "privacy_policy_url": {
      "type": "string",
      "description": "Privacy policy URL of the Zoom App",
      "format": "url"
    },
    "terms_of_use_url": {
      "type": "string",
      "description": "Terms of Use URL of the Zoom App",
      "format": "url"
    },
    "support_url": {
      "type": "string",
      "description": "Support URL for the Zoom App",
      "format": "url"
    },
    "installation_url": {
      "type": "string",
      "description": "URL for installing the Zoom App",
      "format": "url"
    },
    "deauthorization_notification": {
      "type": "object",
      "description": "Deauthorization notification settings",
      "properties": {
        "endpoint_url": {
          "type": "string",
          "description": "URL to receive deauthorization notifications",
          "format": "url"
        }
      },
      "required": [
        "endpoint_url"
      ]
    },
    "app_credentials": {
      "type": "object",
      "description": "App Credentials, these are sensitive and should not be returned in all responses",
      "properties": {
        "client_id": {
          "type": "string",
          "description": "OAuth Client ID"
        },
        "client_secret": {
          "type": "string",
          "description": "OAuth Client Secret"
        },
        "verification_token": {
          "type": "string",
          "description": "Verification token for event subscriptions"
        }
      },
      "required": [
        "client_id",
        "client_secret"
      ]
    },
    "features": {
      "type": "object",
      "description": "Features the Zoom App utilizes",
      "properties": {
        "in_meeting": {
          "type": "boolean",
          "description": "Whether the app can be used within a meeting"
        },
        "standalone": {
          "type": "boolean",
          "description": "Whether the app can be used outside of a meeting"
        },
        "chat_bot": {
          "type": "boolean",
          "description": "Whether the app is a Chatbot"
        },
        "zoom_app_sdk":{
          "type": "boolean",
          "description": "Whether the app uses the Zoom Apps SDK"
        },
        "rest_api":{
          "type": "boolean",
          "description": "Whether the app uses the Zoom REST API"
        },
        "webhooks":{
          "type": "boolean",
          "description": "Whether the app uses webhooks"
        }
      }
    }
  },
  "required": [
    "app_name",
    "version",
    "description",
    "scopes"
  ]
}{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "JSON schemas of popular web service/apps",
  "type": "object",
  "properties": {
    "Users": {
      "$ref": "#/definitions/User"
    },
    "Content": {
      "$ref": "#/definitions/Content"
    },
    "Transactions": {
      "$ref": "#/definitions/Transaction"
    },
    "Intentions": {
      "$ref": "#/definitions/Intention"
    },
    "Listings": {
      "$ref": "#/definitions/Listing"
    },
    "Rides": {
      "$ref": "#/definitions/Ride"
    },
    "Media": {
      "$ref": "#/definitions/Media"
    },
    "Messages": {
      "$ref": "#/definitions/Message"
    },
    "Bookings": {
      "$ref": "#/definitions/Booking"
    },
    "Orders": {
      "$ref": "#/definitions/Order"
    },
    "Playlists": {
      "$ref": "#/definitions/Playlist"
    },
    "Issues": {
      "$ref": "#/definitions/Issue"
    },
    "Endorsements": {
      "$ref": "#/definitions/Endorsement"
    },
    "Reviews": {
      "$ref": "#/definitions/Review"
    },
    "Communities": {
      "$ref": "#/definitions/Community"
    },
    "CommunityPosts": {
      "$ref": "#/definitions/CommunityPost"
    },
    "CommunityVotes": {
      "$ref": "#/definitions/CommunityVote"
    }
  },
  "recommended": [
    "Users",
    "Content",
    "Transactions",
    "Intentions",
    "Listings",
    "Rides",
    "Media",
    "Messages",
    "Bookings",
    "Orders",
    "Playlists",
    "Issues",
    "Endorsements",
    "Reviews",
    "Communities",
    "CommunityPosts",
    "CommunityVotes"
  ],
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "user_id": { "type": "string" },
        "name": { "type": "string" },
        "email": { "type": "string", "format": "email" },
        "password": { "type": "string", "format": "password" },
        "role": { "type": "string", "enum": ["admin", "user", "driver", "seller", "buyer", "artist"] },
        "preferences": { "type": "object" },
        "connections": {
          "type": "array",
          "items": { "$ref": "#/definitions/Connection" }
        },
        "balance": { "type": "number", "minimum": 0 },
        "linked_accounts": {
          "type": "array",
          "items": { "$ref": "#/definitions/LinkedAccount" }
        },
        "created_at": { "type": "string", "format": "date-time" },
        "profile": { "$ref": "#/definitions/Profile" },
        "phone_number": { "type": "string", "pattern": "^\\+?[1-9]\\d{1,14}$" },
        "address": { "$ref": "#/definitions/Address" }
      },
      "recommended": ["user_id", "name", "email", "password", "role", "created_at"]
    },
    "Connection": {
      "type": "object",
      "properties": {
        "connection_id": { "type": "string" },
        "connected_user_id": { "type": "string" },
        "status": { "type": "string", "enum": ["pending", "accepted", "blocked"] },
        "connected_at": { "type": "string", "format": "date-time" }
      },
      "recommended": ["connection_id", "connected_user_id", "status", "connected_at"]
    },
    "LinkedAccount": {
      "type": "object",
      "properties": {
        "platform": { "type": "string" },
        "account_id": { "type": "string" },
        "linked_at": { "type": "string", "format": "date-time" }
      },
      "recommended": ["platform", "account_id", "linked_at"]
    },
    "Profile": {
      "type": "object",
      "properties": {
        "bio": { "type": "string" },
        "avatar_url": { "type": "string", "format": "uri" },
        "cover_photo_url": { "type": "string", "format": "uri" }
      }
    },
    "Address": {
      "type": "object",
      "properties": {
        "street": { "type": "string" },
        "city": { "type": "string" },
        "state": { "type": "string" },
        "postal_code": { "type": "string" },
        "country": { "type": "string" }
      },
      "recommended": ["street", "city", "state", "postal_code", "country"]
    },
    "Content": {
      "type": "object",
      "properties": {
        "content_id": { "type": "string" },
        "uploader_id": { "type": "string" },
        "type": { "type": "string", "enum": ["post", "media", "product", "ride", "listing"] },
        "title": { "type": "string" },
        "description": { "type": "string" },
        "url": { "type": "string", "format": "uri" },
        "created_at": { "type": "string", "format": "date-time" },
        "metadata": { "type": "object" }
      },
      "recommended": ["content_id", "uploader_id", "type", "created_at"]
    },
    "Transaction": {
      "type": "object",
      "properties": {
        "transaction_id": { "type": "string" },
        "sender_id": { "type": "string" },
        "receiver_id": { "type": "string" },
        "amount": { "type": "number", "minimum": 0 },
        "currency": { "type": "string", "default": "USD" },
        "status": { "type": "string", "enum": ["pending", "completed", "failed", "reversed"] },
        "created_at": { "type": "string", "format": "date-time" },
        "transaction_type": { "type": "string", "enum": ["payment", "refund", "transfer"] },
        "metadata": { "type": "object" }
      },
      "recommended": ["transaction_id", "sender_id", "receiver_id", "amount", "status", "created_at", "transaction_type"]
    },
    "Intention": {
      "type": "object",
      "properties": {
        "_id": { "type": "string" },
        "title": { "type": "string" },
        "description": { "type": "string" },
        "price": { "type": "number", "minimum": 0 },
        "currency": { "type": "string", "default": "USD" },
        "availability": {
          "type": "array",
          "items": { "$ref": "#/definitions/Intention" }
        },
        "category": { "type": "string" },
        "images": {
          "type": "array",
          "items": { "type": "string", "format": "uri" }
        }
      },
      "recommended": ["intention_id", "title", "description", "location", "categpry"]
    },
    "Listing": {
      "type": "object",
      "properties": {
        "listing_id": { "type": "string" },
        "host_id": { "type": "string" },
        "title": { "type": "string" },
        "description": { "type": "string" },
        "price": { "type": "number", "minimum": 0 },
        "currency": { "type": "string", "default": "USD" },
        "availability": {
          "type": "array",
          "items": { "$ref": "#/definitions/Availability" }
        },
        "location": { "$ref": "#/definitions/Location" },
        "created_at": { "type": "string", "format": "date-time" },
        "category": { "type": "string" },
        "images": {
          "type": "array",
          "items": { "type": "string", "format": "uri" }
        }
      },
      "recommended": ["listing_id", "host_id", "title", "price", "availability", "location", "created_at"]
    },
    "Availability": {
      "type": "object",
      "properties": {
        "date": { "type": "string", "format": "date" },
        "is_available": { "type": "boolean" }
      },
      "recommended": ["date", "is_available"]
    },
    "Location": {
      "type": "object",
      "properties": {
        "address": { "type": "string" },
        "latitude": { "type": "number", "minimum": -90, "maximum": 90 },
        "longitude": { "type": "number", "minimum": -180, "maximum": 180 }
      },
      "recommended": ["address", "latitude", "longitude"]
    },
    "Ride": {
      "type": "object",
      "properties": {
        "ride_id": { "type": "string" },
        "rider_id": { "type": "string" },
        "driver_id": { "type": "string" },
        "pickup_location": { "$ref": "#/definitions/Location" },
        "dropoff_location": { "$ref": "#/definitions/Location" },
        "price": { "type": "number", "minimum": 0 },
        "currency": { "type": "string", "default": "USD" },
        "status": { "type": "string", "enum": ["requested", "accepted", "in_progress", "completed", "cancelled"] },
        "created_at": { "type": "string", "format": "date-time" },
        "estimated_time": { "type": "integer", "minimum": 0 },
        "distance": { "type": "number", "minimum": 0 }
      },
      "recommended": ["ride_id", "rider_id", "driver_id", "pickup_location", "dropoff_location", "price", "status", "created_at"]
    },
    "Media": {
      "type": "object",
      "properties": {
        "media_id": { "type": "string" },
        "title": { "type": "string" },
        "type": { "type": "string", "enum": ["audio", "video", "image", "document"] },
        "url": { "type": "string", "format": "uri" },
        "created_at": { "type": "string", "format": "date-time" },
        "duration": { "type": "number", "minimum": 0 },
        "metadata": { "type": "object" }
      },
      "recommended": ["media_id", "title", "type", "url", "created_at"]
    },
    "Message": {
      "type": "object",
      "properties": {
        "message_id": { "type": "string" },
        "sender_id": { "type": "string" },
        "receiver_id": { "type": "string" },
        "content": { "type": "string" },
        "media_urls": {
          "type": "array",
          "items": { "type": "string", "format": "uri" }
        },
        "timestamp": { "type": "string", "format": "date-time" },
        "status": { "type": "string", "enum": ["sent", "delivered", "read"] }
      },
      "recommended": ["message_id", "sender_id", "receiver_id", "content", "timestamp"]
    },
    "Booking": {
      "type": "object",
      "properties": {
        "booking_id": { "type": "string" },
        "user_id": { "type": "string" },
        "listing_id": { "type": "string" },
        "start_date": { "type": "string", "format": "date" },
        "end_date": { "type": "string", "format": "date" },
        "status": { "type": "string", "enum": ["pending", "confirmed", "cancelled", "completed"] },
        "created_at": { "type": "string", "format": "date-time" },
        "total_price": { "type": "number", "minimum": 0 },
        "currency": { "type": "string", "default": "USD" },
        "payment_method": { "type": "string" }
      },
      "recommended": ["booking_id", "user_id", "listing_id", "start_date", "end_date", "status", "created_at", "total_price"]
    },
    "Order": {
      "type": "object",
      "properties": {
        "order_id": { "type": "string" },
        "user_id": { "type": "string" },
        "product_id": { "type": "string" },
        "quantity": { "type": "integer", "minimum": 1 },
        "price_per_unit": { "type": "number", "minimum": 0 },
        "total_price": { "type": "number", "minimum": 0 },
        "currency": { "type": "string", "default": "USD" },
        "status": { "type": "string", "enum": ["pending", "processed", "shipped", "delivered", "cancelled"] },
        "created_at": { "type": "string", "format": "date-time" },
        "shipping_address": { "$ref": "#/definitions/Address" },
        "payment_method": { "type": "string" }
      },
      "recommended": ["order_id", "user_id", "product_id", "quantity", "total_price", "status", "created_at"]
    },
    "Playlist": {
      "type": "object",
      "properties": {
        "playlist_id": { "type": "string" },
        "user_id": { "type": "string" },
        "name": { "type": "string" },
        "media_ids": {
          "type": "array",
          "items": { "type": "string" }
        },
        "created_at": { "type": "string", "format": "date-time" },
        "description": { "type": "string" },
        "cover_image_url": { "type": "string", "format": "uri" }
      },
      "recommended": ["playlist_id", "user_id", "name", "media_ids", "created_at"]
    },
    "Issue": {
      "type": "object",
      "properties": {
        "issue_id": { "type": "string" },
        "reporter_id": { "type": "string" },
        "related_id": { "type": "string" },
        "issue_type": { "type": "string", "enum": ["bug", "feature_request", "user_report", "payment_issue"] },
        "description": { "type": "string" },
        "status": { "type": "string", "enum": ["open", "in_progress", "resolved", "closed"] },
        "priority": { "type": "string", "enum": ["low", "medium", "high", "critical"] },
        "created_at": { "type": "string", "format": "date-time" },
        "updated_at": { "type": "string", "format": "date-time" },
        "comments": {
          "type": "array",
          "items": { "$ref": "#/definitions/IssueComment" }
        }
      },
      "recommended": ["issue_id", "reporter_id", "issue_type", "description", "status", "priority", "created_at"]
    },
    "IssueComment": {
      "type": "object",
      "properties": {
        "comment_id": { "type": "string" },
        "issue_id": { "type": "string" },
        "commenter_id": { "type": "string" },
        "comment": { "type": "string" },
        "created_at": { "type": "string", "format": "date-time" }
      },
      "recommended": ["comment_id", "issue_id", "commenter_id", "comment", "created_at"]
    },
    "Endorsement": {
      "type": "object",
      "properties": {
        "endorsement_id": { "type": "string" },
        "user_id": { "type": "string" },
        "endorsed_id": { "type": "string" },
        "endorsement_type": { "type": "string", "enum": ["skill", "product", "service", "content"] },
        "comment": { "type": "string" },
        "created_at": { "type": "string", "format": "date-time" }
      },
      "recommended": ["endorsement_id", "user_id", "endorsed_id", "endorsement_type", "created_at"]
    },
    "Review": {
      "type": "object",
      "properties": {
        "review_id": { "type": "string" },
        "user_id": { "type": "string" },
        "target_id": { "type": "string" },
        "rating": { "type": "integer", "minimum": 1, "maximum": 5 },
        "review_text": { "type": "string" },
        "review_type": { "type": "string", "enum": ["product", "service", "user", "content"] },
        "created_at": { "type": "string", "format": "date-time" },
        "updated_at": { "type": "string", "format": "date-time" }
      },
      "recommended": ["review_id", "user_id", "target_id", "rating", "review_type", "created_at"]
    },
    "Community": {
      "type": "object",
      "properties": {
        "community_id": { "type": "string" },
        "name": { "type": "string" },
        "description": { "type": "string" },
        "owner_id": { "type": "string" },
        "members": {
          "type": "array",
          "items": { "type": "string" }
        },
        "created_at": { "type": "string", "format": "date-time" },
        "rules": { "type": "string" },
        "category": { "type": "string" }
      },
      "recommended": ["community_id", "name", "owner_id", "members", "created_at"]
    },
    "CommunityPost": {
      "type": "object",
      "properties": {
        "post_id": { "type": "string" },
        "community_id": { "type": "string" },
        "user_id": { "type": "string" },
        "content": { "type": "string" },
        "media_urls": {
          "type": "array",
          "items": { "type": "string", "format": "uri" }
        },
        "created_at": { "type": "string", "format": "date-time" },
        "tags": {
          "type": "array",
          "items": { "type": "string" }
        }
      },
      "recommended": ["post_id", "community_id", "user_id", "content", "created_at"]
    },
    "CommunityVote": {
      "type": "object",
      "properties": {
        "vote_id": { "type": "string" },
        "user_id": { "type": "string" },
        "community_id": { "type": "string" },
        "target_id": { "type": "string" },
        "vote_type": { "type": "string", "enum": ["upvote", "downvote"] },
        "created_at": { "type": "string", "format": "date-time" }
      },
      "recommended": ["vote_id", "user_id", "community_id", "target_id", "vote_type", "created_at"]
    }
  },
  "additionalProperties": false
}

{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Unified Social Media and E-commerce Platform",
  "description": "A unified JSON Schema representing core data structures for various social media, e-commerce, and content platforms.",
  "type": "object",
  "properties": {
    "users": {
      "type": "array",
      "description": "List of users across all platforms.",
      "items": {
        "$ref": "#/definitions/User"
      }
    },
    "content": {
      "type": "array",
      "description": "List of content across all platforms, including posts, products, listings, etc.",
      "items": {
        "$ref": "#/definitions/Content"
      }
    },
    "interactions": {
      "type": "array",
      "description": "List of interactions like comments, likes, shares, messages, etc.",
      "items": {
        "$ref": "#/definitions/Interaction"
      }
    },
    "transactions": {
      "type": "array",
      "description": "List of financial transactions, including orders, payments, donations, etc.",
      "items": {
        "$ref": "#/definitions/Transaction"
      }
    },
    "groups": {
      "type": "array",
      "description": "List of groups or communities.",
      "items": {
        "$ref": "#/definitions/Group"
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the user."
        },
        "username": {
          "type": "string",
          "description": "User's unique username."
        },
        "name": {
          "type": "string",
          "description": "User's full name."
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "User's email address."
        },
        "phoneNumber": {
          "type": "string",
          "description": "User's phone number."
        },
        "profilePicture": {
          "type": "string",
          "format": "URL",
          "description": "URL to the user's profile picture."
        },
        "bio": {
          "type": "string",
          "description": "Short biography of the user."
        },
        "location": {
          "type": "string",
          "description": "User's location."
        },
        "joinedDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the user joined the platform."
        },
        "followers": {
          "type": "array",
          "description": "List of user IDs following this user.",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "following": {
          "type": "array",
          "description": "List of user IDs this user is following.",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "isVerified": {
          "type": "boolean",
          "description": "Whether the user's account is verified."
        }
      },
      "required": [
        "id",
        "username",
        "email"
      ]
    },
    "Content": {
      "type": "object",
      "description": "Represents a generic content item.",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the content item."
        },
        "creatorId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the user who created the content."
        },
        "type": {
          "type": "string",
          "description": "Type of content.",
          "enum": [
            "post",
            "product",
            "listing",
            "video",
            "message",
            "comment",
            "event",
            "group",
            "page",
            "campaign",
            "order",
            "review",
            "article"
          ]
        },
        "content": {
          "type": "string",
          "description": "Text content of the item (if applicable)."
        },
        "media": {
          "type": "array",
          "description": "List of media URLs associated with the content.",
          "items": {
            "type": "string",
            "format": "URL"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of content creation."
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of last content update."
        },
        "metadata": {
          "type": "object",
          "description": "Additional metadata specific to the content type.",
          "additionalProperties": true
        }
      },
      "required": [
        "id",
        "creatorId",
        "type",
        "createdAt"
      ]
    },
    "Interaction": {
      "type": "object",
      "description": "Represents an interaction with a content item.",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the interaction."
        },
        "userId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the user performing the interaction."
        },
        "contentId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the content being interacted with."
        },
        "type": {
          "type": "string",
          "description": "Type of interaction.",
          "enum": [
            "like",
            "comment",
            "share",
            "message",
            "reply",
            "view",
            "reaction"
          ]
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of the interaction."
        },
        "commentText": {
          "type": "string",
          "description": "Text content of the comment (if interaction type is 'comment')."
        },
        "metadata": {
          "type": "object",
          "description": "Additional metadata specific to the interaction type.",
          "additionalProperties": true
        }
      },
      "required": [
        "id",
        "userId",
        "contentId",
        "type",
        "timestamp"
      ]
    },
    "Transaction": {
      "type": "object",
      "description": "Represents a financial transaction.",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the transaction."
        },
        "buyerId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the user making the purchase/payment."
        },
        "sellerId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the user receiving the payment (if applicable)."
        },
        "contentId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the content associated with the transaction (e.g., product, listing, event)."
        },
        "amount": {
          "type": "number",
          "format": "float",
          "description": "Amount of the transaction."
        },
        "currency": {
          "type": "string",
          "description": "Currency code (e.g., USD, EUR)."
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of the transaction."
        },
        "status": {
          "type": "string",
          "enum": [
            "pending",
            "completed",
            "failed",
            "refunded"
          ],
          "description": "Status of the transaction."
        },
        "paymentMethod": {
          "type": "string",
          "description": "Payment method used (e.g., 'credit_card', 'paypal')."
        },
        "metadata": {
          "type": "object",
          "description": "Additional metadata specific to the transaction type.",
          "additionalProperties": true
        }
      },
      "required": [
        "id",
        "buyerId",
        "amount",
        "currency",
        "timestamp",
        "status"
      ]
    },
    "Group": {
      "type": "object",
      "description": "Represents a group or community.",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the group."
        },
        "name": {
          "type": "string",
          "description": "Name of the group."
        },
        "description": {
          "type": "string",
          "description": "Description of the group."
        },
        "creatorId": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the user who created the group."
        },
        "members": {
          "type": "array",
          "description": "List of user IDs who are members of the group.",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of group creation."
        },
        "privacy": {
          "type": "string",
          "enum": [
            "public",
            "private",
            "secret"
          ],
          "description": "Privacy setting of the group."
        }
      },
      "required": [
        "id",
        "name",
        "creatorId",
        "members"
      ]
    }
  }
}